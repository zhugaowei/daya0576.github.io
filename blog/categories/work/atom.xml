<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: work | Henry Z's blog~]]></title>
  <link href="http://changchen.me/blog/categories/work/atom.xml" rel="self"/>
  <link href="http://changchen.me/"/>
  <updated>2017-07-23T23:59:02+10:00</updated>
  <id>http://changchen.me/</id>
  <author>
    <name><![CDATA[Daya]]></name>
    <email><![CDATA[daya0576@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hypers 后台开发 每周总结]]></title>
    <link href="http://changchen.me/blog/20170321/hypers-first-week-summary/"/>
    <updated>2017-03-21T00:44:06+11:00</updated>
    <id>http://changchen.me/blog/20170321/hypers-first-week-summary</id>
    <content type="html"><![CDATA[<blockquote><p>在宏路数据HFA(HyperS For Advertising)组开始人生第一份工作, 职场小菜鸟的磕绊前行~~.  <br/>
转眼一周就过去了, 特写下这篇日志记录总结一下每周的总结和反思.</p></blockquote>

<!--more-->


<br>  


<p><code>(DESC, 持续更新中...)</code></p>

<br>


<br>


<h1>第十九周 (17 July 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>前段升级新框架, 把转化管理那块的接口重写一下. 主要把分散各地的方法整合到REST中去, 再配合检查参数和权限的装饰器, 这代码写起来, 真的是轻松愉悦♂.<br/>
REST真的是个好东西, 因为百分之九十的接口都是对一个特定资源做<strong>增删改查</strong>操作, 然后把这些操作都集中起来, 就可以避免写很多重复功能的接口.     <br/>
比如对user的retrieve操作:    <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week19_rest.jpg"></li>
<li>第一次去生产环境上修了bug, 感觉现在才接触生产环境晚的有些过分了, 还是应该主动多去接触自己未接触的领域.</li>
<li>公司搬家咯, 感觉瞬间高大上了, 秀一张图: <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week19_new.jpg"></li>
</ol>


<h3>给下周的自己一些建议</h3>

<ol>
<li>最近总是在想一个问题, 自己的优势(核心竞争力)到底是什么. 最近想出了一丝头绪, 希望未来的日子继续努力~~</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十八周 (10 July 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>这周drinksober请假了, 感觉项目突然就停滞不前了, in a chaos, people just want to make their job done, instead of making it excellent.</li>
<li>在解决一个nginx配置的问题上, 深深的感到自己的无力感. 还是要去培养一下自己快速学习一个新技能的能力.</li>
<li>下周就要搬公司了, 希望有新的开始吧.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十七周 (03 July 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li><strong>周一/周二:</strong> 哎，请了两天假，因为得了急性肠胃炎，吐得快怀疑人生了。慢慢的开始思考身体的重要性和工作的意义。</li>
<li><strong>周三：</strong> 开始做oauth2的开发，今天做了的工作就是把原来对外接口的token验证， 换成统一的拿access token去auth拿用户的方式。<br/>
希望这周能把剩下的工作做完。</li>
<li><strong>周四周五：</strong> 还不错， 把OAuth2.0 sdk写完了，打包传到PyPI上了: <code>pip install hypers-oauth2</code>。  <br/>
从README.md截的图: <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week17_auth2.png"></li>
</ol>


<h3>给下周的自己一些建议</h3>

<ol>
<li>最近有一个明显的发现， 就是自己更博的速度急速下降， 侧面说明学习的脚步渐渐的放缓了。      <br/>
所以还是要在课余多学习提高自己， 充分吸收营养， 才能拉出新鲜饱满的屎。</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十五周 (19 June 2017)</h1>

<p>请假了一周多一天回学校， 参加了毕业典礼，带爸妈去澳洲玩了八天。  <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week15_g.jpg"></p>

<br>


<br>


<hr />

<br>


<br>


<h1>adtracker v1.15 开发结束:</h1>

<p>我完成的任务: <br/>
<img style="max-height:100px" class="lazy" data-original="/images/blog/170325_hypers_summary/v1.15.png"></p>

<p>这个开发周期做了好多任务, 主要还是熟悉报表的流程, 并参与了设计用pandas做报表的新逻辑: <br/>
<img style="max-height:220px" class="lazy" data-original="/images/blog/170325_hypers_summary/1.15_run.png">  <br/>
但感觉慢慢的沦陷为一个增删改查的熟练工, Ahh, 不知道自己的优势到底在哪了.  <br/>
还是要多去学习吧, 不断获取新知识, 追求更好的代码质量。</p>

<br>


<br>


<hr />

<br>


<br>


<h1>第十三周 (05 June 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>周一: 完成了关键词报表用pandas的重写, 写过一个报表后, 再写新的报表会轻松很多.</li>
<li>周二: 关键词报表的大致完成, 抓紧测试.</li>
<li>周三周四周五: 修复了一些bug</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>慢慢的每天陷在赶需求, 补bug的泥ze里, 还是要在平时多去学习新知识吧, 不然只会变得越来越平庸.</li>
<li>买了一本&lt;算法导论>慢慢看, 因为看了一下目录, 每一章都接触过, 但却都没有完全掌握.   <br/>
打算用Python把里边的算法都实现一遍, 打打基本功, 第一章关于<a href="/blog/20170611/python-sorting-algorithms/">排序的笔记</a>.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十二周 (30 May 2017)</h1>

<p>(只有三天, 略..)</p>

<br>


<br>


<hr />

<br>


<br>


<h1>第十一周 (22 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>前端升级新框架了, 一直配合weiwei做对接, 写一些新的接口, 改一下老接口的输入输出格式. <br/>
当去看一些老接口的代码的时候, 有一种打开一个十年没动的箱子一样, 满满的一种历史尘土的味道. 会发现其中有一些写的很坑的地方, 但又不敢大改: <br/>
这也是我最近比较烦的地方, 新来的同事写的代码先不说写的好不好, 固执的不按我们新定的pandas报表逻辑走, 真的让人很头疼. <br/>
写代码完成需求其实是最最基本的要求, 代码的可读性, 健壮性, 扩展性, 可维护性, 还有性能等等都是要仔细考虑, 尽力去追求的地方. <br/>
像我写第一个需求的时候, 我知道我写的不好, 让黄俊给我一起看了三四遍, 要是像这样<strong>虚心求教态度和基本沟通的能力</strong>也没有的话, 在同一个团队里, 真的会让其他人很头疼.</li>
<li>学了一下ipdb, pycharm的debug模式, 重新加载的时候确实有一点慢, 如果只是简单调试的话, ipdb也是挺方便的(cai guai)</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>之前就有想法, 趁前后端分离的机会, 重写项目中不科学的那些代码, 但上两周实在有点忙, 就没有做起来.  <br/>
下周碰到之前的坑代码, 还是要尽力去重写的好一些.</li>
<li>学习学习学习~~ 有吸收才能有进步!</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十周 (15 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>在正确的道路上 <br/>
1) 对各个部分模块化, 减少耦合度. 从而将报表重复逻辑的地方抽出来写成基类, 写出清晰简洁的代码. <br/>
2) 利用pandas处理数据的优势, 配合queryset处理数据.    <br/>
自定义属性报表的EChart和表格部分的写完了, 但当然还是有一些问题, 迫不及待的想去解决了.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>报表部分:

<ul>
<li>queryset_by_register的优化.</li>
<li>生成的query_paras, 忘记放到filter了.</li>
<li>最后生成的seg是pandas Timestamp, 还是需要用sublist 格式显示 &mdash;> 在_after处理?</li>
<li>在sort之后, 返回pagesize大小的row? 竟可能的处理分页的优化.</li>
<li>有些地方写的太复杂了, 简化增加可读性.</li>
<li>单元测试</li>
</ul>
</li>
<li>有空还是要去仔细看下Numpy和Pandas的官方文档, 对库的多一份了解才能写出更简洁高效的代码.</li>
<li>去django的google group问个问题, 我是应该看算法导论, 还是Expert python, 或者python或django的官方文档.<br/>
最近的一些事情还是挺让我受刺激, 感觉自己还是要更努力一点把, 只有这样才能掐住命运的喉咙.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第九周 (08 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>主要看了报表那一部分的代码, 昨天晚上整理了一下上周看的成果和下周的计划, 希望下周可以早点把这部分搞定.  <br/>
临时写在注释里&hellip;  <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week9_plan.png"></li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>今天在网上看到说什么无限零食, 办公环境对程序员都是很肤浅的吸引.  <br/>
真正最核心是吸引力还是 给力的同事 和 给力的项目, 做有意义的事情.  <br/>
希望有一天也能像drinksober一样挑起大梁, 一起把项目打造成自己喜欢满意的样子. <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week9_huang.JPG"></li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第八周 (02 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>开始进行下一个版本的迭代了, 了解需求, 慢慢做起来.  <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week8-jira.png"></li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>在课余时间还是要再努力一些, 例如和黄俊一起看看asyncio, 或者去跑跑步, 出去走走参加活动认识新朋友, 都比在家躺在床上刷微博来的好.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第七周 (24 APR 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<p>1.主要研究了一下django performance and optimization[<a href="/blog/20170503/django-performance-and-optimisation/">笔记</a>], 然后利用这些技巧把一个用的很频繁的方法, 从100多ms降到了20ms.  <br/>
结果看到别人写的代码, 一下子就把数据库的三四万条数据拉出来放到内存里, 然后逻辑还有问题, 我的内心是奔溃的.</p>

<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>之前刚接触项目的时候, 代码看起来也是很困难的, 但慢慢啃下来也没有那么可怕了. 还是要跳出自己的舒适区, 积极地去接触自己对于项目不熟悉的地方, 快速的提高自己.  <br/>
其实阅读源码也是一种能力把.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第六周 (17 APR 2017)</h1>

<p></p>


<h3>完成的工作总结(尝试用提前做计划去督促自己):</h3>

<ol>
<li>周一(计划): 看一下python是如何处理hash table的冲突(散列表), docker的系统学习</li>
<li>周二到周五: >&lt;</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>自己做了共享campaign的需求, 改写了一些权限判断的代码, 打算写一下文档.</li>
<li>专研一下Django orm那块的performance 和 optimization.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>v1.14 开发结束:</h1>

<p>我完成的任务: <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/v1.14.png"></p>

<br>


<br>


<hr />

<br>


<br>


<h1>第五周 (10 APR 2017)</h1>

<p></p>


<h3>完成的工作总结(尝试用提前做计划去督促自己):</h3>

<ol>
<li>周一: 完成共享界面的接口与前端的对接</li>
<li>周二(提前定的计划): 1. 测试对ShareAccount表兼容的测试. 2. 完成 account list 页面. 3. 完成campaign list的三个影响.</li>
<li>周三到周五: 测试反馈的bug的修复.</li>
<li>看了一遍python的内置方法的官方文档. <a href="http://note.youdao.com/noteshare?id=a924458d86c4506f5d2a304e5c754133">笔记</a></li>
<li>学习了一下docker的基本操作.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>提前做计划这个方法还是挺好的, 提高了自己的效率.</li>
<li>这周比较闲, 可以多利用时间去提高自己, 加油~~</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第四周 (3 APR 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>修bug</li>
<li>修bug</li>
<li>修bug</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<p>这周只有三天, 忙碌却收获颇少. 原因在工作总结里可以看到: <br/>
就是把所有时间都花在修复之前写的代码的bug上了, 自己给自己挖了很多坑.    <br/>
给自己的两点建议:</p>

<ol>
<li><code>不要过于消极, 尽力就好:</code> 明明知道要在写代码前做好设计, 但总是做不好, 是不是其实因为的能力有问题.  <br/>
努力去在每次碰键盘前用一张纸把每个细节都想清楚, 慢慢提高, 不着急.</li>
<li><code>花一个小时在纸上写清细节:</code> 出bug是因为需求有些复杂, 光靠凭空想很难考虑到全局. 最好在纸上写下每个细节, 想清楚所有前后关联.</li>
<li>不要写太复杂的测试.. 在测试中修复bug也是一个很痛苦的事情, 不要问我是怎么知道的..</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第三周 (27 Mar 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>最主要的就是, 在黄俊的手把手下, 完成了公司逻辑比较复杂的一些新需求, 并完成了测试. <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week3_sharing.png"></li>
<li>写了一个自动生产API文档(function的<strong>docstr</strong>)的小程序.</li>
<li>阅读了一下django的ORM many to many的文档.[笔记]](/blog/20170405/many-to-many-relation-with-extra-field-django/)  <br/>
因为在公司的逻辑中, 一个用户有多个账号, 一个账号又可以共享给多个用户. 原先的逻辑是用一张表去关联用户和账号的这两张表.  <br/>
我在想能不能用django ORM自带的many to many relation代替, 但把文档读了一下, 发现还是不行.  <br/>
原因是公司的业务逻辑中<strong>用户对账号的关系</strong>还有一个permission的属性, 自带的ORM好像实现不了这个功能.   <br/>
虽然这个想法最后作罢了, 但这种思考和尝试还是很棒的, 应该在编码前多去做这样的思考.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li><code>测试的正确姿势</code>: 测试是很重要的, 但还是要去了解专业的测试逻辑应该是怎么样的, 多去学习而不是一味的埋头写代码.  <br/>
规范的测试和文档对于软件开发来说还是很重要的.</li>
<li><code>别忘了学习</code>: 不要总是着急的去写业务代码, 这周花在学习提高自己的时间还是太少了.  <br/>
例如可以多花点时间去搞清楚这个request来前的来后做的封装细节.  <br/>
好处是万一有什么奇怪的bug, 会更顺手的去解决. 还可以多去学习如何写出Pythonic的代码, 提高代码的可读性和合理性.</li>
<li><code>不要让懒惰侵蚀自己</code>: 差点忘了这最重要的一点: 就是上周下班后一回家, 自己就钻到被窝里. 刷刷微博看看直播, 到一两点然才睡觉.   <br/>
其实我可以去咖啡馆静下心来看看书学习新知识, 去逛街买些新衣服小玩意, 去接触新的文化和人群, 去健身. <br/>
躺倒床上只会让人越躺越累. 在上海一个这样的大都市, 要珍惜提高自己的每个机会.   <br/>
这是我下周<strong>最需要做出的改变</strong>.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第二周 (20 Mar 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>把REST框架的tutorial游览了一下, 大致了解了一下.</li>
<li>周二把RabbitMQ 官方的tutorial读了一遍: <a href="http://note.youdao.com/share/?id=e992e5f73efb1d9098cd7b4e91672cd3&amp;type=note#/">笔记</a></li>
<li>对重构的API那部分写一下单元测试.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>这周慢慢开始写一些公司业务部分的代码了, 但还是要时刻提醒自己, 要<strong>多花点重心在学习上</strong>, 而不是着急者想把任务尽快完成。  <br/>
例如<strong>需求是写django的一些测试用例:</strong>

<ul>
<li>尽力把django的测试机制原理搞清楚。</li>
<li>研究对REST的create retrieve list update四个方法 测试的正确逻辑。</li>
<li>等等..</li>
</ul>
</li>
<li><strong>每日总结:</strong> 感觉这周过的好快, 以后还是每天抽十分钟写一下每天的总结吧, 这样写每周总结的时候也方便一些.</li>
<li><strong>思考后再行动</strong>: 这么多年编程的经历, 最重要的一个真理就是: 在开动编码前, 一定要把整个流程或实现思路想清楚. 换句话说就是: 编码只是占一个"项目"中maybe 30%的比重, never rush to code.</li>
<li><strong>学习清单:</strong> 例如一些基础知识: http协议, tcp/ip协议, epoll/select模型 的深入学习, etc. <br/>
从俊哥身上看到的一个很有趣的&amp;很棒的优点就是他很喜欢看书, 在工作外的时间买些书来看看, 而不是刷刷网页一天就过去了. 我之后要慢慢做起来的.</li>
<li><strong>人情事故:</strong> 就像女朋友说的我有些<strong>自闭</strong>吧. 但有时候, 我只是不喜欢故意去讨好一个人。 举个小小的朋友圈例子: 我知道多给别人点点赞, 或许和那些平时接触不是很多的同事朋友能变成点赞之交, 但我真的太懒了, 不太想去维系这些'友情'。 比如我不太喜欢一个人, 我真的就会表现出来我的冷淡和疏远。 换句话说, 我更喜欢去交真心的朋友, 而不是'friend with benefits'(笑)。 <br/>
但和我的性格也有关系吧, 太敏感了, 有些社交恐惧症. 不太喜欢人与人之间的那种压力, 所以我常常更愿意去选择逃避和独处.   <br/>
当然有些地方还是需要做出一些改变滴, 例如是自己要变得更加positive和open一些, 和别人相处的时候可以稍微找找话题, 遇到同组的同事, 主动打打招呼。 至少不要让别人觉得你是一个很难相处的人.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第一周 (13 Mar 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>Ubuntu工作环境的搭建 和 HFA项目的配置.</li>
<li>Python MRO（Method Resolution Order）<a href="/blog/20170320/python-mro/">笔记</a></li>
<li>初步了解adtracker项目的业务逻辑.</li>
<li>Django Class-based Views了解 <a href="/blog/20170313/class-based-views-notes/">笔记</a></li>
<li>Django REST framework了解 <a href="/blog/20170322/django-rest-framework-hypers/">笔记</a></li>
<li>Django middleware了解</li>
<li>Django 源码深入阅读, 了解如何创建Server和处理Request的整个过程. <a href="/blog/20170318/django-source-code-analysis/">笔记</a></li>
</ol>


<p></p>


<h3>上班亲身经历总结</h3>

<ol>
<li><strong>迷惘的开始:</strong> 第一天去报到, 填了资料, 签了协议卖了身, 就屁颠屁颠的去上班了. 刚到的工位时候, 其实是有些小失望的: 办公的设备实在是有些简陋. 配的笔记本和显示器都有些旧了. 不是都是标配MacBook和Dell 2K显示器的吗, 哈哈
所以个人觉得办公设备还是自己选比较好, 比如显示器. 公司可以给新员工配1000的基础款, 但新员工如果不满意的话, 想要2000的显示器. 没问题, 剩下的差价一人出一半呗, 我自费五百, 公司再出五百, 给新员工配2000的显示器.  <br/>
感觉这样的话还是比较科学一些.</li>
<li><strong>友善的同事:</strong> 虽然心里有些迷惘, 但同事人都挺好的. 特别是无所不知黄俊小哥哥, 帮我换了椅子拿了本子, 第一周也是耐心回答了我无数的问题. 感覺自己运气总是很好, 能遇到耐心厉害的老师. 这些也是我在公司能待下去的最重要原因吧.</li>
<li><strong>保持效率:</strong> 第一周的效率其实还是可以的(打个85分吧), 感觉学了很多东西. 但今天(第二周的周一)效率就有些雪崩了, 不要因为工作久了就混日子. 要努力保持清醒的头脑, 知道自己在学什么做什么, 多去虚心问问题.</li>
</ol>


<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记录moobox的点滴(技术篇)]]></title>
    <link href="http://changchen.me/blog/20150926/moobox-knowledge/"/>
    <updated>2015-09-26T22:43:11+10:00</updated>
    <id>http://changchen.me/blog/20150926/moobox-knowledge</id>
    <content type="html"><![CDATA[<blockquote><p>在moobox工作了两个月，用这篇日志记录这段日子的技术点滴。  <br/>
ps.虽然一直有这个计划，平时也会作笔记，但是到头来还是记得不太全， <br/>
就粗略的写一下好了。</p></blockquote>

<!--more-->


<h2>Mysql</h2>

<p>公司用的数据库是mysql，可惜自己对数据库的知识忘得差不多了，下面记录一些后来回忆起的sql用法。<br/>
有个软件叫做 MySQL Workbanch，还是挺方便的。       <br/>
1.增删改查就不说了，还是要熟练，总不能写一次去看一下语法吧。  <br/>
2.desc也是必备，以前上学的时候老是记不清，但工作中还是desc用的比较多，asc是默认的升序。 <br/>
3.left和inner join，关联多表的时候的必备，还是要保持清醒。  <br/>
4.group by后边可以加限制条件，叫做group by having (&hellip;), 学数据库的时候学过，小小鸟提起的时候才如梦初醒 <br/>
group by的时候可以根据两个条件进行group by， 例如：
<code>sql
//获取每个地推人员的每天数据
//计算录入
select date(from_unixtime(b.CreatedDate+60*60*8)), count(distinct a.UID),b.CreatedBy from ParkingRawData a
inner join Customer b on a.UID = b.ParkingUID where Source = 'tuhu' and b.CreatedBy != ''
group by date(from_unixtime(b.CreatedDate+60*60*8)), b.CreatedBy
</code>
4.insert的妙用：
<code>sql
INSERT INTO ParkingRawDataHistory(RawID,UID,Name)
select ID,UID,Name from ParkingRawData
where UID =  'e4d1701c-4185-11e5-af26-3c15c2bca022';
</code>
5.sql 时间戳  <br/>
<code>sql
SELECT FROM_UNIXTIME( 1440015345, '%Y年%m月%d日' )
SELECT UNIX_TIMESTAMP()
SELECT UNIX_TIMESTAMP(Current_TimeStamp)
</code>
6.模糊查找 <br/>
<code>sql
SELECT * FROM ParkingRawData where name like "%虹景公寓酒店%"
</code>
总结：学好sql语句也是很重要的，一句好的sql语句能很好的简化代码的复杂度，   <br/>
并且提高接口的效率，只恨自己数据库忘得太快。</p>

<br> 


<h2>Python</h2>

<p>1.每次在django中添加接口，我都要检查的问题：     <br/>
* &ndash; &ndash; -数据库中api和page的权限。 <br/>
* &ndash; setting中数据库变量的配置 和 接口url的配置是否正确。 <br/>
* WebInterfaceBase修改跨越问题（后台和前端没有放在一个项目里）。 <br/>
* 测试接口时json格式是否正确（可以去网上好多在线检测的网站）。 <br/>
2.python list去除重复元素 <br/>
<code>python
list(set(all_workers))
{}.fromkeys(workers).keys()
</code>
3.django端口占用的问题 <br/>
查看端口占用  <br/>
<code>
I:\Users\Daya&gt;netstat -aon|findstr "8000"
  TCP    0.0.0.0:8000           0.0.0.0:0              LISTENING       5664
  TCP    127.0.0.1:8000         127.0.0.1:49640        ESTABLISHED     5664
  TCP    127.0.0.1:8000         127.0.0.1:49851        ESTABLISHED     5664
  TCP    127.0.0.1:8000         127.0.0.1:49852        ESTABLISHED     5664
  TCP    127.0.0.1:49640        127.0.0.1:8000         ESTABLISHED     3716
  TCP    127.0.0.1:49851        127.0.0.1:8000         ESTABLISHED     3716
  TCP    127.0.0.1:49852        127.0.0.1:8000         ESTABLISHED     3716
I:\Users\Daya&gt;tasklist|findstr "5664"
pycharm.exe                   5664 Console                    1    372,204 K
I:\Users\Daya&gt;tasklist|findstr "3716"
chrome.exe                    3716 Console                    1    196,444 K   
</code>
4.遇到过一个问题就是django的问题就是明明有这个文件夹，却报错说找不到。  <br/>
因为这个文件夹里没有init的空文件，django是通过URL和这个标示来找的。 <br/>
5.时间戳的一些操作 <br/>
```python</p>

<h1>时间的转换，python的包都很完善了。</h1>

<p>print int(time.mktime(time.strptime(&ldquo;20140903131540&rdquo;, &lsquo;%Y%m%d%H%M%S&rsquo;)))</p>

<h1>时间戳，统一0时区的时间戳。</h1>

<p>vtimestamp = str(time.mktime(datetime.datetime.utcnow().timetuple()))
<code>
6.后来加的分页操作，注意limit后边两个参数的意义。   
</code>python
cursor.execute(sql_count)
data = cursor.fetchall()
if len(data) > 0:</p>

<pre><code>pagecount = data[0][0]/pagesize + 1
self.pagecount = pagecount
</code></pre>

<p>start = (pagenumber-1) * pagesize
sql += &ldquo; limit %s, %s &rdquo; % (start, pagesize)
```
先说这这些吧，其实还有好多，不细说了。  <br/>
<em>说一点感悟吧，写代码就是生活中做事一样，一个好的计划是最重要的， 每一步做什么理清楚后，</em>   <br/>
<em>写起代码来就事半功倍了，所以不要埋头苦写，做点草稿，有好的规划才行。</em></p>

<h2>JS+HTML5</h2>

<p>做后台的话，有时候写完接口，还要迫不得已要把前台的东西都包了、 <br/>
但说实话，之前对js真的是完全没有实战过，所以写起来还是很吃力。  <br/>
有力发不出的感觉，总是被一些小错误困扰很久，把一些简单的问题搞复杂。  <br/>
记录一些前端方面的新知识吧。  <br/>
1.自适应布局：<a href="http://nec.netease.com/library/101023">http://nec.netease.com/library/101023</a> <br/>
之前大一学过css布局，但现在都是html5了还要手机适配，原来的样式已经用不了了。  <br/>
上面这个网址还不错，有一些自适应的例子，但感觉还是好复杂，应该有更简单的解决方法吧。  <br/>
2.jquery的show()和hide()其实就是改变dispay:none
3.设置a标签的超链接  <br/>
<code>html
//以前的超链接
&lt;a href="#"&gt;&lt;/a&gt;
//现在的写法，防止出错。   
&lt;a href="javascript:;"&gt;&lt;/a&gt;
</code>      <br/>
4.确认按钮   弹出是否提交？ <br/>
<code>javascript
if (confirm("确认信息无误？")) {}
</code>
5.动画  旋转  <br/>
```css
transform:rotate(90deg)</p>

<p>transform:rotate(0deg);
transition: transform 0.3s;
<code>
6.滚动条的自动定位     
</code>javascript
$(&lsquo;.div-fixed-height&rsquo;).animate({scrollTop: $(&lsquo;#reportdetail&rsquo;).height()}, 300);
<code>
7.遍历所有td    
</code>javascript
$(&ldquo;#nearparkingscontent&rdquo;).find(&ldquo;:checkbox:checked&rdquo;).each(function(){</p>

<pre><code>var val = $(this).closest('tr').find('td').eq(7).text();
parking_uids += val + " ";
</code></pre>

<p>});
<code>
8.js str去除最后一位
</code>javascript
type.parkingtype = parkingtypestr.substring(0, parkingtypestr.length-1);
<code>
9.checkbox 的onchange事件    
</code>javascript
function alertMerge(check1){
if(check1.checked==true)
  if (confirm(&ldquo;确认合并此停车场？&rdquo;)) {</p>

<pre><code>    //
}else{
    check1.checked=false;
    //check1.attr("checked", "checked");
}
</code></pre>

<p>}
<code>
10.jquery   移除样式。   
</code>javascript
$(&ldquo;.syzx > span:first&rdquo;).removeAttr(&ldquo;style&rdquo;);
```
<em>总结</em>：js不会的多，记的笔记也多点，但总的来说，个人觉得js是一个很灵活的语言，  <br/>
有时间还是要多掌握一些基础的特性，才能写出一些精炼高效的代码。</p>

<h2>参与的所有项目大合照</h2>

<p><img class="lazy" href="javascript:;" data-original="/images/blog\150923_moobox/sourcetree.png" >  <br/>
从上往下简单介绍一下。  <br/>
1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[moobox_recode(回忆篇)]]></title>
    <link href="http://changchen.me/blog/20150923/moobox-recode/"/>
    <updated>2015-09-23T15:13:39+10:00</updated>
    <id>http://changchen.me/blog/20150923/moobox-recode</id>
    <content type="html"><![CDATA[<blockquote><p>在moobox工作了两个月，用这篇日志记录这段日子的点点滴滴。</p></blockquote>

<!--more-->


<br>  


<h2>moobox经历~</h2>

<p>转眼大学就毕业了，什么也没学会，就会点python。  <br/>
带着瘦弱的身体在上海这个充满梦想的城市横冲乱撞。</p>

<br>


<h3>面试</h3>

<p>故事还是从面试开始说起吧。  <br/>
七月份来上海找工作，主要面试前端和python后台的职位。  <br/>
面试了前端才发现自己对前端还只是掌握的皮毛（工作中发现自己的css知识真的是上个世纪的）。  <br/>
后台没记错的话是面试了三家吧，有一家印象比较深刻，好像叫做<code>奥狮数位</code>，是一家传媒公司。  <br/>
在大厦的最高层，进门还要刷卡，豪华的装饰，大厅里，乒乓球桌等娱乐设施应有尽有，简直就是梦想的天堂  <br/>
当然对这家比较长草，但一直没回复我，估计把我当备胎吧、  <br/>
还有一家面试的就是<code>Moobox</code>了，是个初创的公司。分为两个房间，大致分为一边软件，一边硬件。  <br/>
到的时候先做了一张笔试，有一些基础的数据库，算法，还有linux的题目。   <br/>
羞愧的是，由于没有准备过，连left join，inner join都搞不太明白，  <br/>
最后一题是编程，考的递归。写一个斐波那契数列，当时对这些早忘了，用了全局变量，写的特别麻烦。  <br/>
后来工作的时候，突然兴起重新写了一下，真的是被当时的自己蠢哭了。  <br/>
```python
def printArray(i):</p>

<pre><code>if i == 1:
    return 1
if i == 2:
    return 1
else:
    # print printArray(i-1) + printArray(i-2)
    return printArray(i-1) + printArray(i-2)
</code></pre>

<p>for i in range(1, 6):</p>

<pre><code>print printArray(i)
</code></pre>

<p>```
做完之后，就有两个面试官拿着MacBook过来面试我了。  <br/>
一个叫做Brain，算是公司的CEO吧，还有一个叫做陈老板，也算是技术团队的小boss。  <br/>
面试问的都是我简历上做的一些项目，后来才偶尔听到陈老板说他之前研究生读的就是云计算，  <br/>
怪不得对我做虚拟机节能的项目这么感兴趣。   <br/>
当时应该多说一些的，因为之前不管是和别人讨论还是答辩的时候，没什么人能听的懂，所以很受挫，就不太愿意和别人提起这些。   <br/>
有些细节也不太记得了，最后他们拉我到外边，灌了鸡汤，谈了一下薪资， 青涩的我也只求一个收留的地方，也就任他们宰割了。   <br/>
过了一个星期后接到brain的电话，给我发了offer，让我周一去上班。  <br/>
这个地方我以后还是要注意一下，多给自己争取一点考虑的时间，  <br/>
虽然有更满意的offer可以随时走人，但我还是做不出那样无情的事情。  <br/>
发邮件给长草的奥狮，被温柔地拒绝了之后，也就无怨无悔重新踏上通往上海的旅途了。</p>

<br>


<h3>入职</h3>

<p>还记得那是个阳光灿烂的星期一，和平时并没有什么不同，可空气里却散发着一丝诡异的味道。  <br/>
咳咳。。编不下去了、   <br/>
被要求九点半报道，我也早早的准备好，准时到了公司。   <br/>
当时真的是青涩的像个背着双肩包的初一小朋友、 不扯这些细节了。 <br/>
公司给我配了主机和显示器，可惜后来我还是用我自己的笔记本。  <br/>
听美工说公司不提倡自己带东西，比如键盘鼠标，自己的电脑。  <br/>
然而刚好自己从家带了显示器，每天就自己背着键盘鼠标和我的笔记本去公司。   <br/>
刚开始他们也就让我给新电脑配一下环境，以前写python的时候都是用eclipse。   <br/>
然而用上PyCharm后就知道eclipse弱爆了，就说配色和主题就爆了eclipse几条街，  <br/>
<img class="lazy" data-original="/images/blog\150923_moobox/arrayToXml.png" >  <br/>
之后就是看公司django后台的代码了，当时真的是一头雾水。   <br/>
幸好有人带我，他的名字叫做小小鸟<img class="lazy" data-original="http://ctc.qzonestyle.gtimg.cn/qzone/em/e113.gif" >   <br/>
怎么说呢，真的非常感激小小鸟，不知道这辈子再也碰不到这么耐心的老师了、  <br/>
小小鸟是个典型的外强中柔的人，有时候一着急也会发脾气，人的个性特别强  <br/>
所以brain对他提需求的时候，其实有些需求不太合理，小小鸟也不太鸟他，态度极其恶劣。  <br/>
但是你对他好点，耐心点，其实他人特别好，后来移位置坐到他旁边还给了我好多零食吃 哈哈。  <br/>
（算了技术的部分我重新开篇日志好了，这篇单独讲一讲感受。）  <br/>
第二天发生了一件特别坑的事情，奥狮竟然给我打电话说他们考虑了一下，  <br/>
可以让我去试一下，我这么有职业道德的人当然是拒绝咯，    <br/>
哈哈，不知道要是当时去了奥狮会发生什么，人生轨迹就完全不一样了。</p>

<br>


<h3>加班</h3>

<p>在互联网公司上班，最躲不开的一个问题就是加班了。   <br/>
以前也很天真的想，为什么总是说程序员很累很辛苦，coding is so enjoyable、   <br/>
面试的时候，公司的人说我们公司周六要上班，因为小公司只有拼时间才能超过别人。   <br/>
真正上班的时候才发现小小鸟他们每天晚上都很晚回去，听说有时候甚至到了半夜12点。   <br/>
一个月加个几天还行，要是加班变成一种习惯，还是觉得不太好。   <br/>
一是觉得每个人就算工作也要有自己的生活。 二是效率才是最重要的，不能靠加班强行提高生产力。   <br/>
明明一天的任务都完成的差不多了，还非要待到多久才回去，加班应该用在刀刃上。  <br/>
但也好理解吧，初创公司，年轻人也是该搏一搏，每天加班不就是为了有一天能看到自己敲的代码，  <br/>
发挥出它们所有的价值，越来越多的用户用你做的东西，公司做大做强，然后有一天可以升职加薪在上海买房。  哈哈。 <br/>
但更多的其实是像上边说的自我麻痹吧, 这世界上最没有用的就是努力了.</p>

<br>


<p>(&hellip;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简历]]></title>
    <link href="http://changchen.me/blog/20150628/resume/"/>
    <updated>2015-06-28T02:11:08+10:00</updated>
    <id>http://changchen.me/blog/20150628/resume</id>
    <content type="html"><![CDATA[<blockquote><p><b>联系方式</b> <br/>
 &ndash; 手机：13512032098  <br/>
 &ndash; Email：daya0576 [at] gmail [dot] com  <br/>
 &ndash; 微信号：[secret]</p></blockquote>

<!--more-->




<br>




<iframe width="740px" height="1180px" src="http://changchen.me/love/resume_html/"></iframe>


<h1>致谢</h1>

<p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>
]]></content>
  </entry>
  
</feed>
