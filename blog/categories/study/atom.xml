<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: study | My home]]></title>
  <link href="http://www.changchen.me/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://www.changchen.me/"/>
  <updated>2014-06-03T17:16:05+08:00</updated>
  <id>http://www.changchen.me/</id>
  <author>
    <name><![CDATA[Daya]]></name>
    <email><![CDATA[daya0576@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mini-project # 6 - Blackjack]]></title>
    <link href="http://www.changchen.me/blog/20140516/mini-project-number-6/"/>
    <updated>2014-05-16T10:11:18+08:00</updated>
    <id>http://www.changchen.me/blog/20140516/mini-project-number-6</id>
    <content type="html"><![CDATA[<blockquote><p> 《An Introduction to Interactive Programming in Python》</p></blockquote>

<p>眼泪都要调出来了~~    <br/>
图片没加载出来。。
T ^ T <br/>
<img src="\images\blog\140516_cousera\2014-05-16_212319.jpg" alt="ico_topitme" /> <br/>
刚看到的时候还是很郁闷的，毕竟付出了好多的心血，结果因为一个不是自身的原因毁掉了。。   <br/>
现在还是看开了吧 :) 过去就过去了  无所谓了。</p>

<!--more-->


<p>我做的~ <br/>
<img src="\images\blog\140516_cousera\2014-05-16_211654.jpg" alt="ico_topitme" /></p>

<p>code: <br/>
``` python</p>

<h1>Mini-project #6 &ndash; Blackjack</h1>

<p>import simplegui
import random</p>

<h1>load card sprite &ndash; 949x392 &ndash; source: jfitz.com</h1>

<p>CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image(&ldquo;<a href="http://g.hiphotos.baidu.com/album/pic/item/8b82b9014a90f6039500b4ce3b12b31bb151ed83.jpg?psign=9500b4ce3b12b31bb051f8198618367adbb44aed2f73c9bb">http://g.hiphotos.baidu.com/album/pic/item/8b82b9014a90f6039500b4ce3b12b31bb151ed83.jpg?psign=9500b4ce3b12b31bb051f8198618367adbb44aed2f73c9bb</a>&rdquo;)
CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image(&ldquo;<a href="http://f.hiphotos.baidu.com/album/pic/item/d833c895d143ad4b1c4e6e4980025aafa50f06d2.jpg?psign=1c4e6e4980025aafa40f4bfbfbedab64024f78f0f63622ea">http://f.hiphotos.baidu.com/album/pic/item/d833c895d143ad4b1c4e6e4980025aafa50f06d2.jpg?psign=1c4e6e4980025aafa40f4bfbfbedab64024f78f0f63622ea</a>&rdquo;)</p>

<h1>initialize some useful global variables</h1>

<p>in_play = False
outcome = &ldquo;&rdquo;
score = 0
deck_cards = None
player_hands = None
deck_hands = None</p>

<h1>define globals for cards</h1>

<p>SUITS = (&lsquo;C&rsquo;, &rsquo;S', &lsquo;H&rsquo;, &rsquo;D')
RANKS = (&lsquo;A&rsquo;, &lsquo;2&rsquo;, &lsquo;3&rsquo;, &lsquo;4&rsquo;, &lsquo;5&rsquo;, &lsquo;6&rsquo;, &lsquo;7&rsquo;, &lsquo;8&rsquo;, &lsquo;9&rsquo;, &rsquo;T', &lsquo;J&rsquo;, &lsquo;Q&rsquo;, &lsquo;K&rsquo;)
VALUES = {&lsquo;A&rsquo;:1, &lsquo;2&rsquo;:2, &lsquo;3&rsquo;:3, &lsquo;4&rsquo;:4, &lsquo;5&rsquo;:5, &lsquo;6&rsquo;:6, &lsquo;7&rsquo;:7, &lsquo;8&rsquo;:8, &lsquo;9&rsquo;:9, &rsquo;T':10, &lsquo;J&rsquo;:10, &lsquo;Q&rsquo;:10, &lsquo;K&rsquo;:10}</p>

<h1>define card class</h1>

<p>class Card:</p>

<pre><code>def __init__(self, suit, rank):
    if (suit in SUITS) and (rank in RANKS):
        self.suit = suit
        self.rank = rank
    else:
        self.suit = None
        self.rank = None
        print "Invalid card: ", suit, rank

def __str__(self):
    return self.suit + self.rank

def get_suit(self):
    return self.suit

def get_rank(self):
    return self.rank

def draw(self, canvas, pos):
    card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
    canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
</code></pre>

<h1>define hand class</h1>

<p>class Hand:</p>

<pre><code>def __init__(self):
    self.hand_cards = []
    self.value_card = 0

def __str__(self):
    hand_str = "Hand contains "
    for card in self.hand_cards:
        hand_str = hand_str + str(card) + " "
    return hand_str

def add_card(self, card):
    self.hand_cards.append(card)

def get_value(self):
    value_sum = 0
    Ace_in = False
    # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
    for card in self.hand_cards:
        self.value_card = VALUES[card.get_rank()] 
        value_sum += self.value_card
        if self.value_card == 1:
            Ace_in = True

    if Ace_in == False:
        return value_sum
    else:
        if value_sum + 10 &lt; 21:
            return value_sum + 10
        else:
            return value_sum

def draw(self, canvas, pos):
    for card in self.hand_cards:  
        index = self.hand_cards.index(card)
        card.draw(canvas, pos)
        pos[0] += CARD_SIZE[0] + 10
</code></pre>

<h1>define deck class</h1>

<p>class Deck:</p>

<pre><code>def __init__(self):
    self.deck_cards = []
    for suit in SUITS:
        for rank in RANKS:
            self.deck_cards.append(Card(suit, rank))

def shuffle(self):
    random.shuffle(self.deck_cards)

def deal_card(self):
    card = self.deck_cards[-1]
    self.deck_cards.remove(card)
    return card

def __str__(self):
    deck_str = "Deck contains"
    for card in self.deck_cards:
        deck_str += str(card) + " "       
    return deck_str
</code></pre>

<h1>define event handlers for buttons</h1>

<p>def deal():</p>

<pre><code>global outcome, in_play, deck_cards, player_hands, deck_hands, score
if in_play == True:
    score -= 1

deck_cards = Deck()
deck_cards.shuffle()

player_hands = Hand()
player_hands.add_card(deck_cards.deal_card())
player_hands.add_card(deck_cards.deal_card())
print str(player_hands)

deck_hands = Hand()
deck_hands.add_card(deck_cards.deal_card())
deck_hands.add_card(deck_cards.deal_card())
print str(deck_hands)
in_play = True
</code></pre>

<p>def hit():</p>

<pre><code>global outcome, in_play, score, player_hands
# if the hand is in play, hit the player
if in_play == True:
    player_hands.add_card(deck_cards.deal_card())
    print "deck_hands.get_value()", deck_hands.get_value()
    if(player_hands.get_value() &gt; 21):
        print  "You have busted"
        outcome = "Busted, you lose~~"
        in_play = False
        score -= 1

print  str(player_hands)
</code></pre>

<p>def stand():</p>

<pre><code>global outcome, in_play, score, deck_hands
# if hand is in play, repeatedly hit dealer until his hand has value 17 or more
if in_play == True:
    while deck_hands.get_value() &lt; 17:
        deck_hands.add_card(deck_cards.deal_card())
        if(deck_hands.get_value() &gt; 21):
            outcome = "Dealer busted, you wine~~"
            in_play = False
            score += 1
    print "deck_hands.get_value()", deck_hands.get_value()

    if in_play == True:
        if player_hands.get_value() &gt; deck_hands.get_value():
            outcome = "bigger You win!!!"
            score += 1
        else:
            outcome = "smaller lose~~"
            score -= 1
        in_play = False
# assign a message to outcome, update in_play and score
</code></pre>

<h1>draw handler</h1>

<p>def draw(canvas):</p>

<pre><code>global outcome
canvas.draw_text('Blackjack', (40, 80), 50, 'Gray', 'serif')

canvas.draw_text("Dealer", (50, 140), 30, 'black', 'serif')
canvas.draw_text("Player", (50, 290), 30, 'black', 'serif')

canvas.draw_text("score: " + str(score), (450, 90), 30, 'Gray', 'serif')

player_hands.draw(canvas, [50, 300])
deck_hands.draw(canvas, [50, 150])
if in_play == True:
    canvas.draw_text("Hit or stand?", (200, 290), 30, 'Gray', 'serif')
    canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, (50+CARD_BACK_CENTER[0], 150+CARD_BACK_CENTER[1]), CARD_BACK_SIZE)
else:
    canvas.draw_text(outcome, (200, 140), 30, 'Gray', 'serif')
    canvas.draw_text("New deal?", (200, 290), 30, 'Gray', 'serif')
</code></pre>

<h1>initialization frame</h1>

<p>frame = simplegui.create_frame(&ldquo;Blackjack~&rdquo;, 600, 600)
frame.set_canvas_background(&ldquo;Green&rdquo;)</p>

<h1>create buttons and canvas callback</h1>

<p>frame.add_button(&ldquo;Deal&rdquo;, deal, 200)
frame.add_button(&ldquo;Hit&rdquo;,  hit, 200)
frame.add_button(&ldquo;Stand&rdquo;, stand, 200)
frame.set_draw_handler(draw)</p>

<h1>get things rolling</h1>

<p>deal()
frame.start()</p>

<h1>remember to review the gradic rubric</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cousera_comments总和]]></title>
    <link href="http://www.changchen.me/blog/20140429/cousera-comments/"/>
    <updated>2014-04-29T17:29:28+08:00</updated>
    <id>http://www.changchen.me/blog/20140429/cousera-comments</id>
    <content type="html"><![CDATA[<blockquote><p> 《An Introduction to Interactive Programming in Python》</p></blockquote>

<p>突然想去看看之前mini_project别人给我的评价  <br/>
不看不知道  一看吓一跳  <br/>
感动的都要哭了 T ^ T <br/>
敢不敢再负责一点</p>

<!--more-->


<ul>
<li><p>Mini-project # 1 &ndash; Rock-paper-scissors-lizard-Spock <br/>
<img src="\images\blog\140430_cousera\3.png" alt="ico_topitme" /> <br/>
<img src="\images\blog\140430_cousera\4.png" alt="ico_topitme" /></p></li>
<li><p>Mini-project # 2 &ndash; &ldquo;Guess the number&rdquo; game" <br/>
<img src="\images\blog\140430_cousera\5.png" alt="ico_topitme" />   <br/>
<img src="\images\blog\140430_cousera\6.png" alt="ico_topitme" /> <br/>
<img src="\images\blog\140430_cousera\7.png" alt="ico_topitme" /></p></li>
<li><p>Mini-project # 4 &ndash; &ldquo;Pong&rdquo; <br/>
<img src="\images\blog\140430_cousera\4_1.png" alt="ico_topitme" />   <br/>
<img src="\images\blog\140430_cousera\4_2.png" alt="ico_topitme" /></p></li>
</ul>


<h4>&ldquo;:&ndash;) All the best.&rdquo;</h4>

<h4>继续加油   以后改作业也要更认真一点了</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cousera_Mini-project # 4 - Pong]]></title>
    <link href="http://www.changchen.me/blog/20140429/cousera-pong/"/>
    <updated>2014-04-29T16:27:47+08:00</updated>
    <id>http://www.changchen.me/blog/20140429/cousera-pong</id>
    <content type="html"><![CDATA[<blockquote><p> 《An Introduction to Interactive Programming in Python》</p></blockquote>

<p>**小游戏~&ldquo;Pong&rdquo; <br/>
这次时间还是挺充裕的，但是看英文看的头大，就没按步骤写了 <br/>
结果花了更多的时间   还写错了一些  <br/>
下次还是认真按步骤写好了</p>

<p>我做的： <br/>
<img src="\images\blog\140430_cousera\1.png" alt="ico_topitme" /></p>

<p>改作业改到一个做的好有创意： 评语评了一句碉堡了 <br/>
不知道看懂看不懂 哈哈 <br/>
<img src="\images\blog\140430_cousera\2.png" alt="ico_topitme" /></p>

<!--more-->


<p>可以在<a href="http://www.codeskulptor.org/">codeskullptor</a>上运行 <br/>
code: <br/>
```python</p>

<h1>Implementation of classic arcade game Pong</h1>

<p>import simplegui
import random</p>

<h1>initialize globals &ndash; pos and vel encode vertical info for paddles</h1>

<p>WIDTH = 600
HEIGHT = 400     <br/>
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True</p>

<h1>initialize ball_pos and ball_vel for new bal in middle of table</h1>

<h1>if direction is RIGHT, the ball&rsquo;s velocity is upper right, else upper left</h1>

<p>def spawn_ball(direction):</p>

<pre><code>global ball_pos, ball_vel # these are vectors stored as lists
ball_pos = [WIDTH/2, HEIGHT/2]
ball_vel = [random.randrange(1, 2)*2, random.randrange(-2, 2)+0.5]
if(direction == "LEFT"):    ball_vel[0] = -ball_vel[0]
</code></pre>

<h1>define event handlers</h1>

<p>def new_game():</p>

<pre><code>global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
paddle1_pos = [HALF_PAD_WIDTH, HEIGHT / 2]
paddle2_pos = [WIDTH - HALF_PAD_WIDTH, HEIGHT / 2]
global score1, score2  # these are ints
score1 = 0
score2 = 0
paddle2_vel = 0
paddle1_vel = 0
spawn_ball(random.choice(["LEFT", "RIGHT"]))
</code></pre>

<p>def draw(canvas):</p>

<pre><code>global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
global paddle2_vel, paddle1_vel


# draw mid line and gutters
canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")

# update ball
ball_pos[0] += ball_vel[0]
ball_pos[1] += ball_vel[1]      

# draw ball
canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "Red", "White")

# update paddle's vertical position, keep paddle on the screen
if(ball_pos[1] + BALL_RADIUS &gt;= HEIGHT or ball_pos[1] - BALL_RADIUS &lt;= 0):
    ball_vel[1] = -ball_vel[1]

# draw paddles
canvas.draw_polyline([[HALF_PAD_WIDTH, paddle1_pos[1]-HALF_PAD_HEIGHT], 
                      [HALF_PAD_WIDTH, paddle1_pos[1]+HALF_PAD_HEIGHT]], 
                     PAD_WIDTH, 'Red')
paddle1_pos[1] += paddle1_vel

canvas.draw_polyline([[WIDTH - HALF_PAD_WIDTH, paddle2_pos[1]-HALF_PAD_HEIGHT], 
                      [WIDTH - HALF_PAD_WIDTH, paddle2_pos[1]+HALF_PAD_HEIGHT]], 
                     PAD_WIDTH, 'Red')
paddle2_pos[1] += paddle2_vel

if paddle1_pos[1] + HALF_PAD_HEIGHT &gt;= HEIGHT:
    paddle1_pos[1] = HEIGHT - HALF_PAD_HEIGHT
    paddle1_vel = 0
if paddle1_pos[1] - HALF_PAD_HEIGHT &lt;= 0:
    paddle1_pos[1] = HALF_PAD_HEIGHT
    paddle1_vel = 0

if paddle2_pos[1] + HALF_PAD_HEIGHT &gt;= HEIGHT:
    paddle2_pos[1] = HEIGHT - HALF_PAD_HEIGHT
    paddle2_vel = 0
if paddle2_pos[1] - HALF_PAD_HEIGHT &lt;= 0:
    paddle2_pos[1] = HALF_PAD_HEIGHT
    paddle2_vel = 0

if(ball_pos[1] &lt; paddle1_pos[1] + HALF_PAD_HEIGHT and
   ball_pos[1] &gt; paddle1_pos[1] - HALF_PAD_HEIGHT and
   ball_pos[0] &lt;=  BALL_RADIUS + PAD_WIDTH):
    ball_vel[0] = -ball_vel[0]
    ball_vel[0] *= 1.2
    ball_vel[1] *= 1.2
elif(ball_pos[0] &lt;  -1*BALL_RADIUS):
    score2 += 1
    spawn_ball(random.choice(["LEFT", "RIGHT"]))

if(ball_pos[1] &lt; paddle2_pos[1] + HALF_PAD_HEIGHT and
   ball_pos[1] &gt; paddle2_pos[1] - HALF_PAD_HEIGHT and
   ball_pos[0] &gt;= WIDTH - BALL_RADIUS - PAD_WIDTH):

    ball_vel[0] = -ball_vel[0] 
    ball_vel[0] *= 1.2
    ball_vel[1] *= 1.2
elif(ball_pos[0] &gt;= WIDTH + BALL_RADIUS):
    score1 += 1
    spawn_ball(random.choice(["LEFT", "RIGHT"]))
# draw scores
canvas.draw_text(str(score1), [50, 50], 50, 'Blue', 'serif')
canvas.draw_text(str(score2), [500, 50], 50, 'Blue', 'serif')
</code></pre>

<p>def keydown(key):</p>

<pre><code>global paddle1_vel, paddle2_vel
acc = 1
if key==simplegui.KEY_MAP["s"]:
    paddle1_vel += acc
elif key==simplegui.KEY_MAP["w"]:
    paddle1_vel -= acc
elif key==simplegui.KEY_MAP["down"]:
    paddle2_vel += acc
elif key==simplegui.KEY_MAP["up"]:
    paddle2_vel -= acc
</code></pre>

<p>def keyup(key):</p>

<pre><code>global paddle1_vel, paddle2_vel
</code></pre>

<p>def button_handler():</p>

<pre><code>new_game()
</code></pre>

<h1>create frame</h1>

<p>frame = simplegui.create_frame(&ldquo;Pong&rdquo;, WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button(&lsquo;Reset&rsquo;, button_handler, 60)</p>

<h1>start frame</h1>

<p>new_game()
frame.start()
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux中安装python的egg包]]></title>
    <link href="http://www.changchen.me/blog/20140424/linux-python-egg-install/"/>
    <updated>2014-04-24T11:28:48+08:00</updated>
    <id>http://www.changchen.me/blog/20140424/linux-python-egg-install</id>
    <content type="html"><![CDATA[<h4>NetworkX的使用:<a href="http://blog.sciencenet.cn/blog-404069-337442.html" title="NetworkX">http://blog.sciencenet.cn/blog-404069-337442.html</a></h4>

<p>首先到<a href="http://pypi.python.org/pypi/networkx/">http://pypi.python.org/pypi/networkx/</a>下载
networkx-1.1-py2.6.egg   <br/>
然后下载 setuptools:<a href="https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg#md5=fe1f997bc722265116870bc7919059ea">setuptools-0.6c11-py2.7.egg (md5)</a></p>

<h3>1. 安装setuptools</h3>

<p><img src="\images\blog\140424_python_egg\1.png" alt="ico_topitme" /></p>

<h3>2. 安装networkx</h3>

<p><img src="\images\blog\140424_python_egg\2.png" alt="ico_topitme" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cousera作业_Guess the number]]></title>
    <link href="http://www.changchen.me/blog/20140413/cousera-python-week3/"/>
    <updated>2014-04-13T21:03:09+08:00</updated>
    <id>http://www.changchen.me/blog/20140413/cousera-python-week3</id>
    <content type="html"><![CDATA[<blockquote><p> 《An Introduction to Interactive Programming in Python》</p></blockquote>

<p><strong>哎   半夜把第三周的大作业写完了     差点来不及  </strong></p>

<!--more-->


<p>一个二分法猜数字的小游戏       都给出提示了    照着写就行了 <br/>
可是用的是codeskullptor，还要翻个墙    心酸。</p>

<p>```python</p>

<h1>template for &ldquo;Guess the number&rdquo; mini-project</h1>

<h1>input will come from buttons and an input field</h1>

<h1>all output for the game will be printed in the console</h1>

<p>import simplegui
import random
import math</p>

<h1>initialize global variables used in your code</h1>

<p>secret_number = 0
remain = 0</p>

<h1>define event handlers for control panel</h1>

<p>def range100():</p>

<pre><code># button that changes range to range [0,100) and restarts

print "New game. Range is from 0 to 100"
print "Number of remaining guesses is 7"

global secret_number, remain
secret_number = random.randrange(0, 100)
remain = 7
print 
</code></pre>

<p>def range1000():</p>

<pre><code># button that changes range to range [0,1000) and restarts

print "New game. Range is from 0 to 1000"
print "Number of remaining guesses is 10"

global secret_number, remain
secret_number = random.randrange(0, 1000)
remain = 10
print
</code></pre>

<h1>helper function to start and restart the game</h1>

<p>def new_game():</p>

<pre><code> range100()
</code></pre>

<p>def input_guess(guess):</p>

<pre><code># main game logic goes here 
global remain
print "Guess was " + guess


guess = int(guess)
if guess &gt; secret_number:
    print "Lower!"
elif guess &lt; secret_number:
    print "Higher!"
else:
    print "Correct!\n"
    new_game()
remain = remain - 1
print "Number of remaining guesses is %d"%(remain) 

if remain == 0:
    print "sorry u run out of range, the num is %d"%secret_number
    new_game()

print
</code></pre>

<h1>Handler to draw on canvas</h1>

<p>def draw(canvas):</p>

<pre><code>canvas.draw_text(message, [50,112], 48, "Red")
</code></pre>

<h1>create frame</h1>

<p>f = simplegui.create_frame(&ldquo;Home&rdquo;, 300, 200)</p>

<h1>register event handlers for control elements</h1>

<p>f.add_button(&ldquo;Range is [0, 100)&rdquo;, range100, 200)
f.add_button(&ldquo;Range is [0, 1000)&rdquo;, range1000, 200)
f.add_input(&ldquo;Enter a guess&rdquo;, input_guess, 200)</p>

<h1>call new_game and start frame</h1>

<p>f.start()
new_game()</p>

<h1>always remember to check your completed program against the grading rubric</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
