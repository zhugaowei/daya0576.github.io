<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zaihui | Henry Z's blog~]]></title>
  <link href="http://changchen.me/blog/categories/zaihui/atom.xml" rel="self"/>
  <link href="http://changchen.me/"/>
  <updated>2017-07-10T23:40:08+08:00</updated>
  <id>http://changchen.me/</id>
  <author>
    <name><![CDATA[Daya]]></name>
    <email><![CDATA[daya0576@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[面试算法题 - 二分查找的变种题]]></title>
    <link href="http://changchen.me/blog/20170306/binary-search/"/>
    <updated>2017-03-06T12:45:09+08:00</updated>
    <id>http://changchen.me/blog/20170306/binary-search</id>
    <content type="html"><![CDATA[<blockquote><p>去再惠面试的时候, 问了我一道二分查找的变种题, 我当时答的并不是特别清楚, 用这篇日志整理记录一下.</p></blockquote>

<!--more-->


<br>  


<h2>问题的定义</h2>

<p><strong>input:</strong>  <br/>
1. 给定一个升序排列的自然数数组, eg. [1, 3, 3, 5, 7, 7, 7, 7, 8, 14, 14] <br/>
2. 任意自然数, eg. 7  <br/>
<strong>output:</strong> <br/>
数组内 值为7区域的左右边界index: [1, 3, 3, 5, <strong>7, 7, 7, 7</strong>, 8, 14, 14] <br/>
这个例子中就是<strong>(4, 7)</strong></p>

<br>


<h2>我的思路</h2>

<p>我首先想到的是生成<strong>inverted index</strong>再去查找, 或者用<strong>Galloping search</strong>. <br/>
后来才想到考官想考察的是binary search.   <br/>
于是我的思路就变成先用binary找到那个值的区域里的随机一点, 然后用两个while去找左右的边界.   <br/>
但如果这个区域太大, 时间复杂度又变成O(n)了.   <br/>
最后考官提醒我可以对二分查找做一下改动就可以啦.</p>

<br>


<h2>原版的二分查找(返回index和val)</h2>

<p>```python
A = [1, 2, 4, 4, 4, 6, 7]
B = [1, 3, 3, 3, 3, 3]</p>

<p>def bin_search(val, l, left=None, right=None):</p>

<pre><code>if left is None or right is None:
    left, right = 0, len(l)-1

# 终止条件
if left &gt; right:
    return -1
else:
    mid = (left + right) // 2

if l[mid] &gt; val:
    return bin_search(val, l, left, mid-1)
elif l[mid] &lt; val:
    return bin_search(val, l, mid+1, right)
else:
    return mid, val
</code></pre>

<p>print(bin_search(4, A))
```</p>

<br>


<h2>改动后的二分查找</h2>

<p>思路: <br/>
在找<strong>左边界</strong>的时候: <br/>
<code>if left &gt; right: return left</code> <br/>
<code>if ｌ(mid) &gt;= val: (left, mid-1)</code> <br/>
<code>elif l(mid) &lt;= val: (mid+1, right)</code> <br/>
找右边界思路同上 <br/>
```python
def bin_search_l(val, l, left=None, right=None):</p>

<pre><code>if left is None or right is None:
    left, right = 0, len(l) - 1

if left &gt; right: return left

mid = (left + right) // 2
if l[mid] &gt;= val:
    return bin_search_l(val, l, left, mid-1)
elif l[mid] &lt; val:
    return bin_search_l(val, l, mid+1, right)
</code></pre>

<p>def bin_search_r(val, l, left=None, right=None):</p>

<pre><code>if left is None or right is None:
    left, right = 0, len(l) - 1

if left &gt; right: return right

mid = (left + right) // 2
if l[mid] &gt; val:
    return bin_search_r(val, l, left, mid-1)
elif l[mid] &lt;= val:
    return bin_search_r(val, l, mid+1, right)
</code></pre>

<p>def bin_search(val, l):</p>

<pre><code>left, right = bin_search_l(val, l), bin_search_r(val, l)

if left &gt; right:
    return -1
else:
    return left, right
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>A = [1, 4, 4, 4, 4, 4, 6, 6]
print("Input:", A)
print("Output:", bin_search(4, A))

# Input: [1, 4, 4, 4, 4, 4, 6, 6]
# Output: (1, 5)
</code></pre>

<p>```</p>

<br>


<h2>总结</h2>

<p>看起来算法好像很复杂, 但核心的思想其实就那么几句伪代码.  <br/>
还是那句永恒不变的真理: <code>先想请思路再下笔!</code></p>
]]></content>
  </entry>
  
</feed>
