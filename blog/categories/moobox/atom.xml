<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: moobox | Henry Z's blog~]]></title>
  <link href="http://changchen.me/blog/categories/moobox/atom.xml" rel="self"/>
  <link href="http://changchen.me/"/>
  <updated>2017-07-13T03:55:37+10:00</updated>
  <id>http://changchen.me/</id>
  <author>
    <name><![CDATA[Daya]]></name>
    <email><![CDATA[daya0576@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[记录moobox的点滴(技术篇)]]></title>
    <link href="http://changchen.me/blog/20150926/moobox-knowledge/"/>
    <updated>2015-09-26T22:43:11+10:00</updated>
    <id>http://changchen.me/blog/20150926/moobox-knowledge</id>
    <content type="html"><![CDATA[<blockquote><p>在moobox工作了两个月，用这篇日志记录这段日子的技术点滴。  <br/>
ps.虽然一直有这个计划，平时也会作笔记，但是到头来还是记得不太全， <br/>
就粗略的写一下好了。</p></blockquote>

<!--more-->


<h2>Mysql</h2>

<p>公司用的数据库是mysql，可惜自己对数据库的知识忘得差不多了，下面记录一些后来回忆起的sql用法。<br/>
有个软件叫做 MySQL Workbanch，还是挺方便的。       <br/>
1.增删改查就不说了，还是要熟练，总不能写一次去看一下语法吧。  <br/>
2.desc也是必备，以前上学的时候老是记不清，但工作中还是desc用的比较多，asc是默认的升序。 <br/>
3.left和inner join，关联多表的时候的必备，还是要保持清醒。  <br/>
4.group by后边可以加限制条件，叫做group by having (&hellip;), 学数据库的时候学过，小小鸟提起的时候才如梦初醒 <br/>
group by的时候可以根据两个条件进行group by， 例如：
<code>sql
//获取每个地推人员的每天数据
//计算录入
select date(from_unixtime(b.CreatedDate+60*60*8)), count(distinct a.UID),b.CreatedBy from ParkingRawData a
inner join Customer b on a.UID = b.ParkingUID where Source = 'tuhu' and b.CreatedBy != ''
group by date(from_unixtime(b.CreatedDate+60*60*8)), b.CreatedBy
</code>
4.insert的妙用：
<code>sql
INSERT INTO ParkingRawDataHistory(RawID,UID,Name)
select ID,UID,Name from ParkingRawData
where UID =  'e4d1701c-4185-11e5-af26-3c15c2bca022';
</code>
5.sql 时间戳  <br/>
<code>sql
SELECT FROM_UNIXTIME( 1440015345, '%Y年%m月%d日' )
SELECT UNIX_TIMESTAMP()
SELECT UNIX_TIMESTAMP(Current_TimeStamp)
</code>
6.模糊查找 <br/>
<code>sql
SELECT * FROM ParkingRawData where name like "%虹景公寓酒店%"
</code>
总结：学好sql语句也是很重要的，一句好的sql语句能很好的简化代码的复杂度，   <br/>
并且提高接口的效率，只恨自己数据库忘得太快。</p>

<br> 


<h2>Python</h2>

<p>1.每次在django中添加接口，我都要检查的问题：     <br/>
* &ndash; &ndash; -数据库中api和page的权限。 <br/>
* &ndash; setting中数据库变量的配置 和 接口url的配置是否正确。 <br/>
* WebInterfaceBase修改跨越问题（后台和前端没有放在一个项目里）。 <br/>
* 测试接口时json格式是否正确（可以去网上好多在线检测的网站）。 <br/>
2.python list去除重复元素 <br/>
<code>python
list(set(all_workers))
{}.fromkeys(workers).keys()
</code>
3.django端口占用的问题 <br/>
查看端口占用  <br/>
<code>
I:\Users\Daya&gt;netstat -aon|findstr "8000"
  TCP    0.0.0.0:8000           0.0.0.0:0              LISTENING       5664
  TCP    127.0.0.1:8000         127.0.0.1:49640        ESTABLISHED     5664
  TCP    127.0.0.1:8000         127.0.0.1:49851        ESTABLISHED     5664
  TCP    127.0.0.1:8000         127.0.0.1:49852        ESTABLISHED     5664
  TCP    127.0.0.1:49640        127.0.0.1:8000         ESTABLISHED     3716
  TCP    127.0.0.1:49851        127.0.0.1:8000         ESTABLISHED     3716
  TCP    127.0.0.1:49852        127.0.0.1:8000         ESTABLISHED     3716
I:\Users\Daya&gt;tasklist|findstr "5664"
pycharm.exe                   5664 Console                    1    372,204 K
I:\Users\Daya&gt;tasklist|findstr "3716"
chrome.exe                    3716 Console                    1    196,444 K   
</code>
4.遇到过一个问题就是django的问题就是明明有这个文件夹，却报错说找不到。  <br/>
因为这个文件夹里没有init的空文件，django是通过URL和这个标示来找的。 <br/>
5.时间戳的一些操作 <br/>
```python</p>

<h1>时间的转换，python的包都很完善了。</h1>

<p>print int(time.mktime(time.strptime(&ldquo;20140903131540&rdquo;, &lsquo;%Y%m%d%H%M%S&rsquo;)))</p>

<h1>时间戳，统一0时区的时间戳。</h1>

<p>vtimestamp = str(time.mktime(datetime.datetime.utcnow().timetuple()))
<code>
6.后来加的分页操作，注意limit后边两个参数的意义。   
</code>python
cursor.execute(sql_count)
data = cursor.fetchall()
if len(data) > 0:</p>

<pre><code>pagecount = data[0][0]/pagesize + 1
self.pagecount = pagecount
</code></pre>

<p>start = (pagenumber-1) * pagesize
sql += &ldquo; limit %s, %s &rdquo; % (start, pagesize)
```
先说这这些吧，其实还有好多，不细说了。  <br/>
<em>说一点感悟吧，写代码就是生活中做事一样，一个好的计划是最重要的， 每一步做什么理清楚后，</em>   <br/>
<em>写起代码来就事半功倍了，所以不要埋头苦写，做点草稿，有好的规划才行。</em></p>

<h2>JS+HTML5</h2>

<p>做后台的话，有时候写完接口，还要迫不得已要把前台的东西都包了、 <br/>
但说实话，之前对js真的是完全没有实战过，所以写起来还是很吃力。  <br/>
有力发不出的感觉，总是被一些小错误困扰很久，把一些简单的问题搞复杂。  <br/>
记录一些前端方面的新知识吧。  <br/>
1.自适应布局：<a href="http://nec.netease.com/library/101023">http://nec.netease.com/library/101023</a> <br/>
之前大一学过css布局，但现在都是html5了还要手机适配，原来的样式已经用不了了。  <br/>
上面这个网址还不错，有一些自适应的例子，但感觉还是好复杂，应该有更简单的解决方法吧。  <br/>
2.jquery的show()和hide()其实就是改变dispay:none
3.设置a标签的超链接  <br/>
<code>html
//以前的超链接
&lt;a href="#"&gt;&lt;/a&gt;
//现在的写法，防止出错。   
&lt;a href="javascript:;"&gt;&lt;/a&gt;
</code>      <br/>
4.确认按钮   弹出是否提交？ <br/>
<code>javascript
if (confirm("确认信息无误？")) {}
</code>
5.动画  旋转  <br/>
```css
transform:rotate(90deg)</p>

<p>transform:rotate(0deg);
transition: transform 0.3s;
<code>
6.滚动条的自动定位     
</code>javascript
$(&lsquo;.div-fixed-height&rsquo;).animate({scrollTop: $(&lsquo;#reportdetail&rsquo;).height()}, 300);
<code>
7.遍历所有td    
</code>javascript
$(&ldquo;#nearparkingscontent&rdquo;).find(&ldquo;:checkbox:checked&rdquo;).each(function(){</p>

<pre><code>var val = $(this).closest('tr').find('td').eq(7).text();
parking_uids += val + " ";
</code></pre>

<p>});
<code>
8.js str去除最后一位
</code>javascript
type.parkingtype = parkingtypestr.substring(0, parkingtypestr.length-1);
<code>
9.checkbox 的onchange事件    
</code>javascript
function alertMerge(check1){
if(check1.checked==true)
  if (confirm(&ldquo;确认合并此停车场？&rdquo;)) {</p>

<pre><code>    //
}else{
    check1.checked=false;
    //check1.attr("checked", "checked");
}
</code></pre>

<p>}
<code>
10.jquery   移除样式。   
</code>javascript
$(&ldquo;.syzx > span:first&rdquo;).removeAttr(&ldquo;style&rdquo;);
```
<em>总结</em>：js不会的多，记的笔记也多点，但总的来说，个人觉得js是一个很灵活的语言，  <br/>
有时间还是要多掌握一些基础的特性，才能写出一些精炼高效的代码。</p>

<h2>参与的所有项目大合照</h2>

<p><img class="lazy" href="javascript:;" data-original="/images/blog\150923_moobox/sourcetree.png" >  <br/>
从上往下简单介绍一下。  <br/>
1.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[moobox_recode(回忆篇)]]></title>
    <link href="http://changchen.me/blog/20150923/moobox-recode/"/>
    <updated>2015-09-23T15:13:39+10:00</updated>
    <id>http://changchen.me/blog/20150923/moobox-recode</id>
    <content type="html"><![CDATA[<blockquote><p>在moobox工作了两个月，用这篇日志记录这段日子的点点滴滴。</p></blockquote>

<!--more-->


<br>  


<h2>moobox经历~</h2>

<p>转眼大学就毕业了，什么也没学会，就会点python。  <br/>
带着瘦弱的身体在上海这个充满梦想的城市横冲乱撞。</p>

<br>


<h3>面试</h3>

<p>故事还是从面试开始说起吧。  <br/>
七月份来上海找工作，主要面试前端和python后台的职位。  <br/>
面试了前端才发现自己对前端还只是掌握的皮毛（工作中发现自己的css知识真的是上个世纪的）。  <br/>
后台没记错的话是面试了三家吧，有一家印象比较深刻，好像叫做<code>奥狮数位</code>，是一家传媒公司。  <br/>
在大厦的最高层，进门还要刷卡，豪华的装饰，大厅里，乒乓球桌等娱乐设施应有尽有，简直就是梦想的天堂  <br/>
当然对这家比较长草，但一直没回复我，估计把我当备胎吧、  <br/>
还有一家面试的就是<code>Moobox</code>了，是个初创的公司。分为两个房间，大致分为一边软件，一边硬件。  <br/>
到的时候先做了一张笔试，有一些基础的数据库，算法，还有linux的题目。   <br/>
羞愧的是，由于没有准备过，连left join，inner join都搞不太明白，  <br/>
最后一题是编程，考的递归。写一个斐波那契数列，当时对这些早忘了，用了全局变量，写的特别麻烦。  <br/>
后来工作的时候，突然兴起重新写了一下，真的是被当时的自己蠢哭了。  <br/>
```python
def printArray(i):</p>

<pre><code>if i == 1:
    return 1
if i == 2:
    return 1
else:
    # print printArray(i-1) + printArray(i-2)
    return printArray(i-1) + printArray(i-2)
</code></pre>

<p>for i in range(1, 6):</p>

<pre><code>print printArray(i)
</code></pre>

<p>```
做完之后，就有两个面试官拿着MacBook过来面试我了。  <br/>
一个叫做Brain，算是公司的CEO吧，还有一个叫做陈老板，也算是技术团队的小boss。  <br/>
面试问的都是我简历上做的一些项目，后来才偶尔听到陈老板说他之前研究生读的就是云计算，  <br/>
怪不得对我做虚拟机节能的项目这么感兴趣。   <br/>
当时应该多说一些的，因为之前不管是和别人讨论还是答辩的时候，没什么人能听的懂，所以很受挫，就不太愿意和别人提起这些。   <br/>
有些细节也不太记得了，最后他们拉我到外边，灌了鸡汤，谈了一下薪资， 青涩的我也只求一个收留的地方，也就任他们宰割了。   <br/>
过了一个星期后接到brain的电话，给我发了offer，让我周一去上班。  <br/>
这个地方我以后还是要注意一下，多给自己争取一点考虑的时间，  <br/>
虽然有更满意的offer可以随时走人，但我还是做不出那样无情的事情。  <br/>
发邮件给长草的奥狮，被温柔地拒绝了之后，也就无怨无悔重新踏上通往上海的旅途了。</p>

<br>


<h3>入职</h3>

<p>还记得那是个阳光灿烂的星期一，和平时并没有什么不同，可空气里却散发着一丝诡异的味道。  <br/>
咳咳。。编不下去了、   <br/>
被要求九点半报道，我也早早的准备好，准时到了公司。   <br/>
当时真的是青涩的像个背着双肩包的初一小朋友、 不扯这些细节了。 <br/>
公司给我配了主机和显示器，可惜后来我还是用我自己的笔记本。  <br/>
听美工说公司不提倡自己带东西，比如键盘鼠标，自己的电脑。  <br/>
然而刚好自己从家带了显示器，每天就自己背着键盘鼠标和我的笔记本去公司。   <br/>
刚开始他们也就让我给新电脑配一下环境，以前写python的时候都是用eclipse。   <br/>
然而用上PyCharm后就知道eclipse弱爆了，就说配色和主题就爆了eclipse几条街，  <br/>
<img class="lazy" data-original="/images/blog\150923_moobox/arrayToXml.png" >  <br/>
之后就是看公司django后台的代码了，当时真的是一头雾水。   <br/>
幸好有人带我，他的名字叫做小小鸟<img class="lazy" data-original="http://ctc.qzonestyle.gtimg.cn/qzone/em/e113.gif" >   <br/>
怎么说呢，真的非常感激小小鸟，不知道这辈子再也碰不到这么耐心的老师了、  <br/>
小小鸟是个典型的外强中柔的人，有时候一着急也会发脾气，人的个性特别强  <br/>
所以brain对他提需求的时候，其实有些需求不太合理，小小鸟也不太鸟他，态度极其恶劣。  <br/>
但是你对他好点，耐心点，其实他人特别好，后来移位置坐到他旁边还给了我好多零食吃 哈哈。  <br/>
（算了技术的部分我重新开篇日志好了，这篇单独讲一讲感受。）  <br/>
第二天发生了一件特别坑的事情，奥狮竟然给我打电话说他们考虑了一下，  <br/>
可以让我去试一下，我这么有职业道德的人当然是拒绝咯，    <br/>
哈哈，不知道要是当时去了奥狮会发生什么，人生轨迹就完全不一样了。</p>

<br>


<h3>加班</h3>

<p>在互联网公司上班，最躲不开的一个问题就是加班了。   <br/>
以前也很天真的想，为什么总是说程序员很累很辛苦，coding is so enjoyable、   <br/>
面试的时候，公司的人说我们公司周六要上班，因为小公司只有拼时间才能超过别人。   <br/>
真正上班的时候才发现小小鸟他们每天晚上都很晚回去，听说有时候甚至到了半夜12点。   <br/>
一个月加个几天还行，要是加班变成一种习惯，还是觉得不太好。   <br/>
一是觉得每个人就算工作也要有自己的生活。 二是效率才是最重要的，不能靠加班强行提高生产力。   <br/>
明明一天的任务都完成的差不多了，还非要待到多久才回去，加班应该用在刀刃上。  <br/>
但也好理解吧，初创公司，年轻人也是该搏一搏，每天加班不就是为了有一天能看到自己敲的代码，  <br/>
发挥出它们所有的价值，越来越多的用户用你做的东西，公司做大做强，然后有一天可以升职加薪在上海买房。  哈哈。 <br/>
但更多的其实是像上边说的自我麻痹吧, 这世界上最没有用的就是努力了.</p>

<br>


<p>(&hellip;)</p>
]]></content>
  </entry>
  
</feed>
