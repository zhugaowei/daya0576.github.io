<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | 你是我的小呀小苹果~]]></title>
  <link href="http://www.changchen.me/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.changchen.me/"/>
  <updated>2014-12-04T09:25:08+08:00</updated>
  <id>http://www.changchen.me/</id>
  <author>
    <name><![CDATA[Daya]]></name>
    <email><![CDATA[daya0576@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hidden features of Python笔记]]></title>
    <link href="http://www.changchen.me/blog/20141118/hidden-features-of-python/"/>
    <updated>2014-11-18T11:30:26+08:00</updated>
    <id>http://www.changchen.me/blog/20141118/hidden-features-of-python</id>
    <content type="html"><![CDATA[<h2>最近看了关于python的两个很不错的资料</h2>

<ol>
<li><p><a href="http://legacy.python.org/dev/peps/pep-0008/#blank-lines" >PEP 8 （Style Guide for Python Code）</a></p></li>
<li><p><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python">Hidden features of Python [closed]</a></p></li>
</ol>


<h4><a style="background-color:#2783F3;color:#fff">做一下第二个的笔记 加深印象</a></h4>

<!--more-->




<h3>Quick links to answers:</h3>


<ul>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#111176">Argument Unpacking</a></li>
'*' 不就是c语言里取指针的值<br>  
直接把list和dictionary里的值变成函数的参数了<br>  
但实际很少用到把<br> 
```python
def draw_point(x, y):
    # do some magic

point_foo = (3, 4)
point_bar = {'y': 3, 'x': 2}

draw_point(*point_foo)
draw_point(**point_bar)
```
</br>

<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#112303">Braces</a></li>
运行的结果： <br>    
from __future__ import braces   <br> 
SyntaxError: not a chance   <br> 
貌似是个玩笑， 想要引入c语言style的花括号<br>    
结果是not a chance、、    <br> 
```python
from __future__ import braces
```
</br>


<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#101945">Chaining Comparison Operators</a></li>
连续的比较符吧，实际中还是挺有用的    <br>  
突然想到的：    <br> 
if A and B in L: → if (A and B) in L:  <br>   
```python
>>> x = 5
>>> 1 < x < 10
True
>>> 10 < x < 20 
False
>>> x < 10 < x*10 < 100
True
>>> 10 > x <= 9
True
>>> 5 == x > 4
True
```
</br>

<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#101447">Decorators</a></li>
装饰器，之前也从来没有用过，以后尝试一下    <br>   
看了一篇装饰器的文章，写的挺好的    <br> 
大致明白了原理和应用     <br> 
<a href="http://www.cnblogs.com/coderzh/archive/2010/04/27/python-cookbook33-Decorators.html">http://www.cnblogs.com/coderzh/archive/2010/04/27/python-cookbook33-Decorators.html</a>
```python
>>> def print_args(function):
>>>     def wrapper(*args, **kwargs):
>>>         print 'Arguments:', args, kwargs
>>>         return function(*args, **kwargs)
>>>     return wrapper

>>> @print_args
>>> def write(text):
>>>     print text

>>> write('foo')
Arguments: ('foo',) {}
foo
```   
<br>

<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#113198">Default Argument Gotchas / Dangers of Mutable Default arguments</a></li>
I found this a lot easier to understand when I learned that the default arguments live in a tuple that's an attribute of the function,    <br> 
e.g. foo.func_defaults. Which, being a tuple, is immutable.    <br> 
还是不太明白    <br> 
```python
>>> def foo(x=[]):
...     x.append(1)
...     print x
... 
>>> foo()
[1]
>>> foo()
[1, 1]
>>> foo()
[1, 1, 1]
Instead, you should use a sentinel value denoting "not given" and replace with the mutable you'd like as default:

>>> def foo(x=None):
...     if x is None:
...         x = []
...     x.append(1)
...     print x
>>> foo()
[1]
>>> foo()
[1]
```
<br>

<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#102062">Descriptors</a></li>
Python描述符（descriptor）解密<br>
<a href="http://www.geekfan.net/7862/">http://www.geekfan.net/7862/</a>

<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#111970">Dictionary default <code>.get</code> value</a></li>
前一种如果不包含键值，会报错，后一种会返回第二个参数的值。
```python
sum[value] = sum.get(value, 0) + 1
```
<br>

<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#102065">Docstring Tests</a></li>
不懂啥意思   
<br>


<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python/112316#112316">Ellipsis Slicing Syntax</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#117116">Enumeration</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#114420">For/else</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#102202">Function as iter() argument</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#101310">Generator expressions</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#101276"><code>import this</code></a></li>
这个吊。。<br>
<code><span class="kwd">import</span><span class="pln"> this
</span><span class="com"># btw look at this module's source :)</span></code>
<p><a href="http://svn.python.org/view/python/trunk/Lib/this.py?view=markup" rel="nofollow">De-cyphered</a>:</p>
<blockquote>
  <p>The Zen of Python, by Tim Peters    </p>
  
  <p>Beautiful is better than ugly.<br>
  Explicit is better than implicit.<br>
  Simple is better than complex.<br>
  Complex is better than complicated.<br>
  Flat is better than nested.<br>
  Sparse is better than dense.<br>
  Readability counts.<br>
  Special cases aren't special enough to break the rules.<br>
  Although practicality beats purity.<br>
  Errors should never pass silently.<br>
  Unless explicitly silenced.<br>
  In the face of ambiguity, refuse the temptation to guess.
  There should be one-- and preferably only one --obvious way to do it.<br>
  Although that way may not be obvious at first unless you're Dutch.<br>
  Now is better than never.<br>
  Although never is often better than <em>right</em> now.<br>
  If the implementation is hard to explain, it's a bad idea.<br>
  If the implementation is easy to explain, it may be a good idea.<br>
  Namespaces are one honking great idea -- let's do more of those!  </p>
</blockquote>

<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#102037">In Place Value Swapping</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#101840">List stepping</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#112286"><code>__missing__</code> items</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#101537">Multi-line Regex</a></li>
多行正则表达式<br>
有机会要学一下
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#113164">Named string formatting</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#101549">Nested list/generator comprehensions</a></li>
双重循环生成list<br>
炫酷。。<br>
```python
[(i,j) for i in range(3) for j in range(i) ]      
((i,j) for i in range(4) for j in range(i) )  
```
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#108297">New types at runtime</a></li>


<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#113833"><code>.pth</code> files</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#1024693">ROT13 Encoding</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#143636">Regex Debugging</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#101739">Sending to Generators</a></li>
生成器(generator) 有时间要深入学习一下
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#168270">Tab Completion in Interactive Interpreter</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#116480">Ternary Expression</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#114157"><code>try/except/else</code></a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#3267903">Unpacking+<code>print()</code> function</a></li>
<li><a href="http://stackoverflow.com/questions/101268/hidden-features-of-python#109182"><code>with</code> statement</a></li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爬教务处成绩代码log]]></title>
    <link href="http://www.changchen.me/blog/20140801/cal-uni-score/"/>
    <updated>2014-08-01T00:05:13+08:00</updated>
    <id>http://www.changchen.me/blog/20140801/cal-uni-score</id>
    <content type="html"><![CDATA[<blockquote><p>打包好的exe：<a href="http://pan.baidu.com/s/1nt9eTYh">http://pan.baidu.com/s/1nt9eTYh</a> <br/>
源代码在github上:<a href="https://github.com/daya0576/140730-Tianji_Polytechnic_uni_cal_score">python代码</a> <br/>
<a href="https://github.com/daya0576/140730-Tianji_Polytechnic_uni_cal_score.git">https://github.com/daya0576/140730-Tianji_Polytechnic_uni_cal_score.git</a></p></blockquote>

<h2>代码有由3部分组成</h2>

<ol>
<li>用urllib登陆教务处，返回html</li>
<li>用beautifulsoup对html的parse</li>
<li>最后用p2exe打包为可执行文件</li>
</ol>


<!--more-->


<p>以前写过一个登陆教务处网站的小程序。 <br/>
写程序中大部分的时间都用到乱码的处理和beautifulsoup的使用了&hellip; <br/>
还有py2exe的安装学习 <br/>
真的是浪费了 好多时间，如果有好的规划，应该会节省更多时间吧、</p>

<h3>&mdash;-最后的结果&mdash;&ndash;</h3>

<p><img src="/images/blog/140801_web_score_log/console.jpg" alt="" /> <br/>
<img src="/images/blog/140801_web_score_log/result.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cousera_comments总和]]></title>
    <link href="http://www.changchen.me/blog/20140429/cousera-comments/"/>
    <updated>2014-04-29T17:29:28+08:00</updated>
    <id>http://www.changchen.me/blog/20140429/cousera-comments</id>
    <content type="html"><![CDATA[<blockquote><p> 《An Introduction to Interactive Programming in Python》</p></blockquote>

<p>突然想去看看之前mini_project别人给我的评价  <br/>
不看不知道  一看吓一跳  <br/>
感动的都要哭了 T ^ T <br/>
敢不敢再负责一点</p>

<!--more-->


<ul>
<li><p>Mini-project # 1 &ndash; Rock-paper-scissors-lizard-Spock <br/>
<img src="\images\blog\140430_cousera\3.png" alt="ico_topitme" /> <br/>
<img src="\images\blog\140430_cousera\4.png" alt="ico_topitme" /></p></li>
<li><p>Mini-project # 2 &ndash; &ldquo;Guess the number&rdquo; game" <br/>
<img src="\images\blog\140430_cousera\5.png" alt="ico_topitme" />   <br/>
<img src="\images\blog\140430_cousera\6.png" alt="ico_topitme" /> <br/>
<img src="\images\blog\140430_cousera\7.png" alt="ico_topitme" /></p></li>
<li><p>Mini-project # 4 &ndash; &ldquo;Pong&rdquo; <br/>
<img src="\images\blog\140430_cousera\4_1.png" alt="ico_topitme" />   <br/>
<img src="\images\blog\140430_cousera\4_2.png" alt="ico_topitme" /></p></li>
</ul>


<h4>&ldquo;:&ndash;) All the best.&rdquo;</h4>

<h4>继续加油   以后改作业也要更认真一点了</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cousera_Mini-project # 4 - Pong]]></title>
    <link href="http://www.changchen.me/blog/20140429/cousera-pong/"/>
    <updated>2014-04-29T16:27:47+08:00</updated>
    <id>http://www.changchen.me/blog/20140429/cousera-pong</id>
    <content type="html"><![CDATA[<blockquote><p> 《An Introduction to Interactive Programming in Python》</p></blockquote>

<p>**小游戏~&ldquo;Pong&rdquo; <br/>
这次时间还是挺充裕的，但是看英文看的头大，就没按步骤写了 <br/>
结果花了更多的时间   还写错了一些  <br/>
下次还是认真按步骤写好了</p>

<p>我做的： <br/>
<img src="\images\blog\140430_cousera\1.png" alt="ico_topitme" /></p>

<p>改作业改到一个做的好有创意： 评语评了一句碉堡了 <br/>
不知道看懂看不懂 哈哈 <br/>
<img src="\images\blog\140430_cousera\2.png" alt="ico_topitme" /></p>

<!--more-->


<p>可以在<a href="http://www.codeskulptor.org/">codeskullptor</a>上运行 <br/>
code: <br/>
```python</p>

<h1>Implementation of classic arcade game Pong</h1>

<p>import simplegui
import random</p>

<h1>initialize globals &ndash; pos and vel encode vertical info for paddles</h1>

<p>WIDTH = 600
HEIGHT = 400     <br/>
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True</p>

<h1>initialize ball_pos and ball_vel for new bal in middle of table</h1>

<h1>if direction is RIGHT, the ball&rsquo;s velocity is upper right, else upper left</h1>

<p>def spawn_ball(direction):</p>

<pre><code>global ball_pos, ball_vel # these are vectors stored as lists
ball_pos = [WIDTH/2, HEIGHT/2]
ball_vel = [random.randrange(1, 2)*2, random.randrange(-2, 2)+0.5]
if(direction == "LEFT"):    ball_vel[0] = -ball_vel[0]
</code></pre>

<h1>define event handlers</h1>

<p>def new_game():</p>

<pre><code>global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
paddle1_pos = [HALF_PAD_WIDTH, HEIGHT / 2]
paddle2_pos = [WIDTH - HALF_PAD_WIDTH, HEIGHT / 2]
global score1, score2  # these are ints
score1 = 0
score2 = 0
paddle2_vel = 0
paddle1_vel = 0
spawn_ball(random.choice(["LEFT", "RIGHT"]))
</code></pre>

<p>def draw(canvas):</p>

<pre><code>global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
global paddle2_vel, paddle1_vel


# draw mid line and gutters
canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")

# update ball
ball_pos[0] += ball_vel[0]
ball_pos[1] += ball_vel[1]      

# draw ball
canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "Red", "White")

# update paddle's vertical position, keep paddle on the screen
if(ball_pos[1] + BALL_RADIUS &gt;= HEIGHT or ball_pos[1] - BALL_RADIUS &lt;= 0):
    ball_vel[1] = -ball_vel[1]

# draw paddles
canvas.draw_polyline([[HALF_PAD_WIDTH, paddle1_pos[1]-HALF_PAD_HEIGHT], 
                      [HALF_PAD_WIDTH, paddle1_pos[1]+HALF_PAD_HEIGHT]], 
                     PAD_WIDTH, 'Red')
paddle1_pos[1] += paddle1_vel

canvas.draw_polyline([[WIDTH - HALF_PAD_WIDTH, paddle2_pos[1]-HALF_PAD_HEIGHT], 
                      [WIDTH - HALF_PAD_WIDTH, paddle2_pos[1]+HALF_PAD_HEIGHT]], 
                     PAD_WIDTH, 'Red')
paddle2_pos[1] += paddle2_vel

if paddle1_pos[1] + HALF_PAD_HEIGHT &gt;= HEIGHT:
    paddle1_pos[1] = HEIGHT - HALF_PAD_HEIGHT
    paddle1_vel = 0
if paddle1_pos[1] - HALF_PAD_HEIGHT &lt;= 0:
    paddle1_pos[1] = HALF_PAD_HEIGHT
    paddle1_vel = 0

if paddle2_pos[1] + HALF_PAD_HEIGHT &gt;= HEIGHT:
    paddle2_pos[1] = HEIGHT - HALF_PAD_HEIGHT
    paddle2_vel = 0
if paddle2_pos[1] - HALF_PAD_HEIGHT &lt;= 0:
    paddle2_pos[1] = HALF_PAD_HEIGHT
    paddle2_vel = 0

if(ball_pos[1] &lt; paddle1_pos[1] + HALF_PAD_HEIGHT and
   ball_pos[1] &gt; paddle1_pos[1] - HALF_PAD_HEIGHT and
   ball_pos[0] &lt;=  BALL_RADIUS + PAD_WIDTH):
    ball_vel[0] = -ball_vel[0]
    ball_vel[0] *= 1.2
    ball_vel[1] *= 1.2
elif(ball_pos[0] &lt;  -1*BALL_RADIUS):
    score2 += 1
    spawn_ball(random.choice(["LEFT", "RIGHT"]))

if(ball_pos[1] &lt; paddle2_pos[1] + HALF_PAD_HEIGHT and
   ball_pos[1] &gt; paddle2_pos[1] - HALF_PAD_HEIGHT and
   ball_pos[0] &gt;= WIDTH - BALL_RADIUS - PAD_WIDTH):

    ball_vel[0] = -ball_vel[0] 
    ball_vel[0] *= 1.2
    ball_vel[1] *= 1.2
elif(ball_pos[0] &gt;= WIDTH + BALL_RADIUS):
    score1 += 1
    spawn_ball(random.choice(["LEFT", "RIGHT"]))
# draw scores
canvas.draw_text(str(score1), [50, 50], 50, 'Blue', 'serif')
canvas.draw_text(str(score2), [500, 50], 50, 'Blue', 'serif')
</code></pre>

<p>def keydown(key):</p>

<pre><code>global paddle1_vel, paddle2_vel
acc = 1
if key==simplegui.KEY_MAP["s"]:
    paddle1_vel += acc
elif key==simplegui.KEY_MAP["w"]:
    paddle1_vel -= acc
elif key==simplegui.KEY_MAP["down"]:
    paddle2_vel += acc
elif key==simplegui.KEY_MAP["up"]:
    paddle2_vel -= acc
</code></pre>

<p>def keyup(key):</p>

<pre><code>global paddle1_vel, paddle2_vel
</code></pre>

<p>def button_handler():</p>

<pre><code>new_game()
</code></pre>

<h1>create frame</h1>

<p>frame = simplegui.create_frame(&ldquo;Pong&rdquo;, WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button(&lsquo;Reset&rsquo;, button_handler, 60)</p>

<h1>start frame</h1>

<p>new_game()
frame.start()
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux中安装python的egg包]]></title>
    <link href="http://www.changchen.me/blog/20140424/linux-python-egg-install/"/>
    <updated>2014-04-24T11:28:48+08:00</updated>
    <id>http://www.changchen.me/blog/20140424/linux-python-egg-install</id>
    <content type="html"><![CDATA[<h4>NetworkX的使用:<a href="http://blog.sciencenet.cn/blog-404069-337442.html" title="NetworkX">http://blog.sciencenet.cn/blog-404069-337442.html</a></h4>

<p>首先到<a href="http://pypi.python.org/pypi/networkx/">http://pypi.python.org/pypi/networkx/</a>下载
networkx-1.1-py2.6.egg   <br/>
然后下载 setuptools:<a href="https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg#md5=fe1f997bc722265116870bc7919059ea">setuptools-0.6c11-py2.7.egg (md5)</a></p>

<h3>1. 安装setuptools</h3>

<p><img src="\images\blog\140424_python_egg\1.png" alt="ico_topitme" /></p>

<h3>2. 安装networkx</h3>

<p><img src="\images\blog\140424_python_egg\2.png" alt="ico_topitme" /></p>
]]></content>
  </entry>
  
</feed>
