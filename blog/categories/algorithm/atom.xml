<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithm | Henry Z's blog~]]></title>
  <link href="http://changchen.me/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://changchen.me/"/>
  <updated>2017-07-17T01:10:05+10:00</updated>
  <id>http://changchen.me/</id>
  <author>
    <name><![CDATA[Daya]]></name>
    <email><![CDATA[daya0576@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[P/NP/NPC/NP-Hard 笔记]]></title>
    <link href="http://changchen.me/blog/20170715/p-np-npc-nphard/"/>
    <updated>2017-07-15T01:43:41+10:00</updated>
    <id>http://changchen.me/blog/20170715/p-np-npc-nphard</id>
    <content type="html"><![CDATA[<blockquote><p>NP完全和NP难问题困扰了我好几个月， 用这篇日志记录我最近的思考和学习(<a style='color: red'>红色标注</a>的为待解决的问题)。    <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170714_np/np.png"></p></blockquote>

<!--more-->


<p></p>

<br>  


<blockquote><h3>1. P/NP:</h3>

<p><strong>P: polynomial-time problems</strong> <br/>
P类问题就是能在多项式时间内解决的问题。 <br/>
<strong>NP: non-deterministic polynomial</strong> <br/>
NP问题是指能在多项式时间里验证一个解是否为True的问题  <br/>
e.g. 给出一组输入， 我们可以在多项式时间内验证这个解的答案是‘是’或者‘否’。</p></blockquote>

<br>


<blockquote><h3>2. 归约的概念:</h3>

<p><strong>归约(Reductions)</strong>:《算法导论》上举了这么一个例子。 比如说想在有两个问题：求解一个<strong>一元一次方程</strong>和求解一个<strong>一元二次方程</strong>。 <br/>
前者可以归约到后者，就是说知道如何解一个一次二元方程， 肯定能解出一元一次方程（将一元二次方程的二次项系数设为0）。 <br/>
所以一元二次方程的时间复杂度肯定大于等于一元一次方程，也就是说，只要能多项式时间复杂度去解决一元二次问题，一元一次方程也肯定能用多项式的时间复杂度去解决。 <br/>
<strong>所以:</strong> <br/>
如果可以 多项式时间复杂度从 A(一元一次方程) 归约到 B(一元二次方程) <br/>
B 属于 P &mdash;> A 属于 P <br/>
B 属于 NP &mdash;> B 属于 NP</p></blockquote>

<br>


<blockquote><h3>3. NPC(NP完全问题):</h3>

<p>如何证明一个问题 X 是NP-complete: <br/>
1. X ∈ NP <br/>
2. reduce from know NP-complete  <br/>
那么就要说到第一个被证明为NPC问题，SAT(Boolean satisfiability problem)： <br/>
给定一个个电路， 判断该电路的满足性(所有的输入中， 至少有一个使最后的输出为1)： <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170714_np/boolean.jpg">   <br/>
1. 我们可以证明他是一个NP问题， 因为他的解可以在多项式的时间复杂度内验证。  <br/>
2. 而且它是np难的， 因为它至少比np中的任意问题都难。 <br/>
<strong><a style='color: red'>那么如何证明呢？？好困扰， 待解决中！！！</a></strong>  <br/>
<strong>NPC问题举例：</strong> <br/>
1. null</p></blockquote>

<br>


<blockquote><h3>3. NP-Hard(NP难问题):</h3>

<p>时间复杂度大于或等于所有np问题，既未必可以在多项式时间内<strong>验证一个解的正确性</strong>。<br/>
<strong>NP困难问题举例：</strong> <br/>
1. null</p></blockquote>

<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法总结]]></title>
    <link href="http://changchen.me/blog/20170611/python-sorting-algorithms/"/>
    <updated>2017-06-11T02:04:35+10:00</updated>
    <id>http://changchen.me/blog/20170611/python-sorting-algorithms</id>
    <content type="html"><![CDATA[<blockquote><p>最近开始看&lt;算法导论>, 一开始就是讲的就是插入排序和merge sort,  <br/>
之前面试的时候, 也被问起过排序算法, 一紧张只想到了两三个,  <br/>
所以乘这个机会回顾了一下大部分的排序算法, <strong>并自己用Python实现了一遍.</strong></p></blockquote>

<!--more-->


<p></p>

<br>     


<h3>各个算法的时间和空间复杂度:</h3>

<p>以前大二的时候, 看到这张图的时候真的头晕, 但现在看起来这个表格真的很精华. <br/>
理解各个算法后就慢慢明白各个算法三种情况(最优, 平均和最坏)的复杂度, 还有空间复杂度都不一样.  <br/>
所以不同不算法都有各自的优势和应用的场景.  <br/>
<img class="lazy" data-original="/images/blog/170610_sorting/time_complexity.png"></p>

<br>


<h3>直接把每个算法实现的解释和感想写在代码的注释里了.</h3>

<p>ps. 代码是用python3.5写的.
```python
def bubble_sort(l):</p>

<pre><code>"""冒泡排序:

哈哈, 这个算法真的是满满的回忆, 记得以前大二开算法课接触的最早的几个算法.
那时是用C写的, 熟练的直接默写出来了.
当时还没有`l[i], l[j] = l[j], l[i]`这种写法, 需要用tmp来交换两个数字, 也是可以不用tmp哦 :p
"""
for i in range(len(l)):
    for j in range(i+1, len(l)):
        if l[j] &lt; l[i]:
            l[i], l[j] = l[j], l[i]
return l
</code></pre>

<p>def insert_sort(l):</p>

<pre><code>"""插入排序:

从左到右遍历数组, 将每个元素插入它左边的那个(已排好序)数组里
"""
for i, v in enumerate(list(l)):
    # j: the index of item to compare
    j = i - 1
    while j &gt;= 0 and l[j] &gt; v:
        l[j+1] = l[j]
        j -= 1
    l[j+1] = v
return l
</code></pre>

<p>def selection_sort(l):</p>

<pre><code>"""选择排序:

和插入排序不同的是, 它是在遍历数组时, 将元素和它右边数组里的最小值进行交换.   
"""
for i in range(len(l)):
    min = i
    for j, v in enumerate(l[i+1:], start=i+1):
        if v &lt;= l[min]: min = j

    l[i], l[min] = l[min], l[i]
return l
</code></pre>

<p>def merge_sort(l):</p>

<pre><code>"""归并排序:

去google picture搜一下merge sort的图, 你就明白这个算法了.    
"""
def merge(a, b):
    l = []
    while a and b:
        l.append(a.pop(0)) if a[0] &lt;= b[0] else l.append(b.pop(0))
    return l + a + b

if len(l) &gt;= 2:
    return merge(merge_sort(l[::2]), merge_sort(l[1::2]))
else:
    return l
</code></pre>

<p>def quick_sort(l):</p>

<pre><code>"""快速排序:

step 1. 随机选择一个数作为基准, 将输入的数组分为两半
step 2. 对两个子数组, 继续用step 1的方法进行处理,
        直到到达递归结束的条件: 输入数组长度小于等于1.   
"""
if len(l) &lt;= 1:
    return l
else:
    base = l[0]
    left = [i for i in l[1:] if i &lt;= base]
    right = [i for i in l[1:] if i &gt; base]
    return quick_sort(left) + [base] + quick_sort(right)
</code></pre>

<p>def heap_sort(l):</p>

<pre><code>"""堆排序:

这段代码是摘自Python heapq的官方文档.
先把所有元素push(O(log n))到heap里, 生成一个min-heap.
"""
from heapq import heappush, heappop
h = []
for value in l:
    heappush(h, value)
return [heappop(h) for _ in range(len(h))]
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>a = [5, 2, 4, 6, 1, 3]
print("Built-in sort:   {} --&gt; {}".format(a, sorted(a)))
print("Bubble sort:     {} --&gt; {}".format(a, bubble_sort(list(a))))
print("Insert sort:     {} --&gt; {}".format(a, insert_sort(list(a))))
print("Selection sort:  {} --&gt; {}".format(a, selection_sort(list(a))))
print("Merge sort:      {} --&gt; {}".format(a, merge_sort(list(a))))
print("Heap sort:       {} --&gt; {}".format(a, heap_sort(list(a))))
print("Quick sort:      {} --&gt; {}".format(a, quick_sort(list(a))))
</code></pre>

<p>```
<img class="lazy" data-original="/images/blog/170610_sorting/result.png"></p>

<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数组分割(编程之美) HyperS面试题 思考与分享]]></title>
    <link href="http://changchen.me/blog/20170525/partition-problem/"/>
    <updated>2017-05-25T02:34:57+10:00</updated>
    <id>http://changchen.me/blog/20170525/partition-problem</id>
    <content type="html"><![CDATA[<blockquote><p><code>问题描述:</code> <strong>有一个无序, 元素个数为2n的正整数数组. 要求: 如何能把这个数组分割为元素个数为n的两个数组, 并使两个子数组的和最接近.</strong>  <br/>
当时面试的时候, 看完描述想了十秒钟, 只能想到C(2n, n)把所有情况遍历一遍, 想不到特别简单的算法, 就直接放弃了.. 面试官问我应该怎么做呢, 我只能靠直觉说用动态规划吧.  <br/>
虽然现在早就入职了, 但终于有时间重新思考这个问题, 并用这篇日志记录下来.</p></blockquote>

<!--more-->


<p></p>

<br>  


<blockquote><p>这道面试题其实来自 <code>编程之美 2.18 数组分割</code>, 讽刺的是我以前很早买过这本书, 却没有仔细阅读~~</p></blockquote>

<br>


<h3>方法一:</h3>

<p>Simple greedy algorithm:</p>

<p>Step1: 将这个数组进行排序. <br/>
Step2: 按奇偶划分为两个数组: l1: [a1, a3, a5, ..] 和 l2: [a2, a4, a6, ..]  <br/>
Step3: 遍历这两个数组, 找出一对数进行交换, 使得<code>Sum(l1)</code>和<code>Sum(l2)</code>的差值最小. <br/>
Step4: 重复Step3操作, 直到找不到可以让差值更小的交换.</p>

<p><strong>缺点: </strong> 这样找到的两个子数组并不能保证是最优解. <br/>
我自己简单写了一下Python代码, 供更好的理解. <br/>
```python
L = [1, 5, 7, 8, 9, 6, 3, 11, 20, 17]</p>

<p>def method1(l):</p>

<pre><code># 先将所有元素排序, 按奇偶划分为两个数组:
# [a1, a3, a5, ..] 和 [a2, a4, a6, ..]
l = sorted(l)
l1, l2 = l[::2], l[1::2]

print('sum(l1) - sum(l2):', sum(l1) - sum(l2))
for i in range(5):
    swp = (0, 0)
    sub = sub_tmp = sum(l1) - sum(l2)
    for i, x in enumerate(l1):
        for j, y in enumerate(l2):
            # x与y交换之后, SUM(l1) - SUM(l2):
            #   new_sum1 = sum(l1) - x + y
            #   new_sum2 = sum(l2) - y + x
            #   new_sub = new_sum1 - new_sum2 = sum(l1) - sum(l2) - 2x + 2y
            new_sub = 2 * (x - y) - sub

            if abs(new_sub) &lt;= abs(sub_tmp):
                swp = (i, j)
                sub_tmp = new_sub

    if abs(sub) != abs(sub_tmp):
        i, j = swp[0], swp[1]
        l1[i], l2[j] = l2[j], l1[i]
        print('\nswapping l1[{}] and l2[{}]'.format(i, j))
        print('sum(l1) - sum(l2):', sum(l1) - sum(l2))
    else:
        break
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>method1(list(L))
</code></pre>

<p>```</p>

<br>


<br>


<h3>方法二:</h3>

<p>分割为两个数组, 并使他们的和最接近 == 从2n个数中挑出n个数, 使他们的和最接近与所有整数的之和的一半. <br/>
书中对这个方法二的描述也是很令人费解, 我总结了一下:</p>

<p><strong>定义:</strong> <br/>
sum_set(k, i): 从k个整数中找出i个元素的和 的集合. <br/>
令L为输入的数组, 令2N为数组长度:</p>

<ol>
<li><strong>sum_set(2N, 1):</strong> 从2N个元素中取一个元素, 得到的和的集合</li>
<li><strong>sum_set(2N, 2N):</strong> 从2N个元素中取2N个元素, 得到的和的集合</li>
<li><strong>sum_set(2N, i):</strong> S(2N-1, i) | {x+L[k-1] for x in S(2N-1, i-1)}   <br/>
<strong>大致意思就是sum_set(2N, i)可以分解为 第k个元素 选或者不选 的情况</strong></li>
</ol>


<p><strong>举个例子!!!</strong> <br/>
L = [1, 2, 3, 4]</p>

<ol>
<li>sum_set(4, 1) = {1, 2, 3, 4}</li>
<li>sum_set(4, 4) = {1+2+3+4} = {10}</li>
<li>sum_set(4, 2) <br/>
= sum_set(3, 2) | {x+4 for x in sum_set(3, 1)}  <br/>
= (sum_set(2, 2) | {x+3 for x in sum_set(2, 1)}) | {1+4, 2+4, 3+4}  <br/>
= ({1+2} | {1+3, 2+3}}) | {5, 6, 7}     <br/>
= {3, 4, 5, 6, 7}</li>
</ol>


<p>书中是用for循环来写的, 但我感觉这种DP一般用递归会更加清晰, 就写了这个版本(当然可以加cache做优化, 但我主要是为了展示思路就懒得写了, 可以参考我<a href="/blog/20160915/dynamic-programming/">关于动态规划的这篇日志</a>)  <br/>
```python
def method2(k, i):</p>

<pre><code>if i == 1:
    return set(L[:k])
if k == i:
    return {sum(L[:k])}

# S(k, i) = S(k-1, i) U {A[k] + x | x属于S(k-1, i-1) }
return method2(k-1, i) | {i+L[k-1] for i in method2(k-1, i-1)}
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>L = [1, 5, 7, 8, 9, 6, 3, 11, 20, 17]
N = int(len(L) / 2)

print(method2(2*N, N))
</code></pre>

<p>```</p>

<p>因为每一步都拆成了两种情况(第k个元素 被选中|没被选中)进行递归，所以<strong>时间复杂度为O(2<sup>N</sup>)</strong>. <br/>
要是加cache了话(把计算过的结果放在字典里), 时间复杂度是O(max(k)*max(i))=O(N<sup>2</sup>)?</p>

<p>但我总觉得<code>{i+L[k-1] for i in method2(k-1, i-1)}</code>的时间复杂度是不是没有考虑进去???</p>

<p>原书中的写法, 测试过了, 和递归的结果是一模一样的: <br/>
```python
def method2_o(N, Heap, L):</p>

<pre><code>for k in range(1, 2*N+1):
    i_max = min(k-1, N-1)
    for i in reversed(range(0, i_max+1)):
        for v in Heap[i]:
            Heap[i+1].add(v+L[k-1])
</code></pre>

<p>```</p>

<br>


<br>


<h3>方法三:</h3>

<p>方法二的时间复杂度是指数级的, 肯定是不能接受的. <br/>
按照书上写了第三种方法, <strong>时间复杂度为O(N<sup>2</sup>*Sum)</strong>:   <br/>
```python
from collections import defaultdict</p>

<p>def method3(isOk):</p>

<pre><code># isOk[i][v]: bool(从数组中取i个数, 得到sum为v)
for k in range(2*N):
    for i in reversed(range(1, min(k+1, N)+1)):
        for v in range(1, int(sum(L)/2+1)):
            sub = v - L[k]
            if sub &gt;= 0 and isOk[i-1][sub]:
                isOk[i][v] = True
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>L = [1, 5, 7, 8, 9, 6, 3, 11, 20, 17]
N = int(len(L) / 2)

isOk = {x: defaultdict(bool) for x in range(0, N+1)}
isOk[0][0] = True
method3(isOk)

[print(k, v) for k, v in isOk.items()]
</code></pre>

<p>```</p>

<br>


<br>


<h3>总结(TODO):</h3>

<ol>
<li>不知道在看这篇博客的你有没有发现一个很尴尬的问题:<br/>
书中的解法二得到的是 取值和的集合, 解法三得到的是是否能找到答案的boolean值. <br/>
那如何利用解法二, 解法三得到具体的子数组(最优解)呢?</li>
<li>解法二的我用递归的方式写的时间复杂度? <br/>
如果我递归时, 把计算结果保存到字典里, 不去做重复计算, 那么它的时间复杂度又是多少呢?</li>
</ol>


<p>在知乎提的问题: <a href="https://www.zhihu.com/question/60472041">https://www.zhihu.com/question/60472041</a>  <br/>
希望有好心人帮我回答, 23333</p>

<h3>关于P, NP, NP-complete</h3>

<h3>References:</h3>

<ol>
<li>&lt;编程之美> 2.18 数组分割</li>
<li><a href="http://www.americanscientist.org/issues/pub/2002/3/the-easiest-hard-problem/2">http://www.americanscientist.org/issues/pub/2002/3/the-easiest-hard-problem/2</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试算法题 - 出栈次序问题 (Catalan Number)]]></title>
    <link href="http://changchen.me/blog/20170309/catalan-number-interview/"/>
    <updated>2017-03-09T00:38:32+11:00</updated>
    <id>http://changchen.me/blog/20170309/catalan-number-interview</id>
    <content type="html"><![CDATA[<blockquote><p>之前去方付通面试的时候的时候, 问了我<code>N个数依次入栈，出栈顺序有多少种？</code>的算法题, 其实是卡特兰数(Catalan)的应用.  <br/>
当时没有答出来(这要是之前没有接触过, 谁答的出来).  <br/>
现在用这篇日志重新整理记录一下.</p></blockquote>

<!--more-->


<br>  


<h2>问题的定义</h2>

<p>一个栈(无穷大)的进栈序列为1，2，3，…，n，有多少个不同的出栈序列?</p>

<h2>解题思路</h2>

<ol>
<li>假设进栈序列为[1, 2, 3, 4, 5, 6]</li>
<li>因为每个数字都可能是最后一个出栈的(独立的事件), 所以先单独分析<strong>当k为最后一个出栈数字</strong>的情况.</li>
<li>1) 当<code>k进栈</code>时, [1, 2]肯定已经出栈了, 所以他们([1, 2])的出栈序列总数为<code>f(k-1)</code> <br/>
2) 当<code>k出栈</code>时, 因为3为最后一个出栈, [4, 5, 6]肯定也已经出栈了, 所以他们[4, 5, 6]的出栈序列总数为<code>f(n-k)</code></li>
<li>所以当k为出栈序列的最后一个数字时, 可能序列的总和为<code>f(k-1)*f(n-k)</code></li>
<li>又因为第二条中, 每个事件为独立的, 所以最后得到了这么一个推导式:  <br/>
<code>f(0) = f(1) = 1</code> <br/>
<code>f(n) = f(0)*f(n-1)+f(1)*f(n-2) + ... + f(n-1)*f(0) (n&gt;=2)</code></li>
</ol>


<h2>Reference</h2>

<ol>
<li><a href="https://en.wikipedia.org/wiki/Catalan_number">https://en.wikipedia.org/wiki/Catalan_number</a></li>
<li><a href="http://www.acmerblog.com/catalan-5196.html">http://www.acmerblog.com/catalan-5196.html</a></li>
<li><a href="http://baike.baidu.com/item/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0#4">http://baike.baidu.com/item/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0#4</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试算法题 - $1 Coke Problem]]></title>
    <link href="http://changchen.me/blog/20170224/coke-algorithm/"/>
    <updated>2017-02-24T12:30:51+11:00</updated>
    <id>http://changchen.me/blog/20170224/coke-algorithm</id>
    <content type="html"><![CDATA[<blockquote><p>今天面试问到一个算法: 一个汽水是$1, 两个汽水的<strong>空瓶</strong>换一瓶可乐, 请问给一些钱, 最多能喝几瓶呢?   <br/>
当时思路有些乱, 算法没写清楚, 面试结束去个奶茶店, 重新写了一下.</p></blockquote>

<!--more-->


<br>    


<h3>英文的描述:</h3>

<p>A bottle of Coke is $1. You can exchange two empty bottles for a bottle of Coke. You have $20 now in your pocket. So how many bottles of Coke can you drink at most?</p>

<br>


<h3>1. 模拟喝汽水的过程.</h3>

<p>当时写算法的时候, 面试官很看重的是可读性, 例如变量名的定义.   <br/>
作为一个Python程序员, 我以后也在这方面也要更加注意.  <br/>
```python
def cal_drinks(n):</p>

<pre><code>avail_drinks = n
sum_drunk = 0
empty_drinks = 0

while avail_drinks &gt; 0:
    # consume available drinks
    sum_drunk += avail_drinks
    empty_drinks += avail_drinks

    # replace empty bottles to drinks
    avail_drinks = empty_drinks // 2
    empty_drinks = empty_drinks % 2

return sum_drunk
</code></pre>

<p>```</p>

<br>


<h3>2. 递归</h3>

<p>写递归最重要的就是找到那个推倒式.   <br/>
```python</p>

<h1>n个空瓶: f(n) = n/2 + f(n/2 + n%2)</h1>

<h1>n块钱:  F(n) = n + f(n)</h1>

<p>def cal_drinks_by_empty(n):</p>

<pre><code>if n &lt;= 1:
    sum_drunk = 0
else:
    sum_drunk = n//2 + cal_drinks_by_empty(n//2 + n%2)

return sum_drunk
</code></pre>

<p>def cal_drinks(n):</p>

<pre><code>return n + cal_drinks_by_empty(n)
</code></pre>

<p>```</p>

<br>


<h3>3: ???</h3>

<p>就是为什么结果是n + (n-1), 是因为这个推导式有什么简化的方法吗?</p>

<br><br>


<p>最后献上一张奶茶图留念: <br/>
<img style="max-height:330px" class="lazy" data-original="/images/blog/170224_coke/milktea.JPG"></p>
]]></content>
  </entry>
  
</feed>
