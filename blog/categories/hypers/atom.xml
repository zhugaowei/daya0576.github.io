<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hypers | Henry Z's blog~]]></title>
  <link href="http://changchen.me/blog/categories/hypers/atom.xml" rel="self"/>
  <link href="http://changchen.me/"/>
  <updated>2017-07-23T23:59:02+10:00</updated>
  <id>http://changchen.me/</id>
  <author>
    <name><![CDATA[Daya]]></name>
    <email><![CDATA[daya0576@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[数组分割(编程之美) HyperS面试题 思考与分享]]></title>
    <link href="http://changchen.me/blog/20170525/partition-problem/"/>
    <updated>2017-05-25T02:34:57+10:00</updated>
    <id>http://changchen.me/blog/20170525/partition-problem</id>
    <content type="html"><![CDATA[<blockquote><p><code>问题描述:</code> <strong>有一个无序, 元素个数为2n的正整数数组. 要求: 如何能把这个数组分割为元素个数为n的两个数组, 并使两个子数组的和最接近.</strong>  <br/>
当时面试的时候, 看完描述想了十秒钟, 只能想到C(2n, n)把所有情况遍历一遍, 想不到特别简单的算法, 就直接放弃了.. 面试官问我应该怎么做呢, 我只能靠直觉说用动态规划吧.  <br/>
虽然现在早就入职了, 但终于有时间重新思考这个问题, 并用这篇日志记录下来.</p></blockquote>

<!--more-->


<p></p>

<br>  


<blockquote><p>这道面试题其实来自 <code>编程之美 2.18 数组分割</code>, 讽刺的是我以前很早买过这本书, 却没有仔细阅读~~</p></blockquote>

<br>


<h3>方法一:</h3>

<p>Simple greedy algorithm:</p>

<p>Step1: 将这个数组进行排序. <br/>
Step2: 按奇偶划分为两个数组: l1: [a1, a3, a5, ..] 和 l2: [a2, a4, a6, ..]  <br/>
Step3: 遍历这两个数组, 找出一对数进行交换, 使得<code>Sum(l1)</code>和<code>Sum(l2)</code>的差值最小. <br/>
Step4: 重复Step3操作, 直到找不到可以让差值更小的交换.</p>

<p><strong>缺点: </strong> 这样找到的两个子数组并不能保证是最优解. <br/>
我自己简单写了一下Python代码, 供更好的理解. <br/>
```python
L = [1, 5, 7, 8, 9, 6, 3, 11, 20, 17]</p>

<p>def method1(l):</p>

<pre><code># 先将所有元素排序, 按奇偶划分为两个数组:
# [a1, a3, a5, ..] 和 [a2, a4, a6, ..]
l = sorted(l)
l1, l2 = l[::2], l[1::2]

print('sum(l1) - sum(l2):', sum(l1) - sum(l2))
for i in range(5):
    swp = (0, 0)
    sub = sub_tmp = sum(l1) - sum(l2)
    for i, x in enumerate(l1):
        for j, y in enumerate(l2):
            # x与y交换之后, SUM(l1) - SUM(l2):
            #   new_sum1 = sum(l1) - x + y
            #   new_sum2 = sum(l2) - y + x
            #   new_sub = new_sum1 - new_sum2 = sum(l1) - sum(l2) - 2x + 2y
            new_sub = 2 * (x - y) - sub

            if abs(new_sub) &lt;= abs(sub_tmp):
                swp = (i, j)
                sub_tmp = new_sub

    if abs(sub) != abs(sub_tmp):
        i, j = swp[0], swp[1]
        l1[i], l2[j] = l2[j], l1[i]
        print('\nswapping l1[{}] and l2[{}]'.format(i, j))
        print('sum(l1) - sum(l2):', sum(l1) - sum(l2))
    else:
        break
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>method1(list(L))
</code></pre>

<p>```</p>

<br>


<br>


<h3>方法二:</h3>

<p>分割为两个数组, 并使他们的和最接近 == 从2n个数中挑出n个数, 使他们的和最接近与所有整数的之和的一半. <br/>
书中对这个方法二的描述也是很令人费解, 我总结了一下:</p>

<p><strong>定义:</strong> <br/>
sum_set(k, i): 从k个整数中找出i个元素的和 的集合. <br/>
令L为输入的数组, 令2N为数组长度:</p>

<ol>
<li><strong>sum_set(2N, 1):</strong> 从2N个元素中取一个元素, 得到的和的集合</li>
<li><strong>sum_set(2N, 2N):</strong> 从2N个元素中取2N个元素, 得到的和的集合</li>
<li><strong>sum_set(2N, i):</strong> S(2N-1, i) | {x+L[k-1] for x in S(2N-1, i-1)}   <br/>
<strong>大致意思就是sum_set(2N, i)可以分解为 第k个元素 选或者不选 的情况</strong></li>
</ol>


<p><strong>举个例子!!!</strong> <br/>
L = [1, 2, 3, 4]</p>

<ol>
<li>sum_set(4, 1) = {1, 2, 3, 4}</li>
<li>sum_set(4, 4) = {1+2+3+4} = {10}</li>
<li>sum_set(4, 2) <br/>
= sum_set(3, 2) | {x+4 for x in sum_set(3, 1)}  <br/>
= (sum_set(2, 2) | {x+3 for x in sum_set(2, 1)}) | {1+4, 2+4, 3+4}  <br/>
= ({1+2} | {1+3, 2+3}}) | {5, 6, 7}     <br/>
= {3, 4, 5, 6, 7}</li>
</ol>


<p>书中是用for循环来写的, 但我感觉这种DP一般用递归会更加清晰, 就写了这个版本(当然可以加cache做优化, 但我主要是为了展示思路就懒得写了, 可以参考我<a href="/blog/20160915/dynamic-programming/">关于动态规划的这篇日志</a>)  <br/>
```python
def method2(k, i):</p>

<pre><code>if i == 1:
    return set(L[:k])
if k == i:
    return {sum(L[:k])}

# S(k, i) = S(k-1, i) U {A[k] + x | x属于S(k-1, i-1) }
return method2(k-1, i) | {i+L[k-1] for i in method2(k-1, i-1)}
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>L = [1, 5, 7, 8, 9, 6, 3, 11, 20, 17]
N = int(len(L) / 2)

print(method2(2*N, N))
</code></pre>

<p>```</p>

<p>因为每一步都拆成了两种情况(第k个元素 被选中|没被选中)进行递归，所以<strong>时间复杂度为O(2<sup>N</sup>)</strong>. <br/>
要是加cache了话(把计算过的结果放在字典里), 时间复杂度是O(max(k)*max(i))=O(N<sup>2</sup>)?</p>

<p>但我总觉得<code>{i+L[k-1] for i in method2(k-1, i-1)}</code>的时间复杂度是不是没有考虑进去???</p>

<p>原书中的写法, 测试过了, 和递归的结果是一模一样的: <br/>
```python
def method2_o(N, Heap, L):</p>

<pre><code>for k in range(1, 2*N+1):
    i_max = min(k-1, N-1)
    for i in reversed(range(0, i_max+1)):
        for v in Heap[i]:
            Heap[i+1].add(v+L[k-1])
</code></pre>

<p>```</p>

<br>


<br>


<h3>方法三:</h3>

<p>方法二的时间复杂度是指数级的, 肯定是不能接受的. <br/>
按照书上写了第三种方法, <strong>时间复杂度为O(N<sup>2</sup>*Sum)</strong>:   <br/>
```python
from collections import defaultdict</p>

<p>def method3(isOk):</p>

<pre><code># isOk[i][v]: bool(从数组中取i个数, 得到sum为v)
for k in range(2*N):
    for i in reversed(range(1, min(k+1, N)+1)):
        for v in range(1, int(sum(L)/2+1)):
            sub = v - L[k]
            if sub &gt;= 0 and isOk[i-1][sub]:
                isOk[i][v] = True
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>L = [1, 5, 7, 8, 9, 6, 3, 11, 20, 17]
N = int(len(L) / 2)

isOk = {x: defaultdict(bool) for x in range(0, N+1)}
isOk[0][0] = True
method3(isOk)

[print(k, v) for k, v in isOk.items()]
</code></pre>

<p>```</p>

<br>


<br>


<h3>总结(TODO):</h3>

<ol>
<li>不知道在看这篇博客的你有没有发现一个很尴尬的问题:<br/>
书中的解法二得到的是 取值和的集合, 解法三得到的是是否能找到答案的boolean值. <br/>
那如何利用解法二, 解法三得到具体的子数组(最优解)呢?</li>
<li>解法二的我用递归的方式写的时间复杂度? <br/>
如果我递归时, 把计算结果保存到字典里, 不去做重复计算, 那么它的时间复杂度又是多少呢?</li>
</ol>


<p>在知乎提的问题: <a href="https://www.zhihu.com/question/60472041">https://www.zhihu.com/question/60472041</a>  <br/>
希望有好心人帮我回答, 23333</p>

<h3>关于P, NP, NP-complete</h3>

<h3>References:</h3>

<ol>
<li>&lt;编程之美> 2.18 数组分割</li>
<li><a href="http://www.americanscientist.org/issues/pub/2002/3/the-easiest-hard-problem/2">http://www.americanscientist.org/issues/pub/2002/3/the-easiest-hard-problem/2</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hypers 后台开发 每周总结]]></title>
    <link href="http://changchen.me/blog/20170321/hypers-first-week-summary/"/>
    <updated>2017-03-21T00:44:06+11:00</updated>
    <id>http://changchen.me/blog/20170321/hypers-first-week-summary</id>
    <content type="html"><![CDATA[<blockquote><p>在宏路数据HFA(HyperS For Advertising)组开始人生第一份工作, 职场小菜鸟的磕绊前行~~.  <br/>
转眼一周就过去了, 特写下这篇日志记录总结一下每周的总结和反思.</p></blockquote>

<!--more-->


<br>  


<p><code>(DESC, 持续更新中...)</code></p>

<br>


<br>


<h1>第十九周 (17 July 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>前段升级新框架, 把转化管理那块的接口重写一下. 主要把分散各地的方法整合到REST中去, 再配合检查参数和权限的装饰器, 这代码写起来, 真的是轻松愉悦♂.<br/>
REST真的是个好东西, 因为百分之九十的接口都是对一个特定资源做<strong>增删改查</strong>操作, 然后把这些操作都集中起来, 就可以避免写很多重复功能的接口.     <br/>
比如对user的retrieve操作:    <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week19_rest.jpg"></li>
<li>第一次去生产环境上修了bug, 感觉现在才接触生产环境晚的有些过分了, 还是应该主动多去接触自己未接触的领域.</li>
<li>公司搬家咯, 感觉瞬间高大上了, 秀一张图: <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week19_new.jpg"></li>
</ol>


<h3>给下周的自己一些建议</h3>

<ol>
<li>最近总是在想一个问题, 自己的优势(核心竞争力)到底是什么. 最近想出了一丝头绪, 希望未来的日子继续努力~~</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十八周 (10 July 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>这周drinksober请假了, 感觉项目突然就停滞不前了, in a chaos, people just want to make their job done, instead of making it excellent.</li>
<li>在解决一个nginx配置的问题上, 深深的感到自己的无力感. 还是要去培养一下自己快速学习一个新技能的能力.</li>
<li>下周就要搬公司了, 希望有新的开始吧.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十七周 (03 July 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li><strong>周一/周二:</strong> 哎，请了两天假，因为得了急性肠胃炎，吐得快怀疑人生了。慢慢的开始思考身体的重要性和工作的意义。</li>
<li><strong>周三：</strong> 开始做oauth2的开发，今天做了的工作就是把原来对外接口的token验证， 换成统一的拿access token去auth拿用户的方式。<br/>
希望这周能把剩下的工作做完。</li>
<li><strong>周四周五：</strong> 还不错， 把OAuth2.0 sdk写完了，打包传到PyPI上了: <code>pip install hypers-oauth2</code>。  <br/>
从README.md截的图: <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week17_auth2.png"></li>
</ol>


<h3>给下周的自己一些建议</h3>

<ol>
<li>最近有一个明显的发现， 就是自己更博的速度急速下降， 侧面说明学习的脚步渐渐的放缓了。      <br/>
所以还是要在课余多学习提高自己， 充分吸收营养， 才能拉出新鲜饱满的屎。</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十五周 (19 June 2017)</h1>

<p>请假了一周多一天回学校， 参加了毕业典礼，带爸妈去澳洲玩了八天。  <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week15_g.jpg"></p>

<br>


<br>


<hr />

<br>


<br>


<h1>adtracker v1.15 开发结束:</h1>

<p>我完成的任务: <br/>
<img style="max-height:100px" class="lazy" data-original="/images/blog/170325_hypers_summary/v1.15.png"></p>

<p>这个开发周期做了好多任务, 主要还是熟悉报表的流程, 并参与了设计用pandas做报表的新逻辑: <br/>
<img style="max-height:220px" class="lazy" data-original="/images/blog/170325_hypers_summary/1.15_run.png">  <br/>
但感觉慢慢的沦陷为一个增删改查的熟练工, Ahh, 不知道自己的优势到底在哪了.  <br/>
还是要多去学习吧, 不断获取新知识, 追求更好的代码质量。</p>

<br>


<br>


<hr />

<br>


<br>


<h1>第十三周 (05 June 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>周一: 完成了关键词报表用pandas的重写, 写过一个报表后, 再写新的报表会轻松很多.</li>
<li>周二: 关键词报表的大致完成, 抓紧测试.</li>
<li>周三周四周五: 修复了一些bug</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>慢慢的每天陷在赶需求, 补bug的泥ze里, 还是要在平时多去学习新知识吧, 不然只会变得越来越平庸.</li>
<li>买了一本&lt;算法导论>慢慢看, 因为看了一下目录, 每一章都接触过, 但却都没有完全掌握.   <br/>
打算用Python把里边的算法都实现一遍, 打打基本功, 第一章关于<a href="/blog/20170611/python-sorting-algorithms/">排序的笔记</a>.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十二周 (30 May 2017)</h1>

<p>(只有三天, 略..)</p>

<br>


<br>


<hr />

<br>


<br>


<h1>第十一周 (22 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>前端升级新框架了, 一直配合weiwei做对接, 写一些新的接口, 改一下老接口的输入输出格式. <br/>
当去看一些老接口的代码的时候, 有一种打开一个十年没动的箱子一样, 满满的一种历史尘土的味道. 会发现其中有一些写的很坑的地方, 但又不敢大改: <br/>
这也是我最近比较烦的地方, 新来的同事写的代码先不说写的好不好, 固执的不按我们新定的pandas报表逻辑走, 真的让人很头疼. <br/>
写代码完成需求其实是最最基本的要求, 代码的可读性, 健壮性, 扩展性, 可维护性, 还有性能等等都是要仔细考虑, 尽力去追求的地方. <br/>
像我写第一个需求的时候, 我知道我写的不好, 让黄俊给我一起看了三四遍, 要是像这样<strong>虚心求教态度和基本沟通的能力</strong>也没有的话, 在同一个团队里, 真的会让其他人很头疼.</li>
<li>学了一下ipdb, pycharm的debug模式, 重新加载的时候确实有一点慢, 如果只是简单调试的话, ipdb也是挺方便的(cai guai)</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>之前就有想法, 趁前后端分离的机会, 重写项目中不科学的那些代码, 但上两周实在有点忙, 就没有做起来.  <br/>
下周碰到之前的坑代码, 还是要尽力去重写的好一些.</li>
<li>学习学习学习~~ 有吸收才能有进步!</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十周 (15 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>在正确的道路上 <br/>
1) 对各个部分模块化, 减少耦合度. 从而将报表重复逻辑的地方抽出来写成基类, 写出清晰简洁的代码. <br/>
2) 利用pandas处理数据的优势, 配合queryset处理数据.    <br/>
自定义属性报表的EChart和表格部分的写完了, 但当然还是有一些问题, 迫不及待的想去解决了.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>报表部分:

<ul>
<li>queryset_by_register的优化.</li>
<li>生成的query_paras, 忘记放到filter了.</li>
<li>最后生成的seg是pandas Timestamp, 还是需要用sublist 格式显示 &mdash;> 在_after处理?</li>
<li>在sort之后, 返回pagesize大小的row? 竟可能的处理分页的优化.</li>
<li>有些地方写的太复杂了, 简化增加可读性.</li>
<li>单元测试</li>
</ul>
</li>
<li>有空还是要去仔细看下Numpy和Pandas的官方文档, 对库的多一份了解才能写出更简洁高效的代码.</li>
<li>去django的google group问个问题, 我是应该看算法导论, 还是Expert python, 或者python或django的官方文档.<br/>
最近的一些事情还是挺让我受刺激, 感觉自己还是要更努力一点把, 只有这样才能掐住命运的喉咙.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第九周 (08 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>主要看了报表那一部分的代码, 昨天晚上整理了一下上周看的成果和下周的计划, 希望下周可以早点把这部分搞定.  <br/>
临时写在注释里&hellip;  <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week9_plan.png"></li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>今天在网上看到说什么无限零食, 办公环境对程序员都是很肤浅的吸引.  <br/>
真正最核心是吸引力还是 给力的同事 和 给力的项目, 做有意义的事情.  <br/>
希望有一天也能像drinksober一样挑起大梁, 一起把项目打造成自己喜欢满意的样子. <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week9_huang.JPG"></li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第八周 (02 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>开始进行下一个版本的迭代了, 了解需求, 慢慢做起来.  <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week8-jira.png"></li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>在课余时间还是要再努力一些, 例如和黄俊一起看看asyncio, 或者去跑跑步, 出去走走参加活动认识新朋友, 都比在家躺在床上刷微博来的好.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第七周 (24 APR 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<p>1.主要研究了一下django performance and optimization[<a href="/blog/20170503/django-performance-and-optimisation/">笔记</a>], 然后利用这些技巧把一个用的很频繁的方法, 从100多ms降到了20ms.  <br/>
结果看到别人写的代码, 一下子就把数据库的三四万条数据拉出来放到内存里, 然后逻辑还有问题, 我的内心是奔溃的.</p>

<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>之前刚接触项目的时候, 代码看起来也是很困难的, 但慢慢啃下来也没有那么可怕了. 还是要跳出自己的舒适区, 积极地去接触自己对于项目不熟悉的地方, 快速的提高自己.  <br/>
其实阅读源码也是一种能力把.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第六周 (17 APR 2017)</h1>

<p></p>


<h3>完成的工作总结(尝试用提前做计划去督促自己):</h3>

<ol>
<li>周一(计划): 看一下python是如何处理hash table的冲突(散列表), docker的系统学习</li>
<li>周二到周五: >&lt;</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>自己做了共享campaign的需求, 改写了一些权限判断的代码, 打算写一下文档.</li>
<li>专研一下Django orm那块的performance 和 optimization.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>v1.14 开发结束:</h1>

<p>我完成的任务: <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/v1.14.png"></p>

<br>


<br>


<hr />

<br>


<br>


<h1>第五周 (10 APR 2017)</h1>

<p></p>


<h3>完成的工作总结(尝试用提前做计划去督促自己):</h3>

<ol>
<li>周一: 完成共享界面的接口与前端的对接</li>
<li>周二(提前定的计划): 1. 测试对ShareAccount表兼容的测试. 2. 完成 account list 页面. 3. 完成campaign list的三个影响.</li>
<li>周三到周五: 测试反馈的bug的修复.</li>
<li>看了一遍python的内置方法的官方文档. <a href="http://note.youdao.com/noteshare?id=a924458d86c4506f5d2a304e5c754133">笔记</a></li>
<li>学习了一下docker的基本操作.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>提前做计划这个方法还是挺好的, 提高了自己的效率.</li>
<li>这周比较闲, 可以多利用时间去提高自己, 加油~~</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第四周 (3 APR 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>修bug</li>
<li>修bug</li>
<li>修bug</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<p>这周只有三天, 忙碌却收获颇少. 原因在工作总结里可以看到: <br/>
就是把所有时间都花在修复之前写的代码的bug上了, 自己给自己挖了很多坑.    <br/>
给自己的两点建议:</p>

<ol>
<li><code>不要过于消极, 尽力就好:</code> 明明知道要在写代码前做好设计, 但总是做不好, 是不是其实因为的能力有问题.  <br/>
努力去在每次碰键盘前用一张纸把每个细节都想清楚, 慢慢提高, 不着急.</li>
<li><code>花一个小时在纸上写清细节:</code> 出bug是因为需求有些复杂, 光靠凭空想很难考虑到全局. 最好在纸上写下每个细节, 想清楚所有前后关联.</li>
<li>不要写太复杂的测试.. 在测试中修复bug也是一个很痛苦的事情, 不要问我是怎么知道的..</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第三周 (27 Mar 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>最主要的就是, 在黄俊的手把手下, 完成了公司逻辑比较复杂的一些新需求, 并完成了测试. <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week3_sharing.png"></li>
<li>写了一个自动生产API文档(function的<strong>docstr</strong>)的小程序.</li>
<li>阅读了一下django的ORM many to many的文档.[笔记]](/blog/20170405/many-to-many-relation-with-extra-field-django/)  <br/>
因为在公司的逻辑中, 一个用户有多个账号, 一个账号又可以共享给多个用户. 原先的逻辑是用一张表去关联用户和账号的这两张表.  <br/>
我在想能不能用django ORM自带的many to many relation代替, 但把文档读了一下, 发现还是不行.  <br/>
原因是公司的业务逻辑中<strong>用户对账号的关系</strong>还有一个permission的属性, 自带的ORM好像实现不了这个功能.   <br/>
虽然这个想法最后作罢了, 但这种思考和尝试还是很棒的, 应该在编码前多去做这样的思考.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li><code>测试的正确姿势</code>: 测试是很重要的, 但还是要去了解专业的测试逻辑应该是怎么样的, 多去学习而不是一味的埋头写代码.  <br/>
规范的测试和文档对于软件开发来说还是很重要的.</li>
<li><code>别忘了学习</code>: 不要总是着急的去写业务代码, 这周花在学习提高自己的时间还是太少了.  <br/>
例如可以多花点时间去搞清楚这个request来前的来后做的封装细节.  <br/>
好处是万一有什么奇怪的bug, 会更顺手的去解决. 还可以多去学习如何写出Pythonic的代码, 提高代码的可读性和合理性.</li>
<li><code>不要让懒惰侵蚀自己</code>: 差点忘了这最重要的一点: 就是上周下班后一回家, 自己就钻到被窝里. 刷刷微博看看直播, 到一两点然才睡觉.   <br/>
其实我可以去咖啡馆静下心来看看书学习新知识, 去逛街买些新衣服小玩意, 去接触新的文化和人群, 去健身. <br/>
躺倒床上只会让人越躺越累. 在上海一个这样的大都市, 要珍惜提高自己的每个机会.   <br/>
这是我下周<strong>最需要做出的改变</strong>.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第二周 (20 Mar 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>把REST框架的tutorial游览了一下, 大致了解了一下.</li>
<li>周二把RabbitMQ 官方的tutorial读了一遍: <a href="http://note.youdao.com/share/?id=e992e5f73efb1d9098cd7b4e91672cd3&amp;type=note#/">笔记</a></li>
<li>对重构的API那部分写一下单元测试.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>这周慢慢开始写一些公司业务部分的代码了, 但还是要时刻提醒自己, 要<strong>多花点重心在学习上</strong>, 而不是着急者想把任务尽快完成。  <br/>
例如<strong>需求是写django的一些测试用例:</strong>

<ul>
<li>尽力把django的测试机制原理搞清楚。</li>
<li>研究对REST的create retrieve list update四个方法 测试的正确逻辑。</li>
<li>等等..</li>
</ul>
</li>
<li><strong>每日总结:</strong> 感觉这周过的好快, 以后还是每天抽十分钟写一下每天的总结吧, 这样写每周总结的时候也方便一些.</li>
<li><strong>思考后再行动</strong>: 这么多年编程的经历, 最重要的一个真理就是: 在开动编码前, 一定要把整个流程或实现思路想清楚. 换句话说就是: 编码只是占一个"项目"中maybe 30%的比重, never rush to code.</li>
<li><strong>学习清单:</strong> 例如一些基础知识: http协议, tcp/ip协议, epoll/select模型 的深入学习, etc. <br/>
从俊哥身上看到的一个很有趣的&amp;很棒的优点就是他很喜欢看书, 在工作外的时间买些书来看看, 而不是刷刷网页一天就过去了. 我之后要慢慢做起来的.</li>
<li><strong>人情事故:</strong> 就像女朋友说的我有些<strong>自闭</strong>吧. 但有时候, 我只是不喜欢故意去讨好一个人。 举个小小的朋友圈例子: 我知道多给别人点点赞, 或许和那些平时接触不是很多的同事朋友能变成点赞之交, 但我真的太懒了, 不太想去维系这些'友情'。 比如我不太喜欢一个人, 我真的就会表现出来我的冷淡和疏远。 换句话说, 我更喜欢去交真心的朋友, 而不是'friend with benefits'(笑)。 <br/>
但和我的性格也有关系吧, 太敏感了, 有些社交恐惧症. 不太喜欢人与人之间的那种压力, 所以我常常更愿意去选择逃避和独处.   <br/>
当然有些地方还是需要做出一些改变滴, 例如是自己要变得更加positive和open一些, 和别人相处的时候可以稍微找找话题, 遇到同组的同事, 主动打打招呼。 至少不要让别人觉得你是一个很难相处的人.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第一周 (13 Mar 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>Ubuntu工作环境的搭建 和 HFA项目的配置.</li>
<li>Python MRO（Method Resolution Order）<a href="/blog/20170320/python-mro/">笔记</a></li>
<li>初步了解adtracker项目的业务逻辑.</li>
<li>Django Class-based Views了解 <a href="/blog/20170313/class-based-views-notes/">笔记</a></li>
<li>Django REST framework了解 <a href="/blog/20170322/django-rest-framework-hypers/">笔记</a></li>
<li>Django middleware了解</li>
<li>Django 源码深入阅读, 了解如何创建Server和处理Request的整个过程. <a href="/blog/20170318/django-source-code-analysis/">笔记</a></li>
</ol>


<p></p>


<h3>上班亲身经历总结</h3>

<ol>
<li><strong>迷惘的开始:</strong> 第一天去报到, 填了资料, 签了协议卖了身, 就屁颠屁颠的去上班了. 刚到的工位时候, 其实是有些小失望的: 办公的设备实在是有些简陋. 配的笔记本和显示器都有些旧了. 不是都是标配MacBook和Dell 2K显示器的吗, 哈哈
所以个人觉得办公设备还是自己选比较好, 比如显示器. 公司可以给新员工配1000的基础款, 但新员工如果不满意的话, 想要2000的显示器. 没问题, 剩下的差价一人出一半呗, 我自费五百, 公司再出五百, 给新员工配2000的显示器.  <br/>
感觉这样的话还是比较科学一些.</li>
<li><strong>友善的同事:</strong> 虽然心里有些迷惘, 但同事人都挺好的. 特别是无所不知黄俊小哥哥, 帮我换了椅子拿了本子, 第一周也是耐心回答了我无数的问题. 感覺自己运气总是很好, 能遇到耐心厉害的老师. 这些也是我在公司能待下去的最重要原因吧.</li>
<li><strong>保持效率:</strong> 第一周的效率其实还是可以的(打个85分吧), 感觉学了很多东西. 但今天(第二周的周一)效率就有些雪崩了, 不要因为工作久了就混日子. 要努力保持清醒的头脑, 知道自己在学什么做什么, 多去虚心问问题.</li>
</ol>


<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 阅读源码笔记 - Hypers第一周]]></title>
    <link href="http://changchen.me/blog/20170319/django-source-code-analysis/"/>
    <updated>2017-03-19T02:17:07+11:00</updated>
    <id>http://changchen.me/blog/20170319/django-source-code-analysis</id>
    <content type="html"><![CDATA[<blockquote><p>来Hypers上班的第一周, 在看Django的middleware的时候, 对process <code>request, view, template和response</code>的四个过程有些疑惑, 俊哥建议我读一下django的源码.   <br/>
在这篇日志中, 我整理了django从<strong>启动server</strong> &mdash;> <strong>处理Request</strong> &mdash;> <strong>返回response</strong> 的整个<strong>代码流程</strong>.</p></blockquote>

<!--more-->


<br>  


<p>自己做的有道云笔记的链接: <a href="http://note.youdao.com/noteshare?id=465ac1f8ca5a82a9cb998d49bb763df8">http://note.youdao.com/noteshare?id=465ac1f8ca5a82a9cb998d49bb763df8</a></p>

<p><article class="editor-area">
<div class="editor-area" id="noteIFrameContent"><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#393939;font-weight:bold;">Reference: </span></div><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><a href="https://segmentfault.com/a/1190000002450390"><span style="color:#003884;text-decoration:underline;">https://segmentfault.com/a/1190000002450390</span></a></div><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><a href="https://github.com/daoluan/decode-Django"><span style="color:#003884;text-decoration:underline;">https://github.com/daoluan/decode-Django</span></a></div><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-size:18px;font-weight:bold;">基础的一些类:</span></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">WSGIServer &lt;-- HTTPServer &lt;-- SocketServer.TCPServer &lt;-- TCPServer &lt;-- BaseServer</div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">request:    WSGIRequest &lt;-- django.http.HttpRequest</div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">response:   HttpResponse</div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-size:18px;font-weight:bold;">第一步 启动django server:</span><span style="font-size:18px;"> </span><span style="font-size:18px;color:#0d0d0d;"> </span><span style="font-size:18px;color:#df402a;font-weight:bold;text-decoration:underline;">python manage.py runserver</span></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;">os.environ["DJANGO_SETTINGS_MODULE"] = "settings"</span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;">from django.core.management import execute_from_command_line</span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;font-weight:bold;">execute_from_command_line(sys.argv)</span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;font-weight:bold;">run() </span><span style="color:#df402a;">   </span>-<span style="color:#df402a;">   </span><span style="font-weight:bold;text-decoration:underline;">django/core/management/commands/runserver.py</span></div></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;font-weight:bold;">inner_run()</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">1. </span><span style="color:#df402a;font-weight:bold;">handler = self.get_handler(*args, **options) </span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">WSGIHandler:</span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    1) get_handler()</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    2) get_internal_wsgi_application()  -  django/core/servers/basehttp.py</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        	from django.conf import settings</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    	3) return WSGIHandler() -  django/core/wsgi.py</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    </div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">2. </span><span style="color:#df402a;font-weight:bold;">run(self.addr, int(self.port), handler, ipv6=self.use_ipv6, threading=threading) </span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">WSGIServer: 	</span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    django/core/servers/basehttp.py</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">   	1)  <span style="color:#df402a;font-weight:bold;">run(self.addr, int(self.port), handler, ipv6=self.use_ipv6, threading=threading)</span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">httpd_cls</span> --&gt; 获得一个WSGIServer类型</div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)</span> --&gt; WSGIServer</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">2) <span style="color:#df402a;font-weight:bold;">httpd.serve_forever()</span> # while 循环接收Request请求</div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">select model</span></div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        获得 r, w, e --&gt; read, write, error 描述符 --&gt; [], [], []</div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        <br></div></blockquote></blockquote></blockquote><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">当WSGIServer (serve_forever) 接收到Request:</span><span style="color:#df402a;font-weight:bold;"> </span></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="color:#df402a;font-weight:bold;">r, w, e = [&lt;django.core.servers.basehttp.WSGIServer object], [], []</span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="color:#df402a;font-weight:bold;">if self in r: </span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        <span style="color:#df402a;font-weight:bold;">self._handle_request_noblock()</span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="color:#df402a;font-weight:bold;">self.process_request(request, client_address)</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        1) <span style="color:#df402a;font-weight:bold;">t = threading.Thread(target = self.process_request_thread, args = (request, client_address))</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            <br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            # 新建了一个<span style="font-weight:bold;">线程</span>去处理 request.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            <span style="color:#df402a;font-weight:bold;">process_request_thread()    </span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        <br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">                <span style="color:#df402a;font-weight:bold;">self.finish_request(request, client_address)</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            <span style="color:#df402a;font-weight:bold;">线程</span>调用<span style="color:#df402a;font-weight:bold;">finish_request # call WSGIHandler:</span><span style="font-weight:bold;"> </span></div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">BaseServer</span>  --&gt;  <span style="font-weight:bold;">finish_request()</span>  --&gt;  self.RequestHandlerClass(request, client_address, self)</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;"># </span><span style="text-decoration:underline;">python2.7/SocketServer.py</span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">BaseRequestHandler  --&gt;  <span style="font-weight:bold;">self.handle()	# </span><span style="text-decoration:underline;">python2.7/SocketServer.py</span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">WSGIRequestHandler</span>  --&gt;<span style="font-weight:bold;"> handler.run(self.server.get_app())	</span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="text-decoration:underline;"># self.server: WSGIServer;</span>	handler: ServerHandler;	self.server.get_app(): StaticFilesHandler</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">BaseHandler</span>  --&gt; <span style="font-weight:bold;"> self.result = application(self.environ, self.start_response)	</span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"># application: StaticFilesHandler</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">    StaticFilesHandler</span>(WSGIHandler)  --&gt;  <span style="color:#df402a;font-weight:bold;">return self.application(environ, start_response)</span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"># Explicitly shutdown.  socket.close() merely releases the socket and waits for GC to perform the actual close.</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;font-weight:bold;">self.shutdown_request(request)</span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        <br></div></blockquote><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-size:18px;font-weight:bold;">调用 </span><span style="font-size:18px;color:#df402a;font-weight:bold;">WSGIHandler</span><span style="font-size:18px;font-weight:bold;">的整个过程: </span></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">调用 </span><span style="color:#df402a;font-weight:bold;">WSGIHandler(base.BaseHandler)的 __call__ 方法</span><span style="font-weight:bold;"> </span>- (django/core/wsgi.py)</div></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 1:</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        1). self.load_middleware()  -&gt; <span style="font-weight:bold;">Populate middleware lists from settings</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        2). signals.request_started.send(...)  -&gt; fires the dispatcher <span style="font-weight:bold;">signal `request_started` </span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        3). request = self.request_class(environ)  -&gt; <span style="font-weight:bold;">实例WSGIRequest(http.HttpRequest)</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        4). response = <span style="font-weight:bold;">self.get_response(request)  -&gt; Step2</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">       Returns an HttpResponse object for the given HttpRequest</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 2: Request Middleware</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    the middleware methods applied here simply do some processing and decide whether to add, remove or supplement attributes of the request.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    ```python</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    for middleware_method in self._request_middleware:</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        response = middleware_method(request)</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    ```</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 3: 用 RegexURLResolver 处理 requested URL </span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    生成了一个 URL resolver, 在指定的url.py里根据 regex 遍历找到对应的view.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            option1: 如果是include的话, 继续找</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            option2: 找到了的话返回这三个东西: </div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        1. matched item</div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        2. a list of non-named matched groups from the URL (to be used as positional arguments for the view) </div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        3. kwargs. eg. {'template_name': 'registration/login.html'}</div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        </div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    `callback, callback_args, callback_kwargs = resolver_match`</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        这三个 <span style="font-weight:bold;">View 的参数</span>: 1. view的reference 2. args 3. kwargs </div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 4: Apply view middleware </span>(类似Request Middleware)</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    for middleware_method in self._view_middleware:</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        response = middleware_method(request, callback, callback_args, callback_kwargs)</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    </div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">view的三个条件:</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    1) 必须可以被调用的.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    2) 输入: 第一个positional参数必须为django.http.HttpRequest.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    3) 输出: 返回必须为一个django.http.HttpResponse OR raise 一个异常.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 5: Exception Middleware</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">如果在view的执行中遇到异常, 就会执行_exception_middleware list 里的 所有 instance.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 6: Template Response</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    如果response有render属性的话: </div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">               1. 调用template的response middleware</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            2. Render response: 返回TemplateResponse, </div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">                content = template.render(context, self._request)</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">                    &gt;&gt;&gt; context = Context({"my_name": "Dolores"})</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">                    &gt;&gt;&gt; template.render(context)</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">                    "My name is Dolores."</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 7: Apply response middleware, regardless of the response</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 8: </span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">(执行完 handler 的 get_response 方法)</span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">对 Response 设header, cache, etc.</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">生成一个HttpResponse, 它的两个参数:</span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">1. content: </span>一般是TemplateResponse的content (render生成的HTML代码). </div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">2. mime_type: </span>A value for the Content-Type header of the response.  --&gt; <span style="font-weight:bold;">response_headers</span></div></blockquote></blockquote></blockquote></blockquote><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></div>
</article>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Class-based Views Notes (Hypers第一天)]]></title>
    <link href="http://changchen.me/blog/20170314/class-based-views-notes/"/>
    <updated>2017-03-14T00:35:25+11:00</updated>
    <id>http://changchen.me/blog/20170314/class-based-views-notes</id>
    <content type="html"><![CDATA[<blockquote><p>今天第一天到Hypers上班, 看代码才发现django有一个东西叫做<strong>CBV(Class-based views)</strong>. 晚上仔细看看官方的文档, 做一下笔记.</p></blockquote>

<!--more-->


<br>


<h2>基本的概念:</h2>

<p><strong>View</strong>: All views inherit from View Class, it handles linking the view in to the URLs, HTTP method dispatching and other simple features.  <br/>
<strong>RedirectView</strong> is for a simple HTTP redirect. <br/>
<strong>TemplateView</strong> extends the base class to make it also render a template.</p>

<h2>最简单的一个用法:</h2>

<p>```python
from django.conf.urls import url
from django.views.generic import TemplateView</p>

<p>urlpatterns = [</p>

<pre><code>url(r'^about/$', TemplateView.as_view(template_name="about.html")),
</code></pre>

<p>]
```</p>

<h2>Class-based views 相对于 functions的优点:</h2>

<ul>
<li>Organization of code related to specific <strong>HTTP methods</strong> (GET, POST, etc.) can be addressed by separate methods instead of conditional branching.   <br/>
举个栗子:  <br/>
```python

<h1>FBV</h1>

<p>def my_view(request):
  if request.method == &lsquo;GET&rsquo;:
      # <view logic>
      return HttpResponse(&lsquo;result&rsquo;)</p></li>
</ul>


<h1>CBV</h1>

<p>class MyView(View):</p>

<pre><code>def get(self, request):
    # &lt;view logic&gt;
    return HttpResponse('result')
</code></pre>

<p>```
&ndash; Object oriented techniques such as <strong>mixins (multiple inheritance)</strong> can be used to factor code into <strong>reusable components</strong>.</p>

<h2>重点研究TemplateView</h2>

<p><strong>作用</strong>: <strong>Renders</strong> a given template, with the context containing parameters captured in the URL. <br/>
_ <br/>
<strong>整个流程:</strong></p>

<ul>
<li>在urls.py 调用 <code>as_view()</code> (Nothing to worry about. Just accept that the .as_view() is a pretty fine and decent solution :&ndash;))[4]</li>
<li><code>as_view()</code>最后返回的是一个方法(在url匹配的时候执行). The function creates an instance of the class and calls its <code>dispatch()</code> method.</li>
<li><code>dispatch()</code> looks at the request to determine whether it is a GET, POST, etc, and relays the request to a matching method if one is defined, <strong>or</strong> raises HttpResponseNotAllowed if not.  <br/>
_  <br/>
<strong>如何使用:</strong>
```python

<h1>Example urls.py:</h1>

<p>from django.conf.urls import url
from myapp.views import HomePageView</p></li>
</ul>


<p>urlpatterns = [</p>

<pre><code>url(r'^$', HomePageView.as_view(), name='home'),
</code></pre>

<p>]</p>

<h1>Example views.py:</h1>

<p>from django.views.generic.base import TemplateView
from articles.models import Article</p>

<p>class HomePageView(TemplateView):</p>

<pre><code>template_name = "home.html"

def get_context_data(self, **kwargs):
    context = super(HomePageView, self).get_context_data(**kwargs)
    context['latest_articles'] = Article.objects.all()[:5]
    return context
</code></pre>

<p>```</p>

<h2>Reference:</h2>

<p>[1] <a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/base/#templateview">https://docs.djangoproject.com/en/1.10/ref/class-based-views/base/#templateview</a> <br/>
[2] <a href="https://docs.djangoproject.com/en/1.10/topics/class-based-views/">https://docs.djangoproject.com/en/1.10/topics/class-based-views/</a> <br/>
[3] <a href="https://ccbv.co.uk/projects/Django/1.10/django.views.generic.base/TemplateView/">https://ccbv.co.uk/projects/Django/1.10/django.views.generic.base/TemplateView/</a> <br/>
[4] <a href="http://reinout.vanrees.org/weblog/2011/08/24/class-based-views-walkthrough.html">http://reinout.vanrees.org/weblog/2011/08/24/class-based-views-walkthrough.html</a></p>
]]></content>
  </entry>
  
</feed>
