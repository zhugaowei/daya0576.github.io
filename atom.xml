<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Henry Z's blog~]]></title>
  <link href="http://changchen.me/atom.xml" rel="self"/>
  <link href="http://changchen.me/"/>
  <updated>2017-07-23T23:59:02+10:00</updated>
  <id>http://changchen.me/</id>
  <author>
    <name><![CDATA[Daya]]></name>
    <email><![CDATA[daya0576@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python中的静态方法和类方法实例分析]]></title>
    <link href="http://changchen.me/blog/20170716/python-class-method/"/>
    <updated>2017-07-16T03:59:08+10:00</updated>
    <id>http://changchen.me/blog/20170716/python-class-method</id>
    <content type="html"><![CDATA[<blockquote><p>以前准备面试的时候, 有一个经典的python题目, 就是Python里的<code>静态方法(@staticmethod)</code>和<code>类方法(@classmetho)</code>.  <br/>
以前以为是个死记硬背的东西, 但上周在写一个公司的oauth2 sdk的时候竟然用上了, 还是感触颇深的, 用这篇日志记录一下.</p></blockquote>

<!--more-->


<p></p>

<br>  


<h3>我写的python包,主要有这么三个功能:</h3>

<ol>
<li><code>redirect_url = OAuth2Token.redirect(client_id, redirect_uri)</code> <br/>
/authorize接口uri拼接,用于<strong>获取重定向的链接</strong></li>
<li><code>token = OAuth2Token.get(client_id, client_secret, redirect_uri, code)</code> <br/>
授权后, 用的到的code换取access token</li>
<li><code>token_new = token.refresh(self, client_id, client_secret)</code> <br/>
用refresh token换取新access token</li>
</ol>


<br>


<h3>解释:</h3>

<p>声明: 就是一个简单的类, 干掉了敏感信息,而且这个包本来就上传到PyPI, 可以看到源码的. <br/>
我就把代码贴出来做更好的解释：</p>

<p><strong>功能1(redirect)</strong> 我用了<code>静态方法(@staticmethod)</code>, 因为它没有用到Token实例. <br/>
换句话说这个方法放在外边和类里边是一样的. 这个方法虽然没有用到实例, 但它这个类有关, 所以最好放到类里边, 可以使逻辑更加清晰, 美名曰静态方法.</p>

<p><strong>功能2(get)</strong> 我用了<code>类方法(@classmethod)</code>, 因为它是一个创建实例的方法, 它的第一个参数为Token类(cls). <br/>
我对类方法的理解是: 想新建一个或多个实例, 但无法直接调用init方法时, 就可以用类方法(@classmethod).   <br/>
例如传入一个URL来实例化一个Token类, 我们是可以在类外边先对url做操作, 获取到init的所有参数, 再去实例化类. 但这样不就不优雅了, 不是吗? <br/>
其实这就是传说中的工厂设计模式.</p>

<p><strong>功能3(refresh)</strong> 我用了<code>类的实例方法</code>, 它的第一个参数就是当前实例本身(self).  <br/>
因为该方法是对实例进行操作.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Token</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">access_token</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">token_type</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">refresh_token</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">expiration</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">access_token</span> <span class="o">=</span> <span class="n">access_token</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">token_type</span> <span class="o">=</span> <span class="n">token_type</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">refresh_token</span> <span class="o">=</span> <span class="n">refresh_token</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">expiration</span> <span class="o">=</span> <span class="n">expiration</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">redirect</span><span class="p">(</span><span class="n">client_id</span><span class="p">,</span> <span class="n">redirect_uri</span><span class="p">,</span> <span class="n">response_type</span><span class="o">=</span><span class="s">&#39;code&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;fetch redirect url</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        BASE URL: ***</span>
</span><span class='line'><span class="sd">        Request:</span>
</span><span class='line'><span class="sd">            client_id</span>
</span><span class='line'><span class="sd">            redirect_uri</span>
</span><span class='line'><span class="sd">            response_type: code</span>
</span><span class='line'><span class="sd">        Request:</span>
</span><span class='line'><span class="sd">            (Redirect URL)</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">paras</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">client_id</span><span class="o">=</span><span class="n">client_id</span><span class="p">,</span>
</span><span class='line'>            <span class="n">redirect_uri</span><span class="o">=</span><span class="n">redirect_uri</span><span class="p">,</span>
</span><span class='line'>            <span class="n">response_type</span><span class="o">=</span><span class="n">response_type</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;{}/authorize?{}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">BASE_URL</span><span class="p">,</span> <span class="n">parse</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">paras</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">url</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">client_id</span><span class="p">,</span> <span class="n">client_secret</span><span class="p">,</span> <span class="n">redirect_uri</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="n">grant_type</span><span class="o">=</span><span class="s">&#39;authorization_code&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;fetch token</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        POST: ***</span>
</span><span class='line'><span class="sd">        Request:</span>
</span><span class='line'><span class="sd">            header: Content-Type: application/x-www-form-urlencoded</span>
</span><span class='line'><span class="sd">            body:</span>
</span><span class='line'><span class="sd">                client_id</span>
</span><span class='line'><span class="sd">                client_secret</span>
</span><span class='line'><span class="sd">                redirect_uri</span>
</span><span class='line'><span class="sd">                grant_type： ***</span>
</span><span class='line'><span class="sd">                code</span>
</span><span class='line'><span class="sd">        Request:</span>
</span><span class='line'><span class="sd">            access_token, token_type, refresh_token, expiration</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;{}/token&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">BASE_URL</span><span class="p">)</span>
</span><span class='line'>        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;Content-Type&#39;</span><span class="p">:</span> <span class="s">&#39;application/x-www-form-urlencoded&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">client_id</span><span class="o">=</span><span class="n">client_id</span><span class="p">,</span>
</span><span class='line'>            <span class="n">client_secret</span><span class="o">=</span><span class="n">client_secret</span><span class="p">,</span>
</span><span class='line'>            <span class="n">redirect_uri</span><span class="o">=</span><span class="n">redirect_uri</span><span class="p">,</span>
</span><span class='line'>            <span class="n">code</span><span class="o">=</span><span class="n">code</span><span class="p">,</span>
</span><span class='line'>            <span class="n">grant_type</span><span class="o">=</span><span class="n">grant_type</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">parse</span><span class="o">.</span><span class="n">urlencode</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">headers</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cls</span><span class="p">(</span><span class="o">**</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;error&#39;</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="n">APIError</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="s">&#39;error&#39;</span><span class="p">],</span> <span class="n">result</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;error_description&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">access_token</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;access_token&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">token_type</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;token_type&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">refresh_token</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;refresh_token&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">expiration</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;expiration&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">access_token</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">token_type</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">refresh_token</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">expiration</span><span class="p">):</span>
</span><span class='line'>            <span class="k">raise</span> <span class="n">APIError</span><span class="p">(</span><span class="s">&#39;token&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">refresh</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">client_id</span><span class="p">,</span> <span class="n">client_secret</span><span class="p">,</span> <span class="n">grant_type</span><span class="o">=</span><span class="s">&#39;refresh_token&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;refresh token</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        POST: ***</span>
</span><span class='line'><span class="sd">        Request:</span>
</span><span class='line'><span class="sd">            body:</span>
</span><span class='line'><span class="sd">                grant_type: ***</span>
</span><span class='line'><span class="sd">                client_id</span>
</span><span class='line'><span class="sd">                client_secret</span>
</span><span class='line'><span class="sd">                refresh_token</span>
</span><span class='line'><span class="sd">        Response:</span>
</span><span class='line'><span class="sd">            access_token, token_type, refresh_token, expiration</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">=</span> <span class="s">&#39;{}/token&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">BASE_URL</span><span class="p">)</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class='line'>            <span class="n">client_id</span><span class="o">=</span><span class="n">client_id</span><span class="p">,</span>
</span><span class='line'>            <span class="n">client_secret</span><span class="o">=</span><span class="n">client_secret</span><span class="p">,</span>
</span><span class='line'>            <span class="n">refresh_token</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">refresh_token</span><span class="p">,</span>
</span><span class='line'>            <span class="n">grant_type</span><span class="o">=</span><span class="n">grant_type</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="p">{})</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;&lt;Class: {}&gt;</span><span class="se">\n</span><span class="s">&#39;</span> \
</span><span class='line'>               <span class="s">&#39;access_token:     &quot;{}&quot;</span><span class="se">\n</span><span class="s">token_type:       &quot;{}&quot;</span><span class="se">\n</span><span class="s">&#39;</span> \
</span><span class='line'>               <span class="s">&#39;refresh_token:    &quot;{}&quot;</span><span class="se">\n</span><span class="s">expiration:       &quot;{}&quot;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">__class__</span><span class="o">.</span><span class="n">__name__</span><span class="p">,</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">access_token</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">token_type</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">refresh_token</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">expiration</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__repr__</span> <span class="o">=</span> <span class="n">__str__</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<p>-EOF-</p>

<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[P/NP/NPC/NP-Hard 笔记]]></title>
    <link href="http://changchen.me/blog/20170715/p-np-npc-nphard/"/>
    <updated>2017-07-15T01:43:41+10:00</updated>
    <id>http://changchen.me/blog/20170715/p-np-npc-nphard</id>
    <content type="html"><![CDATA[<blockquote><p>NP完全和NP难问题困扰了我好几个月， 用这篇日志记录我最近的思考和学习(<a style='color: red'>红色标注</a>的为待解决的问题)。    <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170714_np/np.png"></p></blockquote>

<!--more-->


<p></p>

<br>  


<blockquote><h3>1. P/NP:</h3>

<p><strong>P: polynomial-time problems</strong> <br/>
P类问题就是能在多项式时间内解决的问题。 <br/>
<strong>NP: non-deterministic polynomial</strong> <br/>
NP问题是指能在多项式时间里验证一个解是否为True的问题  <br/>
e.g. 给出一组输入， 我们可以在多项式时间内验证这个解的答案是‘是’或者‘否’。</p></blockquote>

<br>


<blockquote><h3>2. 归约的概念:</h3>

<p><strong>归约(Reductions)</strong>:《算法导论》上举了这么一个例子。 比如说想在有两个问题：求解一个<strong>一元一次方程</strong>和求解一个<strong>一元二次方程</strong>。 <br/>
前者可以归约到后者，就是说知道如何解一个一次二元方程， 肯定能解出一元一次方程（将一元二次方程的二次项系数设为0）。 <br/>
所以一元二次方程的时间复杂度肯定大于等于一元一次方程，也就是说，只要能多项式时间复杂度去解决一元二次问题，一元一次方程也肯定能用多项式的时间复杂度去解决。 <br/>
<strong>所以:</strong> <br/>
如果可以 多项式时间复杂度从 A(一元一次方程) 归约到 B(一元二次方程) <br/>
B 属于 P &mdash;> A 属于 P <br/>
B 属于 NP &mdash;> B 属于 NP</p></blockquote>

<br>


<blockquote><h3>3. NPC(NP完全问题):</h3>

<p>如何证明一个问题 X 是NP-complete: <br/>
1. X ∈ NP <br/>
2. reduce from know NP-complete  <br/>
那么就要说到第一个被证明为NPC问题，SAT(Boolean satisfiability problem)： <br/>
给定一个个电路， 判断该电路的满足性(所有的输入中， 至少有一个使最后的输出为1)： <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170714_np/boolean.jpg">   <br/>
1. 我们可以证明他是一个NP问题， 因为他的解可以在多项式的时间复杂度内验证。  <br/>
2. 而且它是np难的， 因为它至少比np中的任意问题都难。 <br/>
<strong><a style='color: red'>那么如何证明呢？？好困扰， 待解决中！！！</a></strong>  <br/>
<strong>NPC问题举例：</strong> <br/>
1. null</p></blockquote>

<br>


<blockquote><h3>3. NP-Hard(NP难问题):</h3>

<p>时间复杂度大于或等于所有np问题，既未必可以在多项式时间内<strong>验证一个解的正确性</strong>。<br/>
<strong>NP困难问题举例：</strong> <br/>
1. null</p></blockquote>

<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[排序算法总结]]></title>
    <link href="http://changchen.me/blog/20170611/python-sorting-algorithms/"/>
    <updated>2017-06-11T02:04:35+10:00</updated>
    <id>http://changchen.me/blog/20170611/python-sorting-algorithms</id>
    <content type="html"><![CDATA[<blockquote><p>最近开始看&lt;算法导论>, 一开始就是讲的就是插入排序和merge sort,  <br/>
之前面试的时候, 也被问起过排序算法, 一紧张只想到了两三个,  <br/>
所以乘这个机会回顾了一下大部分的排序算法, <strong>并自己用Python实现了一遍.</strong></p></blockquote>

<!--more-->


<p></p>

<br>     


<h3>各个算法的时间和空间复杂度:</h3>

<p>以前大二的时候, 看到这张图的时候真的头晕, 但现在看起来这个表格真的很精华. <br/>
理解各个算法后就慢慢明白各个算法三种情况(最优, 平均和最坏)的复杂度, 还有空间复杂度都不一样.  <br/>
所以不同不算法都有各自的优势和应用的场景.  <br/>
<img class="lazy" data-original="/images/blog/170610_sorting/time_complexity.png"></p>

<br>


<h3>直接把每个算法实现的解释和感想写在代码的注释里了.</h3>

<p>ps. 代码是用python3.5写的.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">bubble_sort</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;冒泡排序:</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    哈哈, 这个算法真的是满满的回忆, 记得以前大二开算法课接触的最早的几个算法.</span>
</span><span class='line'><span class="sd">    那时是用C写的, 熟练的直接默写出来了.</span>
</span><span class='line'><span class="sd">    当时还没有`l[i], l[j] = l[j], l[i]`这种写法, 需要用tmp来交换两个数字, 也是可以不用tmp哦 :p</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">insert_sort</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;插入排序:</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    从左到右遍历数组, 将每个元素插入它左边的那个(已排好序)数组里</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">l</span><span class="p">)):</span>
</span><span class='line'>        <span class="c"># j: the index of item to compare</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">v</span><span class="p">:</span>
</span><span class='line'>            <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>            <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">selection_sort</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;选择排序:</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    和插入排序不同的是, 它是在遍历数组时, 将元素和它右边数组里的最小值进行交换.   </span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)):</span>
</span><span class='line'>        <span class="nb">min</span> <span class="o">=</span> <span class="n">i</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="n">start</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">v</span> <span class="o">&lt;=</span> <span class="n">l</span><span class="p">[</span><span class="nb">min</span><span class="p">]:</span> <span class="nb">min</span> <span class="o">=</span> <span class="n">j</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">l</span><span class="p">[</span><span class="nb">min</span><span class="p">]</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="nb">min</span><span class="p">],</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;归并排序:</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    去google picture搜一下merge sort的图, 你就明白这个算法了.    </span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>        <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">while</span> <span class="n">a</span> <span class="ow">and</span> <span class="n">b</span><span class="p">:</span>
</span><span class='line'>            <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">else</span> <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">l</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">merge</span><span class="p">(</span><span class="n">merge_sort</span><span class="p">(</span><span class="n">l</span><span class="p">[::</span><span class="mi">2</span><span class="p">]),</span> <span class="n">merge_sort</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">::</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">l</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;快速排序:</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    step 1. 随机选择一个数作为基准, 将输入的数组分为两半</span>
</span><span class='line'><span class="sd">    step 2. 对两个子数组, 继续用step 1的方法进行处理,</span>
</span><span class='line'><span class="sd">            直到到达递归结束的条件: 输入数组长度小于等于1.   </span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">l</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">base</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">left</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">base</span><span class="p">]</span>
</span><span class='line'>        <span class="n">right</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">base</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">quick_sort</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="n">base</span><span class="p">]</span> <span class="o">+</span> <span class="n">quick_sort</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">heap_sort</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;堆排序:</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    这段代码是摘自Python heapq的官方文档.</span>
</span><span class='line'><span class="sd">    先把所有元素push(O(log n))到heap里, 生成一个min-heap.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="kn">from</span> <span class="nn">heapq</span> <span class="kn">import</span> <span class="n">heappush</span><span class="p">,</span> <span class="n">heappop</span>
</span><span class='line'>    <span class="n">h</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
</span><span class='line'>        <span class="n">heappush</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">heappop</span><span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">h</span><span class="p">))]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Built-in sort:   {} --&gt; {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">a</span><span class="p">)))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Bubble sort:     {} --&gt; {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">bubble_sort</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">))))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Insert sort:     {} --&gt; {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">insert_sort</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">))))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Selection sort:  {} --&gt; {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">selection_sort</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">))))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Merge sort:      {} --&gt; {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">merge_sort</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">))))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Heap sort:       {} --&gt; {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">heap_sort</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">))))</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Quick sort:      {} --&gt; {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">quick_sort</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="lazy" data-original="/images/blog/170610_sorting/result.png"></p>

<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyCharm 收藏多年快捷键分享~]]></title>
    <link href="http://changchen.me/blog/20170607/pycharm-shortcut/"/>
    <updated>2017-06-07T00:43:18+10:00</updated>
    <id>http://changchen.me/blog/20170607/pycharm-shortcut</id>
    <content type="html"><![CDATA[<blockquote><p>介绍一些Pycharm中大幅度提高生产力的快捷键, 不看后悔一辈子! (逃)    <br/>
大部分的快捷键在同系列的IDE(JetBrains全家桶)上应该都是能通用的</p></blockquote>

<!--more-->


<p></p>

<br>     


<blockquote><p>友情提示: 点击图片, 显示大图~</p></blockquote>

<br>


<blockquote><h4><code>Alt+Shift+F</code>: 在整个项目中, 或一个目录里进行全局搜索</h4>

<p><img style="max-height:350px" class="lazy" data-original="/images/blog/170606_pycharm_shortcut/0.png"></p></blockquote>

<br>


<blockquote><h4><code>F4</code>: 显示一个类的具体结构.</h4>

<p><img style="max-height:200px" class="lazy" data-original="/images/blog/170606_pycharm_shortcut/1.png"></p></blockquote>

<br>


<blockquote><h4><code>Ctrl+Shift+A</code>: text &mdash;> 执行一些action, 潜力无限, 有待开发.</h4>

<p><img style="max-height:300px" class="lazy" data-original="/images/blog/170606_pycharm_shortcut/2.png"></p></blockquote>

<br>


<blockquote><h4><code>Alt+Enter</code>: 自动 import, 还会做自动优化, 妈妈再也不用担心依赖关系啦</h4>

<p><img style="max-height:200px" class="lazy" data-original="/images/blog/170606_pycharm_shortcut/3.png"></p></blockquote>

<br>


<blockquote><h4><code>Shift(Double-press)</code>: Search everywhere. 我每天使用频率很高的一个快捷键, 可以按最近使用过的文件名, 类名, 方法名等去定位!</h4>

<p><img style="max-height:400px" class="lazy" data-original="/images/blog/170606_pycharm_shortcut/4.png"></p></blockquote>

<br>


<blockquote><h4><code>Ctrl+Alt+Shift+J</code>: Insert Live Template&hellip;插入一段提前配置好的代码!</h4>

<p><img style="max-height:250px" class="lazy" data-original="/images/blog/170606_pycharm_shortcut/5.png"></p></blockquote>

<br>


<blockquote><h4><code>Ctrl+Tab</code>: 和chrome一样的切换标签</h4></blockquote>

<br>


<blockquote><h4><code>Ctrl+x</code>: 不用选择, 直接删除整行代码</h4>

<h4><code>Ctrl+shift+d</code>: 直接复制一行</h4></blockquote>

<br>


<blockquote><h4><code>Ctrl(shift) + +/-</code>: 折叠代码</h4></blockquote>

<br>


<blockquote><h4><code>Alt + Right/Left</code>: 可以按历史记录 移动光标位置. 当看代码看的头晕迷路时, 这个快捷键还是能让你马上找到回家的路.</h4>

<h4><code>Alt + Up/Down</code>: 可以上下移动整行或整块(e.g. 一个if的block)代码</h4></blockquote>

<br>


<blockquote><h4><code>Alt + 鼠标</code> or <code>Shift + Crtl + Alt + 鼠标</code>: 选择多处进行同时编辑, 要是能像sublime那样alt+enter直接选中所有的查找结果就好了(已解决).</h4>

<p><img style="max-height:250px" class="lazy" data-original="/images/blog/170606_pycharm_shortcut/6.png">   <br/>
找到解决办法了! <code>Alt + Ctrl + y</code> 就等同于sublime里的全选所有的occurrences!  <br/>
<code>Alt + y</code>为选中下一个occurrence. <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170606_pycharm_shortcut/8.png"></p></blockquote>

<br>


<blockquote><h4><code>正则搜索的妙用</code>: Perl中$0就代表全部匹配(本身), 所以就能实现同时替换所有搜索结果, 和多处同时编辑异曲同工:</h4>

<p><img style="max-height:250px" class="lazy" data-original="/images/blog/170606_pycharm_shortcut/7_1.png"> <br/>
按<strong>Replace all</strong>之后:   <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170606_pycharm_shortcut/7_2.png"></p></blockquote>

<br>


<blockquote><h4><code>Shift + Tab</code>: 一行或多行的<strong>逆向缩进</strong></h4></blockquote>

<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数组分割(编程之美) HyperS面试题 思考与分享]]></title>
    <link href="http://changchen.me/blog/20170525/partition-problem/"/>
    <updated>2017-05-25T02:34:57+10:00</updated>
    <id>http://changchen.me/blog/20170525/partition-problem</id>
    <content type="html"><![CDATA[<blockquote><p><code>问题描述:</code> <strong>有一个无序, 元素个数为2n的正整数数组. 要求: 如何能把这个数组分割为元素个数为n的两个数组, 并使两个子数组的和最接近.</strong>  <br/>
当时面试的时候, 看完描述想了十秒钟, 只能想到C(2n, n)把所有情况遍历一遍, 想不到特别简单的算法, 就直接放弃了.. 面试官问我应该怎么做呢, 我只能靠直觉说用动态规划吧.  <br/>
虽然现在早就入职了, 但终于有时间重新思考这个问题, 并用这篇日志记录下来.</p></blockquote>

<!--more-->


<p></p>

<br>  


<blockquote><p>这道面试题其实来自 <code>编程之美 2.18 数组分割</code>, 讽刺的是我以前很早买过这本书, 却没有仔细阅读~~</p></blockquote>

<br>


<h3>方法一:</h3>

<p>Simple greedy algorithm:</p>

<p>Step1: 将这个数组进行排序. <br/>
Step2: 按奇偶划分为两个数组: l1: [a1, a3, a5, ..] 和 l2: [a2, a4, a6, ..]  <br/>
Step3: 遍历这两个数组, 找出一对数进行交换, 使得<code>Sum(l1)</code>和<code>Sum(l2)</code>的差值最小. <br/>
Step4: 重复Step3操作, 直到找不到可以让差值更小的交换.</p>

<p><strong>缺点: </strong> 这样找到的两个子数组并不能保证是最优解. <br/>
我自己简单写了一下Python代码, 供更好的理解.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">17</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">method1</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># 先将所有元素排序, 按奇偶划分为两个数组:</span>
</span><span class='line'>    <span class="c"># [a1, a3, a5, ..] 和 [a2, a4, a6, ..]</span>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span> <span class="o">=</span> <span class="n">l</span><span class="p">[::</span><span class="mi">2</span><span class="p">],</span> <span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">::</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;sum(l1) - sum(l2):&#39;</span><span class="p">,</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l1</span><span class="p">)</span> <span class="o">-</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l2</span><span class="p">))</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
</span><span class='line'>        <span class="n">swp</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">sub</span> <span class="o">=</span> <span class="n">sub_tmp</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l1</span><span class="p">)</span> <span class="o">-</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l2</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">l1</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">l2</span><span class="p">):</span>
</span><span class='line'>                <span class="c"># x与y交换之后, SUM(l1) - SUM(l2):</span>
</span><span class='line'>                <span class="c">#   new_sum1 = sum(l1) - x + y</span>
</span><span class='line'>                <span class="c">#   new_sum2 = sum(l2) - y + x</span>
</span><span class='line'>                <span class="c">#   new_sub = new_sum1 - new_sum2 = sum(l1) - sum(l2) - 2x + 2y</span>
</span><span class='line'>                <span class="n">new_sub</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">y</span><span class="p">)</span> <span class="o">-</span> <span class="n">sub</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">new_sub</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">sub_tmp</span><span class="p">):</span>
</span><span class='line'>                    <span class="n">swp</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">sub_tmp</span> <span class="o">=</span> <span class="n">new_sub</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">sub</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">abs</span><span class="p">(</span><span class="n">sub_tmp</span><span class="p">):</span>
</span><span class='line'>            <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">swp</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">swp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>            <span class="n">l1</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">l2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">l2</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">l1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">swapping l1[{}] and l2[{}]&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">))</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&#39;sum(l1) - sum(l2):&#39;</span><span class="p">,</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l1</span><span class="p">)</span> <span class="o">-</span> <span class="nb">sum</span><span class="p">(</span><span class="n">l2</span><span class="p">))</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">method1</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">L</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<br>


<h3>方法二:</h3>

<p>分割为两个数组, 并使他们的和最接近 == 从2n个数中挑出n个数, 使他们的和最接近与所有整数的之和的一半. <br/>
书中对这个方法二的描述也是很令人费解, 我总结了一下:</p>

<p><strong>定义:</strong> <br/>
sum_set(k, i): 从k个整数中找出i个元素的和 的集合. <br/>
令L为输入的数组, 令2N为数组长度:</p>

<ol>
<li><strong>sum_set(2N, 1):</strong> 从2N个元素中取一个元素, 得到的和的集合</li>
<li><strong>sum_set(2N, 2N):</strong> 从2N个元素中取2N个元素, 得到的和的集合</li>
<li><strong>sum_set(2N, i):</strong> S(2N-1, i) | {x+L[k-1] for x in S(2N-1, i-1)}   <br/>
<strong>大致意思就是sum_set(2N, i)可以分解为 第k个元素 选或者不选 的情况</strong></li>
</ol>


<p><strong>举个例子!!!</strong> <br/>
L = [1, 2, 3, 4]</p>

<ol>
<li>sum_set(4, 1) = {1, 2, 3, 4}</li>
<li>sum_set(4, 4) = {1+2+3+4} = {10}</li>
<li>sum_set(4, 2) <br/>
= sum_set(3, 2) | {x+4 for x in sum_set(3, 1)}  <br/>
= (sum_set(2, 2) | {x+3 for x in sum_set(2, 1)}) | {1+4, 2+4, 3+4}  <br/>
= ({1+2} | {1+3, 2+3}}) | {5, 6, 7}     <br/>
= {3, 4, 5, 6, 7}</li>
</ol>


<p>书中是用for循环来写的, 但我感觉这种DP一般用递归会更加清晰, 就写了这个版本(当然可以加cache做优化, 但我主要是为了展示思路就懒得写了, 可以参考我<a href="http://changchen.me/blog/20160915/dynamic-programming/">关于动态规划的这篇日志</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">method2</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">set</span><span class="p">(</span><span class="n">L</span><span class="p">[:</span><span class="n">k</span><span class="p">])</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="n">i</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span><span class="nb">sum</span><span class="p">(</span><span class="n">L</span><span class="p">[:</span><span class="n">k</span><span class="p">])}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># S(k, i) = S(k-1, i) U {A[k] + x | x属于S(k-1, i-1) }</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">method2</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="o">|</span> <span class="p">{</span><span class="n">i</span><span class="o">+</span><span class="n">L</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">method2</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">17</span><span class="p">]</span>
</span><span class='line'>    <span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">method2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="p">,</span> <span class="n">N</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为每一步都拆成了两种情况(第k个元素 被选中|没被选中)进行递归，所以<strong>时间复杂度为O(2<sup>N</sup>)</strong>. <br/>
要是加cache了话(把计算过的结果放在字典里), 时间复杂度是O(max(k)*max(i))=O(N<sup>2</sup>)?</p>

<p>但我总觉得<code>{i+L[k-1] for i in method2(k-1, i-1)}</code>的时间复杂度是不是没有考虑进去???</p>

<p>原书中的写法, 测试过了, 和递归的结果是一模一样的:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">method2_o</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">Heap</span><span class="p">,</span> <span class="n">L</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">i_max</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i_max</span><span class="o">+</span><span class="mi">1</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">Heap</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
</span><span class='line'>                <span class="n">Heap</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">v</span><span class="o">+</span><span class="n">L</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<br>


<h3>方法三:</h3>

<p>方法二的时间复杂度是指数级的, 肯定是不能接受的. <br/>
按照书上写了第三种方法, <strong>时间复杂度为O(N<sup>2</sup>*Sum)</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">method3</span><span class="p">(</span><span class="n">isOk</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># isOk[i][v]: bool(从数组中取i个数, 得到sum为v)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">L</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">)):</span>
</span><span class='line'>                <span class="n">sub</span> <span class="o">=</span> <span class="n">v</span> <span class="o">-</span> <span class="n">L</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">sub</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">isOk</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">sub</span><span class="p">]:</span>
</span><span class='line'>                    <span class="n">isOk</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">17</span><span class="p">]</span>
</span><span class='line'>    <span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">isOk</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">N</span><span class="o">+</span><span class="mi">1</span><span class="p">)}</span>
</span><span class='line'>    <span class="n">isOk</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>    <span class="n">method3</span><span class="p">(</span><span class="n">isOk</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="k">print</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">isOk</span><span class="o">.</span><span class="n">items</span><span class="p">()]</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<br>


<h3>总结(TODO):</h3>

<ol>
<li>不知道在看这篇博客的你有没有发现一个很尴尬的问题:<br/>
书中的解法二得到的是 取值和的集合, 解法三得到的是是否能找到答案的boolean值. <br/>
那如何利用解法二, 解法三得到具体的子数组(最优解)呢?</li>
<li>解法二的我用递归的方式写的时间复杂度? <br/>
如果我递归时, 把计算结果保存到字典里, 不去做重复计算, 那么它的时间复杂度又是多少呢?</li>
</ol>


<p>在知乎提的问题: <a href="https://www.zhihu.com/question/60472041">https://www.zhihu.com/question/60472041</a>  <br/>
希望有好心人帮我回答, 23333</p>

<h3>关于P, NP, NP-complete</h3>

<h3>References:</h3>

<ol>
<li>&lt;编程之美> 2.18 数组分割</li>
<li><a href="http://www.americanscientist.org/issues/pub/2002/3/the-easiest-hard-problem/2">http://www.americanscientist.org/issues/pub/2002/3/the-easiest-hard-problem/2</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[饿了吗 一道面试题分享和思考~]]></title>
    <link href="http://changchen.me/blog/20170515/ele-interview-solution/"/>
    <updated>2017-05-15T01:46:27+10:00</updated>
    <id>http://changchen.me/blog/20170515/ele-interview-solution</id>
    <content type="html"><![CDATA[<blockquote><p>之前在上海面试后端开发的时候, 面试官问了一个数据库相关的问题: <br/>
有这么一张表: 里边存着所有用户的登录信息, 例如用户名和登录时间. <br/>
请问如何找出<strong>所有用户最近登录</strong>的记录呢?</p></blockquote>

<!--more-->


<br>  


<h3>sql:</h3>

<p>用sql其实很简单, 就是先按时间排个序, 再按用户id groupby一下就行了.</p>

<br>


<h3>orm:</h3>

<p>在django的orm中也是一个道理, 可以用annotate: <br/>
<img style="max-height:500px" class="lazy" data-original="/images/blog/170515_ele/annotate.png"></p>

<br>


<h3>举个栗子:</h3>

<p>献个丑, 上周写的公司报表部分的代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">register</span><span class="p">,</span> <span class="n">queryset</span> <span class="ow">in</span> <span class="n">queryset_by_register</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># 根据value和次级维度进行groupby, 生成以它们为索引的字典.</span>
</span><span class='line'>    <span class="n">fields_compute</span> <span class="o">=</span> <span class="p">[</span><span class="n">Sum</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">header</span><span class="o">.</span><span class="n">index_action</span><span class="p">]</span>
</span><span class='line'>    <span class="n">queryset</span> <span class="o">=</span> <span class="n">queryset</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">groupby</span><span class="p">)</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="o">*</span><span class="n">fields_compute</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">result</span><span class="p">[</span><span class="n">register</span><span class="p">]</span> <span class="o">=</span> <span class="n">queryset</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django filter 的一个令人震惊的小细节, 不转不是中国人!(逃..)]]></title>
    <link href="http://changchen.me/blog/20170504/django-filter-trick/"/>
    <updated>2017-05-04T01:40:57+10:00</updated>
    <id>http://changchen.me/blog/20170504/django-filter-trick</id>
    <content type="html"><![CDATA[<blockquote><p>最近在看django的官方文档的时候, 看到filter()需要注意的地方: <br/>
<code>Blog.objects.filter(cond1, cond2)</code> <br/>
和 <br/>
<code>Blog.objects.filter(cond1).filter(cond2))</code>的结果竟然不同.  <br/>
仔细看了许久才明白其中的差异, 特写下这篇日志来分享一下.</p></blockquote>

<!--more-->


<br>  


<p>关于这个topic的官方的文档: <a href="https://docs.djangoproject.com/en/1.11/topics/db/queries/#spanning-multi-valued-relationships">https://docs.djangoproject.com/en/1.11/topics/db/queries/#spanning-multi-valued-relationships</a>
我简化了一下, 让它变得更加简单明了: <br/>
笔记在线连接: <a href="http://note.youdao.com/noteshare?id=6df5d321962c781353aa3a87dea7c215">http://note.youdao.com/noteshare?id=6df5d321962c781353aa3a87dea7c215</a></p>

<br>


<h3>Model:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Blog</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Entry</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">blog</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Blog</span><span class="p">)</span>
</span><span class='line'>    <span class="n">headline</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pub_year</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<h3>populate的一些数据:</h3>

<p>Entry: <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170503_django_filter/1.png"></p>

<p>Blog:  <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170503_django_filter/2.png"></p>

<br>


<h3>执行结构:</h3>

<p><img style="max-height:250px" class="lazy" data-original="/images/blog/170503_django_filter/3.png"></p>

<p><img style="max-height:250px" class="lazy" data-original="/images/blog/170503_django_filter/4.png"></p>

<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 性能优化官方文档笔记(主要针对ORM)]]></title>
    <link href="http://changchen.me/blog/20170503/django-performance-and-optimisation/"/>
    <updated>2017-05-03T23:34:09+10:00</updated>
    <id>http://changchen.me/blog/20170503/django-performance-and-optimisation</id>
    <content type="html"><![CDATA[<blockquote><p>最近看了django关于性能优化的文档:     <a href="https://docs.djangoproject.com/en/1.11/topics/performance/">https://docs.djangoproject.com/en/1.11/topics/performance/</a> <br/>
<a href="https://docs.djangoproject.com/en/1.8/topics/db/optimization/">https://docs.djangoproject.com/en/1.8/topics/db/optimization/</a> <br/>
整理了一下笔记, 并写下几点比较深的感触<strong>和我优化django代码的总结</strong>.</p></blockquote>

<br>


<!--more-->


<br>


<h3>1. 你的时间才是最宝贵的:</h3>

<p>文档里的这句话还是挺有意思的(自己的时间和性能优化的trade-off): Your own time is a valuable resource, more precious than CPU time. Some improvements might be too difficult to be worth implementing, or might affect the portability or maintainability of the code. Not all performance improvements are worth the effort.</p>

<br>


<br>


<h3>2. 最重要的原则: Work at the appropriate level</h3>

<p>意思就是说要在对应的level(M V C)做对应的事. e.g. 如果计算court, 在最低的数据库level里是最快的 (如果只需要知道此记录是否存在的话, 用<code>exists()</code>会更快). <br/>
但要<code>注意</code>: queryset是lazy的, 所以有时候在higher level(例如模板)里控制queryset是否真的执行, 说不定会更高效. <br/>
_ <br/>
下面这段代码很好的解释了不同level的意思:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># QuerySet operation on the database</span>
</span><span class='line'><span class="c"># fast, because that&#39;s what databases are good at</span>
</span><span class='line'><span class="n">my_bicycles</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># counting Python objects</span>
</span><span class='line'><span class="c"># slower, because it requires a database query anyway, and processing</span>
</span><span class='line'><span class="c"># of the Python objects</span>
</span><span class='line'><span class="nb">len</span><span class="p">(</span><span class="n">my_bicycles</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Django template filter</span>
</span><span class='line'><span class="c"># slower still, because it will have to count them in Python anyway,</span>
</span><span class='line'><span class="c"># and because of template language overheads</span>
</span><span class='line'>\<span class="p">{</span>\<span class="p">{</span> <span class="n">my_bicycles</span><span class="o">|</span><span class="n">length</span> \<span class="p">}</span>\<span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<br>


<h3>3. 用database中传统的优化手段</h3>

<ol>
<li>加索引. 对你经常要用的字段进行加索引, 会大大的提升查找数据(filter(), exclude(), order_by(), etc.)的速度, 毕竟O(1)或O(logn)对于O(n)相差还是很大的.</li>
<li>使用合适的字段类型. 例如你的数据多到几亿条了, 合适的字段也会帮你节省很多的空间.</li>
</ol>


<br>


<br>


<h3>4. 理解Django中的QuerySets</h3>

<p><strong>对于queryset lazy特性的说明:</strong> <br/>
这段代码看上去对数据库进行了三次查找, 但其实只在最后一行的时候执行了数据库的操作.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="n">Entry</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">headline__startswith</span><span class="o">=</span><span class="s">&quot;What&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">pub_date__lte</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">())</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">exclude</span><span class="p">(</span><span class="n">body_text__icontains</span><span class="o">=</span><span class="s">&quot;food&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ps.上边的这种多条件查询, 官方推荐这种写法:</span>
</span><span class='line'><span class="n">Entry</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">headline__startswith</span><span class="o">=</span><span class="s">&#39;What&#39;</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">exclude</span><span class="p">(</span>
</span><span class='line'>    <span class="n">pub_date__gte</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
</span><span class='line'><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">pub_date__gte</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2005</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>那么问题来了</strong>, 既然queryset是lazy的, queryset<a href="https://docs.djangoproject.com/en/1.8/ref/models/querysets/#when-querysets-are-evaluated">什么时候会被evaluate呢</a>?</p>

<ol>
<li>Iteration, ie. 对Queryset进行For循环的操作.</li>
<li><a href="https://docs.djangoproject.com/en/1.8/topics/db/queries/#limiting-querysets">slicing</a>, e.g. <code>Entry.objects.all()[:5]</code>, 获取queryset中的前五个对象, 相当于sql中的<code>LIMIT 5</code></li>
<li>picling/caching</li>
<li>repr/str</li>
<li>len (Note: 如果你只想知道这个queryset结果的长度的话, 最高效的还是在数据库的层级调用count()方法, 也就是sql中的COUNT(). )</li>
<li>list()</li>
<li>bool()</li>
</ol>


<p>以上的情况一旦发生, 就会查询数据库并生成cache(<strong>生成的cache就存在这个queryset对象之内的</strong>),  <br/>
之后再对queryset做以上的操作就就不用再重新hit数据库进行查询了.)</p>

<p><strong>举个栗子: </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">queryset</span> <span class="o">=</span> <span class="n">Entry</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">([</span><span class="n">p</span><span class="o">.</span><span class="n">headline</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">queryset</span><span class="p">])</span> <span class="c"># Evaluate the query set.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">([</span><span class="n">p</span><span class="o">.</span><span class="n">pub_date</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">queryset</span><span class="p">])</span> <span class="c"># Re-use the cache from the evaluation.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意! 不会cache的情况:</strong> <br/>
Specifically, this means that limiting the queryset using an array slice or an index will not populate the cache. <br/>
意思就是说queryset[5]和queryset[:5]是不会生成cache的. 还有exists()和iterator()这样的也不会生成cache.  <br/>
<strong>举个栗子:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">queryset</span> <span class="o">=</span> <span class="n">Entry</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">queryset</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="c"># Queries the database</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">queryset</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="c"># Queries the database again</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">queryset</span> <span class="o">=</span> <span class="n">Entry</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="n">entry</span> <span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">queryset</span><span class="p">]</span> <span class="c"># Queries the database</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">queryset</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="c"># Uses cache</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">queryset</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="c"># Uses cache</span>
</span></code></pre></td></tr></table></div></figure>


<p>最近发现<code>values</code>和<code>values_list</code>这两个方法也会重新查询数据库, 不知道是为什么.  <br/>
TODO: 有空看一下 具体的实现原理. <br/>
_ <br/>
<strong>研究的结果:</strong> <br/>
当调用values或values_list的时候, 会生成一个新的queryset with no cache.  <br/>
也就是说, 除了上边说到的七种会产生cache的情况, 其他都会重新去数据库拿数据.  <br/>
<img style="max-height:350px" class="lazy" data-original="/images/blog/170503_django_performace/disqus.png"></p>

<br>


<br>


<h3>5. 数据库层级的优化的总结</h3>

<p>官方的文档介绍了很多, 我写几点最有效的和最常用的:</p>

<ul>
<li>利用<a href="https://docs.djangoproject.com/en/1.8/topics/performance/#understanding-laziness">queryset lazy的特性</a>去优化代码, 尽可能的减少连接数据库的次数.</li>
<li>如果查出的queryset只用一次, 可以使用iterator()去来防止占用太多的内存, e.g.<code>for star in star_set.iterator(): print(star.name)</code>.  <br/>
感兴趣可以看看ModelIterable中重写的<code>__iter__</code>方法.</li>
<li>尽可能把一些数据库层级的工作放到数据库, 例如使用filter/exclude, F, annotate, aggregate, etc. <br/>
aggregate: <a href="https://docs.djangoproject.com/en/1.11/topics/db/aggregation/#cheat-sheet">https://docs.djangoproject.com/en/1.11/topics/db/aggregation/#cheat-sheet</a> <br/>
F(): getting the database, rather than Python, to do work</li>
<li>一次性拿出所有你要的数据, 不去取那些你不需要的数据. <br/>
意思就是要巧用select_related(), prefetch_related() 和 values_list(), values(). <br/>
如果不用select_related的话, 去取外键的属性就会连数据再去查找. <br/>
如果只需要id字段的话, 用values_list(&lsquo;id&rsquo;, flat=True)也能节约很多资源.</li>
</ul>


<div style='margin-left: 20px'>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ModelA</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ModelB</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">ForeignKey</span><span class="p">(</span><span class="n">ModelA</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">ModelB</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">select_related</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span> <span class="c"># Forward ForeignKey relationship</span>
</span><span class='line'><span class="n">ModelA</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">prefetch_related</span><span class="p">(</span><span class="s">&#39;modelb_set&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">all</span><span class="p">()</span> <span class="c"># Reverse ForeignKey relationship</span>
</span></code></pre></td></tr></table></div></figure></div>


<ul>
<li>bulk(批量)地去insert update和delete数据.</li>
<li>查找一条数据时, 尽量用有索引的字段去查询, O(1)或O(log n) 和 O(n)差别还是很大的.</li>
<li>用<code>count()</code>代替<code>len(queryset)</code>, 用<code>exists()</code>代替<code>if queryset:</code></li>
</ul>


<br>


<br>


<h3>6. 解决性能问题的具体方法:</h3>

<ul>
<li>connection.queries: <br/>
可以利用这两两句代码来分析你的代码的sql执行情况和花费时间:</li>
</ul>


<div style='margin-left: 20px'>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">connection</span>
</span><span class='line'><span class="n">connection</span><span class="o">.</span><span class="n">queries</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">[{</span><span class="s">&#39;sql&#39;</span><span class="p">:</span> <span class="s">&#39;SELECT polls_polls.id, polls_polls.question, polls_polls.pub_date FROM polls_polls&#39;</span><span class="p">,</span>
</span><span class='line'>     <span class="s">&#39;time&#39;</span><span class="p">:</span> <span class="s">&#39;0.002&#39;</span><span class="p">}]</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">reset_queries</span>
</span><span class='line'><span class="n">reset_queries</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ul>
<li><p><strong>django-debug-toolbar</strong>: <br/>
一个在github上有四千多个星星的开源项目: <a href="https://github.com/dcramer/django-devserver">https://github.com/dcramer/django-devserver</a> <br/>
很棒的一个可视化的工具, 但缺点是只能处理<code>text/html</code>类型的response, 因为是通过中间件修改返回的html代码实现的.     <br/>
<strong>解决办法:</strong> 可以再使用这个库: <a href="https://github.com/recamshak/django-debug-panel">django-debug-panel</a>,  <br/>
再配合链接中最后的chrome插件使用, 就可以查看所有异步请求的详细信息! <br/>
如图: <br/>
<img style="max-height:350px" class="lazy" data-original="/images/blog/170503_django_performace/IMG_3017.PNG">  <br/>
<strong>优点:</strong></p>

<ol>
<li> 统计了总的SQL查询时间.</li>
<li> <strong>重复查询的sql的数量, 在每条sql详细信息中显示重复的次数</strong>.</li>
<li> <strong>执行sql的具体代码位置!!!</strong></li>
<li> sql 语句的高亮</li>
<li> sql 查询到的数据结果.</li>
</ol>
</li>
</ul>


<div style='margin-left: 20px'>
配置参考:   
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#debug_toolbar settings</span>
</span><span class='line'><span class="k">if</span> <span class="n">DEBUG</span><span class="p">:</span>
</span><span class='line'>    <span class="n">INTERNAL_IPS</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;127.0.0.1&#39;</span><span class="p">,)</span>
</span><span class='line'>    <span class="n">MIDDLEWARE_CLASSES</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>        <span class="c"># &#39;debug_toolbar.middleware.DebugToolbarMiddleware&#39;,</span>
</span><span class='line'>        <span class="s">&#39;debug_panel.middleware.DebugPanelMiddleware&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span> <span class="o">+</span> <span class="n">MIDDLEWARE_CLASSES</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">INSTALLED_APPS</span> <span class="o">+=</span> <span class="p">(</span>
</span><span class='line'>        <span class="s">&#39;debug_toolbar&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;debug_panel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">settings</span><span class="o">.</span><span class="n">DEBUG</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">debug_toolbar</span>
</span><span class='line'>    <span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^__debug__/&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">debug_toolbar</span><span class="o">.</span><span class="n">urls</span><span class="p">)),</span>
</span><span class='line'>    <span class="p">]</span> <span class="o">+</span> <span class="n">urlpatterns</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<ul>
<li><p>django-devserver <br/>
项目github主页: <a href="https://github.com/drinksober/django-devserver">https://github.com/drinksober/django-devserver</a> <br/>
这个项目好久没有维护了..已经跑不起来了. 可以试试同事的修复版: <br/>
<a href="https://github.com/drinksober/django-devserver">https://github.com/drinksober/django-devserver</a></p></li>
<li><p><strong>line profiler:</strong>  <br/>
其实最好用的还是用line profiler去找程序的瓶颈:  <br/>
效果如图所示, 显示了一个方法内哪行代码运行的时间最久:  <br/>
<img style="max-height:350px" class="lazy" data-original="/images/blog/170503_django_performace/profile_liner.png">  <br/>
使用方法(从同事黄俊那偷来的代码):</p></li>
</ul>


<div style='margin-left: 20px'>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Line_Profiler</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;put @profile on ur functions&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">follow</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">follow</span> <span class="o">=</span> <span class="n">follow</span> <span class="ow">or</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">profiled_func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>            <span class="n">line_profiler</span> <span class="o">=</span> <span class="n">LineProfiler</span><span class="p">()</span>
</span><span class='line'>            <span class="n">line_profiler</span><span class="o">.</span><span class="n">add_function</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">line_profiler</span><span class="o">.</span><span class="n">add_function</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">follow</span><span class="p">)</span>
</span><span class='line'>            <span class="n">line_profiler</span><span class="o">.</span><span class="n">enable_by_count</span><span class="p">()</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">line_profiler</span><span class="o">.</span><span class="n">disable_by_count</span><span class="p">()</span>
</span><span class='line'>            <span class="n">line_profiler</span><span class="o">.</span><span class="n">print_stats</span><span class="p">(</span><span class="n">stripzeros</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">functools</span><span class="o">.</span><span class="n">wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)(</span><span class="n">profiled_func</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">__builtin__</span><span class="o">.</span><span class="n">profile</span> <span class="o">=</span> <span class="n">Line_Profiler</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>
</div>


<br>


<br>


<h3>7.举个栗子:</h3>

<p>最近重新写了一个项目里很常用的方法(之前也是我写的, 但感觉稍微有些慢), 利用上文说的一些知识, 把执行时间从100多ms降到了20ms.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">users</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">add_self</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">add_share</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">select_id</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return 当前用户能看到的所有用户, 返回queryset, 以便做性能优化:</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    参数:</span>
</span><span class='line'><span class="sd">        1. add_self:  是否添加当前用户(self).</span>
</span><span class='line'><span class="sd">        2. add_share: 是否添加因为共享(account/campaign)而可见的用户. e.g. u2共享a1给u1, u1.users(add_share=True)就能看到u2</span>
</span><span class='line'><span class="sd">        3. select_id: 是否只取id字段</span>
</span><span class='line'><span class="sd">    逻辑:</span>
</span><span class='line'><span class="sd">        1. add_share=False 时:</span>
</span><span class='line'><span class="sd">            +----------+-------------------------------------+</span>
</span><span class='line'><span class="sd">            | Type     | 可见的用户集合                        |</span>
</span><span class='line'><span class="sd">            +----------+-------------------------------------+</span>
</span><span class='line'><span class="sd">            | Root     | 所有 [Advanced, Member] - blacklist |</span>
</span><span class='line'><span class="sd">            +----------+-------------------------------------+</span>
</span><span class='line'><span class="sd">            | Admin    | 同组 [Advanced, Member] - blacklist |</span>
</span><span class='line'><span class="sd">            +----------+-------------------------------------+</span>
</span><span class='line'><span class="sd">            | other    | []                                  |</span>
</span><span class='line'><span class="sd">            +----------+-------------------------------------+</span>
</span><span class='line'><span class="sd">        2. add_share=True 时:</span>
</span><span class='line'><span class="sd">            利用当前用户能看到的所有accounts, 获取创建它们的用户(permission=2)</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="c"># 1. users_shared</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">add_share</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># 共享给该用户的account的主人们</span>
</span><span class='line'>        <span class="n">aps</span> <span class="o">=</span> <span class="n">AccountPermission</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span>
</span><span class='line'>            <span class="n">account__status</span><span class="o">=</span><span class="s">&#39;ACTIVE&#39;</span><span class="p">,</span> <span class="n">permission</span><span class="o">=</span><span class="s">&#39;2&#39;</span><span class="p">,</span> <span class="n">account__in</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">accounts</span><span class="p">()</span>
</span><span class='line'>        <span class="p">)</span><span class="o">.</span><span class="n">select_related</span><span class="p">(</span><span class="s">&#39;share_user&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">values_list</span><span class="p">(</span><span class="s">&#39;share_user__id&#39;</span><span class="p">,</span> <span class="n">flat</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">users_shared</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">id__in</span><span class="o">=</span><span class="n">aps</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">users_shared</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">none</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 2. users</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">score</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="n">query_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">role__in</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;ADVANCED&#39;</span><span class="p">,</span> <span class="s">&#39;MEMBER&#39;</span><span class="p">])</span>
</span><span class='line'>        <span class="c"># Admin</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">score</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">query_dict</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">usergroup</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">usergroup</span><span class="p">)</span>
</span><span class='line'>        <span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="o">**</span><span class="n">query_dict</span><span class="p">)</span><span class="o">.</span><span class="n">exclude</span><span class="p">(</span><span class="n">id__in</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">blacklist</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">users</span> <span class="o">=</span> <span class="n">users</span> <span class="o">|</span> <span class="n">users_shared</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 控制是否添加本身, 主要是user1.has_permission(user1)的时候用到</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">add_self</span><span class="p">:</span>
</span><span class='line'>        <span class="n">users</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">exclude</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">users</span> <span class="o">|=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 过滤停用的用户:</span>
</span><span class='line'>    <span class="n">users</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">is_active</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">usergroup__status</span><span class="o">=</span><span class="s">&#39;ACTIVE&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">users</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 大部分情况下只需要id. 用户列表很多时, 可以大幅度提高性能.</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">select_id</span><span class="p">:</span>
</span><span class='line'>        <span class="n">users</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">values_list</span><span class="p">(</span><span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="n">flat</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">set</span><span class="p">(</span><span class="n">users</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django ORM的多对多关系 (每个关系有附加的属性)]]></title>
    <link href="http://changchen.me/blog/20170406/many-to-many-relation-with-extra-field-django/"/>
    <updated>2017-04-06T00:44:02+10:00</updated>
    <id>http://changchen.me/blog/20170406/many-to-many-relation-with-extra-field-django</id>
    <content type="html"><![CDATA[<blockquote><p>最近写公司的业务代码, 碰到这么一个问题:    <br/>
<strong>一个User对应多个Account, 而每个Account又可以分享给多个user</strong>, 典型的多对多的关系.  <br/>
但问题在于每个关系, 都有一个permissionsharing的属性: 0: 只读 / 1: 读写 / 2: 自身创建.  <br/>
晚上我尝试着用django的orm来实现这个需求.</p></blockquote>

<!--more-->


<br>  


<h3>Model的定义:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Account</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">128</span><span class="p">)</span>
</span><span class='line'>    <span class="n">accounts</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">Account</span><span class="p">,</span> <span class="n">through</span><span class="o">=</span><span class="s">&#39;PermissionSharing&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PermissionSharing</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span><span class='line'>    <span class="n">account</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Account</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">CASCADE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">User</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="o">.</span><span class="n">CASCADE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">permission</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">SmallIntegerField</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<br>


<h3>多对多关系的创建:</h3>

<p><strong>user &mdash;> account[permission]</strong> <br/>
u1 &mdash;> a1[1], a2[2] <br/>
u2 &mdash;> a1[2], a3[2]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="s">&#39;DJANGO_SETTINGS_MODULE&#39;</span><span class="p">,</span> <span class="s">&#39;manytomany.settings&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">django</span>
</span><span class='line'><span class="n">django</span><span class="o">.</span><span class="n">setup</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">a1.models</span> <span class="kn">import</span> <span class="n">Account</span><span class="p">,</span> <span class="n">User</span><span class="p">,</span> <span class="n">PermissionSharing</span>
</span><span class='line'>
</span><span class='line'><span class="n">a1</span> <span class="o">=</span> <span class="n">Account</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;a1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">a2</span> <span class="o">=</span> <span class="n">Account</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;a2&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">a3</span> <span class="o">=</span> <span class="n">Account</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;a3&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">u1</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;u1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">u2</span> <span class="o">=</span> <span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;u2&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">PermissionSharing</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">u1</span><span class="p">,</span> <span class="n">account</span><span class="o">=</span><span class="n">a1</span><span class="p">,</span> <span class="n">permission</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">PermissionSharing</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">u1</span><span class="p">,</span> <span class="n">account</span><span class="o">=</span><span class="n">a2</span><span class="p">,</span> <span class="n">permission</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">PermissionSharing</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">u2</span><span class="p">,</span> <span class="n">account</span><span class="o">=</span><span class="n">a1</span><span class="p">,</span> <span class="n">permission</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">PermissionSharing</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">u2</span><span class="p">,</span> <span class="n">account</span><span class="o">=</span><span class="n">a3</span><span class="p">,</span> <span class="n">permission</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<br>


<h3>相互获取对方set的方法和filter方法:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># 相互获取对应的set</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">u1</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">all</span><span class="p">())</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">a1</span><span class="o">.</span><span class="n">user_set</span><span class="o">.</span><span class="n">all</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c"># filter</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">accounts__name</span><span class="o">=</span><span class="s">&#39;a1&#39;</span><span class="p">,</span> <span class="n">permissionsharing__permission</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">Account</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">u1</span><span class="p">,</span> <span class="n">permissionsharing__permission</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 获取relation的属性(extra field: permission)</span>
</span><span class='line'><span class="c"># 1)</span>
</span><span class='line'><span class="n">ps</span> <span class="o">=</span> <span class="n">PermissionSharing</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">u1</span><span class="p">,</span> <span class="n">account</span><span class="o">=</span><span class="n">a1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">ps</span><span class="o">.</span><span class="n">permission</span><span class="p">)</span>
</span><span class='line'><span class="c"># 2)</span>
</span><span class='line'><span class="n">ps</span> <span class="o">=</span> <span class="n">a1</span><span class="o">.</span><span class="n">permissionsharing_set</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">user</span><span class="o">=</span><span class="n">u1</span><span class="p">)</span>
</span><span class='line'><span class="n">ps</span> <span class="o">=</span> <span class="n">u1</span><span class="o">.</span><span class="n">permissionsharing_set</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">account</span><span class="o">=</span><span class="n">a1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">ps</span><span class="o">.</span><span class="n">permission</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># clear</span>
</span><span class='line'><span class="n">u1</span><span class="o">.</span><span class="n">accounts</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">Account</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span><span class='line'><span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span><span class='line'><span class="n">PermissionSharing</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hypers 后台开发 每周总结]]></title>
    <link href="http://changchen.me/blog/20170321/hypers-first-week-summary/"/>
    <updated>2017-03-21T00:44:06+11:00</updated>
    <id>http://changchen.me/blog/20170321/hypers-first-week-summary</id>
    <content type="html"><![CDATA[<blockquote><p>在宏路数据HFA(HyperS For Advertising)组开始人生第一份工作, 职场小菜鸟的磕绊前行~~.  <br/>
转眼一周就过去了, 特写下这篇日志记录总结一下每周的总结和反思.</p></blockquote>

<!--more-->


<br>  


<p><code>(DESC, 持续更新中...)</code></p>

<br>


<br>


<h1>第十九周 (17 July 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>前段升级新框架, 把转化管理那块的接口重写一下. 主要把分散各地的方法整合到REST中去, 再配合检查参数和权限的装饰器, 这代码写起来, 真的是轻松愉悦♂.<br/>
REST真的是个好东西, 因为百分之九十的接口都是对一个特定资源做<strong>增删改查</strong>操作, 然后把这些操作都集中起来, 就可以避免写很多重复功能的接口.     <br/>
比如对user的retrieve操作:    <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week19_rest.jpg"></li>
<li>第一次去生产环境上修了bug, 感觉现在才接触生产环境晚的有些过分了, 还是应该主动多去接触自己未接触的领域.</li>
<li>公司搬家咯, 感觉瞬间高大上了, 秀一张图: <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week19_new.jpg"></li>
</ol>


<h3>给下周的自己一些建议</h3>

<ol>
<li>最近总是在想一个问题, 自己的优势(核心竞争力)到底是什么. 最近想出了一丝头绪, 希望未来的日子继续努力~~</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十八周 (10 July 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>这周drinksober请假了, 感觉项目突然就停滞不前了, in a chaos, people just want to make their job done, instead of making it excellent.</li>
<li>在解决一个nginx配置的问题上, 深深的感到自己的无力感. 还是要去培养一下自己快速学习一个新技能的能力.</li>
<li>下周就要搬公司了, 希望有新的开始吧.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十七周 (03 July 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li><strong>周一/周二:</strong> 哎，请了两天假，因为得了急性肠胃炎，吐得快怀疑人生了。慢慢的开始思考身体的重要性和工作的意义。</li>
<li><strong>周三：</strong> 开始做oauth2的开发，今天做了的工作就是把原来对外接口的token验证， 换成统一的拿access token去auth拿用户的方式。<br/>
希望这周能把剩下的工作做完。</li>
<li><strong>周四周五：</strong> 还不错， 把OAuth2.0 sdk写完了，打包传到PyPI上了: <code>pip install hypers-oauth2</code>。  <br/>
从README.md截的图: <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week17_auth2.png"></li>
</ol>


<h3>给下周的自己一些建议</h3>

<ol>
<li>最近有一个明显的发现， 就是自己更博的速度急速下降， 侧面说明学习的脚步渐渐的放缓了。      <br/>
所以还是要在课余多学习提高自己， 充分吸收营养， 才能拉出新鲜饱满的屎。</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十五周 (19 June 2017)</h1>

<p>请假了一周多一天回学校， 参加了毕业典礼，带爸妈去澳洲玩了八天。  <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170325_hypers_summary/week15_g.jpg"></p>

<br>


<br>


<hr />

<br>


<br>


<h1>adtracker v1.15 开发结束:</h1>

<p>我完成的任务: <br/>
<img style="max-height:100px" class="lazy" data-original="/images/blog/170325_hypers_summary/v1.15.png"></p>

<p>这个开发周期做了好多任务, 主要还是熟悉报表的流程, 并参与了设计用pandas做报表的新逻辑: <br/>
<img style="max-height:220px" class="lazy" data-original="/images/blog/170325_hypers_summary/1.15_run.png">  <br/>
但感觉慢慢的沦陷为一个增删改查的熟练工, Ahh, 不知道自己的优势到底在哪了.  <br/>
还是要多去学习吧, 不断获取新知识, 追求更好的代码质量。</p>

<br>


<br>


<hr />

<br>


<br>


<h1>第十三周 (05 June 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>周一: 完成了关键词报表用pandas的重写, 写过一个报表后, 再写新的报表会轻松很多.</li>
<li>周二: 关键词报表的大致完成, 抓紧测试.</li>
<li>周三周四周五: 修复了一些bug</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>慢慢的每天陷在赶需求, 补bug的泥ze里, 还是要在平时多去学习新知识吧, 不然只会变得越来越平庸.</li>
<li>买了一本&lt;算法导论>慢慢看, 因为看了一下目录, 每一章都接触过, 但却都没有完全掌握.   <br/>
打算用Python把里边的算法都实现一遍, 打打基本功, 第一章关于<a href="http://changchen.me/blog/20170611/python-sorting-algorithms/">排序的笔记</a>.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十二周 (30 May 2017)</h1>

<p>(只有三天, 略..)</p>

<br>


<br>


<hr />

<br>


<br>


<h1>第十一周 (22 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>前端升级新框架了, 一直配合weiwei做对接, 写一些新的接口, 改一下老接口的输入输出格式. <br/>
当去看一些老接口的代码的时候, 有一种打开一个十年没动的箱子一样, 满满的一种历史尘土的味道. 会发现其中有一些写的很坑的地方, 但又不敢大改: <br/>
这也是我最近比较烦的地方, 新来的同事写的代码先不说写的好不好, 固执的不按我们新定的pandas报表逻辑走, 真的让人很头疼. <br/>
写代码完成需求其实是最最基本的要求, 代码的可读性, 健壮性, 扩展性, 可维护性, 还有性能等等都是要仔细考虑, 尽力去追求的地方. <br/>
像我写第一个需求的时候, 我知道我写的不好, 让黄俊给我一起看了三四遍, 要是像这样<strong>虚心求教态度和基本沟通的能力</strong>也没有的话, 在同一个团队里, 真的会让其他人很头疼.</li>
<li>学了一下ipdb, pycharm的debug模式, 重新加载的时候确实有一点慢, 如果只是简单调试的话, ipdb也是挺方便的(cai guai)</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>之前就有想法, 趁前后端分离的机会, 重写项目中不科学的那些代码, 但上两周实在有点忙, 就没有做起来.  <br/>
下周碰到之前的坑代码, 还是要尽力去重写的好一些.</li>
<li>学习学习学习~~ 有吸收才能有进步!</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第十周 (15 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>在正确的道路上 <br/>
1) 对各个部分模块化, 减少耦合度. 从而将报表重复逻辑的地方抽出来写成基类, 写出清晰简洁的代码. <br/>
2) 利用pandas处理数据的优势, 配合queryset处理数据.    <br/>
自定义属性报表的EChart和表格部分的写完了, 但当然还是有一些问题, 迫不及待的想去解决了.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>报表部分:

<ul>
<li>queryset_by_register的优化.</li>
<li>生成的query_paras, 忘记放到filter了.</li>
<li>最后生成的seg是pandas Timestamp, 还是需要用sublist 格式显示 &mdash;> 在_after处理?</li>
<li>在sort之后, 返回pagesize大小的row? 竟可能的处理分页的优化.</li>
<li>有些地方写的太复杂了, 简化增加可读性.</li>
<li>单元测试</li>
</ul>
</li>
<li>有空还是要去仔细看下Numpy和Pandas的官方文档, 对库的多一份了解才能写出更简洁高效的代码.</li>
<li>去django的google group问个问题, 我是应该看算法导论, 还是Expert python, 或者python或django的官方文档.<br/>
最近的一些事情还是挺让我受刺激, 感觉自己还是要更努力一点把, 只有这样才能掐住命运的喉咙.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第九周 (08 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>主要看了报表那一部分的代码, 昨天晚上整理了一下上周看的成果和下周的计划, 希望下周可以早点把这部分搞定.  <br/>
临时写在注释里&hellip;  <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week9_plan.png"></li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>今天在网上看到说什么无限零食, 办公环境对程序员都是很肤浅的吸引.  <br/>
真正最核心是吸引力还是 给力的同事 和 给力的项目, 做有意义的事情.  <br/>
希望有一天也能像drinksober一样挑起大梁, 一起把项目打造成自己喜欢满意的样子. <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week9_huang.JPG"></li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第八周 (02 May 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>开始进行下一个版本的迭代了, 了解需求, 慢慢做起来.  <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week8-jira.png"></li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>在课余时间还是要再努力一些, 例如和黄俊一起看看asyncio, 或者去跑跑步, 出去走走参加活动认识新朋友, 都比在家躺在床上刷微博来的好.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第七周 (24 APR 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<p>1.主要研究了一下django performance and optimization[<a href="http://changchen.me/blog/20170503/django-performance-and-optimisation/">笔记</a>], 然后利用这些技巧把一个用的很频繁的方法, 从100多ms降到了20ms.  <br/>
结果看到别人写的代码, 一下子就把数据库的三四万条数据拉出来放到内存里, 然后逻辑还有问题, 我的内心是奔溃的.</p>

<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>之前刚接触项目的时候, 代码看起来也是很困难的, 但慢慢啃下来也没有那么可怕了. 还是要跳出自己的舒适区, 积极地去接触自己对于项目不熟悉的地方, 快速的提高自己.  <br/>
其实阅读源码也是一种能力把.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第六周 (17 APR 2017)</h1>

<p></p>


<h3>完成的工作总结(尝试用提前做计划去督促自己):</h3>

<ol>
<li>周一(计划): 看一下python是如何处理hash table的冲突(散列表), docker的系统学习</li>
<li>周二到周五: >&lt;</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>自己做了共享campaign的需求, 改写了一些权限判断的代码, 打算写一下文档.</li>
<li>专研一下Django orm那块的performance 和 optimization.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>v1.14 开发结束:</h1>

<p>我完成的任务: <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/v1.14.png"></p>

<br>


<br>


<hr />

<br>


<br>


<h1>第五周 (10 APR 2017)</h1>

<p></p>


<h3>完成的工作总结(尝试用提前做计划去督促自己):</h3>

<ol>
<li>周一: 完成共享界面的接口与前端的对接</li>
<li>周二(提前定的计划): 1. 测试对ShareAccount表兼容的测试. 2. 完成 account list 页面. 3. 完成campaign list的三个影响.</li>
<li>周三到周五: 测试反馈的bug的修复.</li>
<li>看了一遍python的内置方法的官方文档. <a href="http://note.youdao.com/noteshare?id=a924458d86c4506f5d2a304e5c754133">笔记</a></li>
<li>学习了一下docker的基本操作.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>提前做计划这个方法还是挺好的, 提高了自己的效率.</li>
<li>这周比较闲, 可以多利用时间去提高自己, 加油~~</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第四周 (3 APR 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>修bug</li>
<li>修bug</li>
<li>修bug</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<p>这周只有三天, 忙碌却收获颇少. 原因在工作总结里可以看到: <br/>
就是把所有时间都花在修复之前写的代码的bug上了, 自己给自己挖了很多坑.    <br/>
给自己的两点建议:</p>

<ol>
<li><code>不要过于消极, 尽力就好:</code> 明明知道要在写代码前做好设计, 但总是做不好, 是不是其实因为的能力有问题.  <br/>
努力去在每次碰键盘前用一张纸把每个细节都想清楚, 慢慢提高, 不着急.</li>
<li><code>花一个小时在纸上写清细节:</code> 出bug是因为需求有些复杂, 光靠凭空想很难考虑到全局. 最好在纸上写下每个细节, 想清楚所有前后关联.</li>
<li>不要写太复杂的测试.. 在测试中修复bug也是一个很痛苦的事情, 不要问我是怎么知道的..</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第三周 (27 Mar 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>最主要的就是, 在黄俊的手把手下, 完成了公司逻辑比较复杂的一些新需求, 并完成了测试. <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170325_hypers_summary/week3_sharing.png"></li>
<li>写了一个自动生产API文档(function的<strong>docstr</strong>)的小程序.</li>
<li>阅读了一下django的ORM many to many的文档.[笔记]](/blog/20170405/many-to-many-relation-with-extra-field-django/)  <br/>
因为在公司的逻辑中, 一个用户有多个账号, 一个账号又可以共享给多个用户. 原先的逻辑是用一张表去关联用户和账号的这两张表.  <br/>
我在想能不能用django ORM自带的many to many relation代替, 但把文档读了一下, 发现还是不行.  <br/>
原因是公司的业务逻辑中<strong>用户对账号的关系</strong>还有一个permission的属性, 自带的ORM好像实现不了这个功能.   <br/>
虽然这个想法最后作罢了, 但这种思考和尝试还是很棒的, 应该在编码前多去做这样的思考.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li><code>测试的正确姿势</code>: 测试是很重要的, 但还是要去了解专业的测试逻辑应该是怎么样的, 多去学习而不是一味的埋头写代码.  <br/>
规范的测试和文档对于软件开发来说还是很重要的.</li>
<li><code>别忘了学习</code>: 不要总是着急的去写业务代码, 这周花在学习提高自己的时间还是太少了.  <br/>
例如可以多花点时间去搞清楚这个request来前的来后做的封装细节.  <br/>
好处是万一有什么奇怪的bug, 会更顺手的去解决. 还可以多去学习如何写出Pythonic的代码, 提高代码的可读性和合理性.</li>
<li><code>不要让懒惰侵蚀自己</code>: 差点忘了这最重要的一点: 就是上周下班后一回家, 自己就钻到被窝里. 刷刷微博看看直播, 到一两点然才睡觉.   <br/>
其实我可以去咖啡馆静下心来看看书学习新知识, 去逛街买些新衣服小玩意, 去接触新的文化和人群, 去健身. <br/>
躺倒床上只会让人越躺越累. 在上海一个这样的大都市, 要珍惜提高自己的每个机会.   <br/>
这是我下周<strong>最需要做出的改变</strong>.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第二周 (20 Mar 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>把REST框架的tutorial游览了一下, 大致了解了一下.</li>
<li>周二把RabbitMQ 官方的tutorial读了一遍: <a href="http://note.youdao.com/share/?id=e992e5f73efb1d9098cd7b4e91672cd3&amp;type=note#/">笔记</a></li>
<li>对重构的API那部分写一下单元测试.</li>
</ol>


<p></p>


<h3>给下周的自己一些建议</h3>

<ol>
<li>这周慢慢开始写一些公司业务部分的代码了, 但还是要时刻提醒自己, 要<strong>多花点重心在学习上</strong>, 而不是着急者想把任务尽快完成。  <br/>
例如<strong>需求是写django的一些测试用例:</strong>

<ul>
<li>尽力把django的测试机制原理搞清楚。</li>
<li>研究对REST的create retrieve list update四个方法 测试的正确逻辑。</li>
<li>等等..</li>
</ul>
</li>
<li><strong>每日总结:</strong> 感觉这周过的好快, 以后还是每天抽十分钟写一下每天的总结吧, 这样写每周总结的时候也方便一些.</li>
<li><strong>思考后再行动</strong>: 这么多年编程的经历, 最重要的一个真理就是: 在开动编码前, 一定要把整个流程或实现思路想清楚. 换句话说就是: 编码只是占一个&#8221;项目&#8221;中maybe 30%的比重, never rush to code.</li>
<li><strong>学习清单:</strong> 例如一些基础知识: http协议, tcp/ip协议, epoll/select模型 的深入学习, etc. <br/>
从俊哥身上看到的一个很有趣的&amp;很棒的优点就是他很喜欢看书, 在工作外的时间买些书来看看, 而不是刷刷网页一天就过去了. 我之后要慢慢做起来的.</li>
<li><strong>人情事故:</strong> 就像女朋友说的我有些<strong>自闭</strong>吧. 但有时候, 我只是不喜欢故意去讨好一个人。 举个小小的朋友圈例子: 我知道多给别人点点赞, 或许和那些平时接触不是很多的同事朋友能变成点赞之交, 但我真的太懒了, 不太想去维系这些&#8217;友情&#8217;。 比如我不太喜欢一个人, 我真的就会表现出来我的冷淡和疏远。 换句话说, 我更喜欢去交真心的朋友, 而不是&#8217;friend with benefits&#8217;(笑)。 <br/>
但和我的性格也有关系吧, 太敏感了, 有些社交恐惧症. 不太喜欢人与人之间的那种压力, 所以我常常更愿意去选择逃避和独处.   <br/>
当然有些地方还是需要做出一些改变滴, 例如是自己要变得更加positive和open一些, 和别人相处的时候可以稍微找找话题, 遇到同组的同事, 主动打打招呼。 至少不要让别人觉得你是一个很难相处的人.</li>
</ol>


<br>


<br>


<hr />

<br>


<br>


<h1>第一周 (13 Mar 2017)</h1>

<p></p>


<h3>完成的工作总结:</h3>

<ol>
<li>Ubuntu工作环境的搭建 和 HFA项目的配置.</li>
<li>Python MRO（Method Resolution Order）<a href="http://changchen.me/blog/20170320/python-mro/">笔记</a></li>
<li>初步了解adtracker项目的业务逻辑.</li>
<li>Django Class-based Views了解 <a href="http://changchen.me/blog/20170313/class-based-views-notes/">笔记</a></li>
<li>Django REST framework了解 <a href="http://changchen.me/blog/20170322/django-rest-framework-hypers/">笔记</a></li>
<li>Django middleware了解</li>
<li>Django 源码深入阅读, 了解如何创建Server和处理Request的整个过程. <a href="http://changchen.me/blog/20170318/django-source-code-analysis/">笔记</a></li>
</ol>


<p></p>


<h3>上班亲身经历总结</h3>

<ol>
<li><strong>迷惘的开始:</strong> 第一天去报到, 填了资料, 签了协议卖了身, 就屁颠屁颠的去上班了. 刚到的工位时候, 其实是有些小失望的: 办公的设备实在是有些简陋. 配的笔记本和显示器都有些旧了. 不是都是标配MacBook和Dell 2K显示器的吗, 哈哈
所以个人觉得办公设备还是自己选比较好, 比如显示器. 公司可以给新员工配1000的基础款, 但新员工如果不满意的话, 想要2000的显示器. 没问题, 剩下的差价一人出一半呗, 我自费五百, 公司再出五百, 给新员工配2000的显示器.  <br/>
感觉这样的话还是比较科学一些.</li>
<li><strong>友善的同事:</strong> 虽然心里有些迷惘, 但同事人都挺好的. 特别是无所不知黄俊小哥哥, 帮我换了椅子拿了本子, 第一周也是耐心回答了我无数的问题. 感覺自己运气总是很好, 能遇到耐心厉害的老师. 这些也是我在公司能待下去的最重要原因吧.</li>
<li><strong>保持效率:</strong> 第一周的效率其实还是可以的(打个85分吧), 感觉学了很多东西. 但今天(第二周的周一)效率就有些雪崩了, 不要因为工作久了就混日子. 要努力保持清醒的头脑, 知道自己在学什么做什么, 多去虚心问问题.</li>
</ol>


<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python MRO(Method Resolution Order)笔记 ]]></title>
    <link href="http://changchen.me/blog/20170321/python-mro/"/>
    <updated>2017-03-21T00:16:15+11:00</updated>
    <id>http://changchen.me/blog/20170321/python-mro</id>
    <content type="html"><![CDATA[<blockquote><p>来Hypers上班的第一周, 俊哥提到Python的继承很灵活, 调用class内的方法的话, 有自己的一套MRO(Method Resolution Order).  <br/>
我找了资料仔细阅读了一下, 这篇日志是我做的笔记.</p></blockquote>

<!--more-->


<br>  


<h3>Method Resolution Order</h3>

<ol>
<li><p>经典类（classic class）MRO</p>

<ul>
<li>深度遍历

<ul>
<li>[D, B, A, C, A]

<ul>
<li><strong>[D, B, A, C]</strong></li>
</ul>
</li>
</ul>
</li>
</ul>


<p> <img src="http://xblog.qiniudn.com/assets/2013-07-25-python-mro/class_diamond.svg" alt="http://xblog.qiniudn.com/assets/2013-07-25-python-mro/class_diamond.svg" /></p></li>
<li><p>新式类(new-style class) MRO
它仍然采用从左至右的深度优先遍历，但是如果遍历中出现重复的类，<strong>只保留最后一个</strong>。 <br/>
[D, B, A, object, C, A, object] &mdash;> [D, B, C, A, object] <br/>
<img src="http://xblog.qiniudn.com/assets/2013-07-25-python-mro/newclass_diamond.svg" alt="http://xblog.qiniudn.com/assets/2013-07-25-python-mro/newclass_diamond.svg" /></p></li>
<li><p>类型冲突
违反了线性化的「 <strong>单调性原则</strong> 」 <br/>
<code>class A(X, Y): pass</code> <br/>
<code>class B(Y, X): pass</code> <br/>
<strong>B 和 A 的 MRO 不一样</strong> <br/>
_ <br/>
B 被 C 继承时,  C的MRO顺序和B不一样了, 很容易导致不易察觉的错误。
所以引用了C3 MRO, 会产生一个异常.  <br/>
<img src="http://xblog.qiniudn.com/assets/2013-07-25-python-mro/class_conflict.svg" alt="此处输入图片的描述" /></p></li>
</ol>


<p>Reference: <a href="http://hanjianwei.com/2013/07/25/python-mro/">http://hanjianwei.com/2013/07/25/python-mro/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Http协议的笔记 (待更新)]]></title>
    <link href="http://changchen.me/blog/20170321/http-protocal/"/>
    <updated>2017-03-21T00:03:18+11:00</updated>
    <id>http://changchen.me/blog/20170321/http-protocal</id>
    <content type="html"><![CDATA[<blockquote><p>后端工程师面试时必问的一个问题就是<strong>Http协议</strong>, 例如 http是建立在 TCP/IP 协议之上的应用层规范, Request和Response的结构, Response状态码的类型.  <br/>
这些基础知识, 其实在实际的工作中其实还是很有用处的, 有利于自己理解很多<strong>隐藏的细节</strong>.   <br/>
这篇日志记录了最近看到的一些不错的资料, 以后可能会持续更新~~</p></blockquote>

<!--more-->


<br>  


<h2>Http request:</h2>

<p><img src="https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/images/HTTP_RequestMessageExample.png" alt="Request" /></p>

<h2>Http response:</h2>

<p><img src="https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/images/HTTP_ResponseMessageExample.png" alt="Response" /></p>

<h2>Http response code</h2>

<p>这段真的是返回值的精华总结:  <br/>
<strong>1xx: hold on <br/>
2xx: here you go <br/>
3xx: go away <br/>
4xx: you fucked up <br/>
5xx: I fucked up   </strong></p>

<p>再下边是具体的常用返回值:</p>

<h3>1xx (Informational): Request received, server is continuing the process.</h3>

<p><strong>100</strong> Continue: The server received the request and in the process of giving the response.</p>

<h3>2xx (Success): The request was successfully received, understood, accepted and serviced.</h3>

<p><strong>200</strong> OK: The request is fulfilled.</p>

<h3>3xx (Redirection): Further action must be taken in order to complete the request.</h3>

<p><strong>301</strong> Move Permanently: The resource requested for has been permanently moved to a new location. The URL of the new location is given in the response header called Location. The client should issue a new request to the new location. Application should update all references to this new location. <br/>
<strong>302</strong> Found &amp; Redirect (or Move Temporarily): Same as 301, but the new location is temporarily in nature. The client should issue a new request, but applications need not update the references. <br/>
<strong>304</strong> Not Modified: In response to the If-Modified-Since conditional GET request, the server notifies that the resource requested has not been modified.</p>

<h3>4xx (Client Error): The request contains bad syntax or cannot be understood.</h3>

<p><strong>400</strong> Bad Request: Server could not interpret or understand the request, probably syntax error in the request message. <br/>
<strong>401</strong> Authentication Required: The requested resource is protected, and require client’s credential (username/password). The client should re-submit the request with his credential (username/password). <br/>
<strong>403</strong> Forbidden: Server refuses to supply the resource, regardless of identity of client. <br/>
<strong>404</strong> Not Found: The requested resource cannot be found in the server. <br/>
<strong>405</strong> Method Not Allowed: The request method used, e.g., POST, PUT, DELETE, is a valid method. However, the server does not allow that method for the resource requested. <br/>
<strong>408</strong> Request Timeout: <br/>
<strong>414</strong> Request URI too Large:</p>

<h3>5xx (Server Error): The server failed to fulfill an apparently valid request.</h3>

<p><strong>500</strong> Internal Server Error: Server is confused, often caused by an error in the server-side program responding to the request. <br/>
<strong>501</strong> Method Not Implemented: The request method used is invalid (could be caused by a typing error, e.g., &ldquo;GET&rdquo; misspell as &ldquo;Get&rdquo;). <br/>
<strong>502</strong> Bad Gateway: Proxy or Gateway indicates that it receives a bad response from the upstream server. <br/>
<strong>503</strong> Service Unavailable: Server cannot response due to overloading or maintenance. The client can try again later. <br/>
<strong>504</strong> Gateway Timeout: Proxy or Gateway indicates that it receives a timeout from an upstream server.</p>

<h2>Https</h2>

<h3>非对称加密</h3>

<p>为了防止密钥在传输的过程中泄露, 就发明了这种只传输公钥的加密算法.   <br/>
每个人都有一个公钥+密钥(public and private key).   <br/>
当我们在本地向github请求信息的时候:</p>

<ol>
<li>Github用我们<strong>上传的公钥</strong>对需要拉取的信息做加密处理.</li>
<li>这段<strong>加密信息</strong>, 就只有用到我们自己<strong>本地私钥</strong>才能解密.</li>
</ol>


<p>大致就是这个意思, 要是说的不对或者不太懂记得给我留言哦~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django 阅读源码笔记 - Hypers第一周]]></title>
    <link href="http://changchen.me/blog/20170319/django-source-code-analysis/"/>
    <updated>2017-03-19T02:17:07+11:00</updated>
    <id>http://changchen.me/blog/20170319/django-source-code-analysis</id>
    <content type="html"><![CDATA[<blockquote><p>来Hypers上班的第一周, 在看Django的middleware的时候, 对process <code>request, view, template和response</code>的四个过程有些疑惑, 俊哥建议我读一下django的源码.   <br/>
在这篇日志中, 我整理了django从<strong>启动server</strong> &mdash;> <strong>处理Request</strong> &mdash;> <strong>返回response</strong> 的整个<strong>代码流程</strong>.</p></blockquote>

<!--more-->


<br>  


<p>自己做的有道云笔记的链接: <a href="http://note.youdao.com/noteshare?id=465ac1f8ca5a82a9cb998d49bb763df8">http://note.youdao.com/noteshare?id=465ac1f8ca5a82a9cb998d49bb763df8</a></p>

<p><article class="editor-area"></p>

<div class="editor-area" id="noteIFrameContent"><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#393939;font-weight:bold;">Reference: </span></div><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><a href="https://segmentfault.com/a/1190000002450390"><span style="color:#003884;text-decoration:underline;">https://segmentfault.com/a/1190000002450390</span></a></div><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><a href="https://github.com/daoluan/decode-Django"><span style="color:#003884;text-decoration:underline;">https://github.com/daoluan/decode-Django</span></a></div><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-size:18px;font-weight:bold;">基础的一些类:</span></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">WSGIServer &lt;&#8211; HTTPServer &lt;&#8211; SocketServer.TCPServer &lt;&#8211; TCPServer &lt;&#8211; BaseServer</div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">request:    WSGIRequest &lt;&#8211; django.http.HttpRequest</div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">response:   HttpResponse</div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-size:18px;font-weight:bold;">第一步 启动django server:</span><span style="font-size:18px;"> </span><span style="font-size:18px;color:#0d0d0d;"> </span><span style="font-size:18px;color:#df402a;font-weight:bold;text-decoration:underline;">python manage.py runserver</span></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;">os.environ[&#8220;DJANGO_SETTINGS_MODULE&#8221;] = &#8220;settings&#8221;</span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;">from django.core.management import execute_from_command_line</span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;font-weight:bold;">execute_from_command_line(sys.argv)</span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;font-weight:bold;">run() </span><span style="color:#df402a;">   </span>-<span style="color:#df402a;">   </span><span style="font-weight:bold;text-decoration:underline;">django/core/management/commands/runserver.py</span></div></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;font-weight:bold;">inner_run()</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">1. </span><span style="color:#df402a;font-weight:bold;">handler = self.get_handler(*args, **options) </span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">WSGIHandler:</span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    1) get_handler()</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    2) get_internal_wsgi_application()  -  django/core/servers/basehttp.py</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            from django.conf import settings</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">       3) return WSGIHandler() -  django/core/wsgi.py</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    </div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">2. </span><span style="color:#df402a;font-weight:bold;">run(self.addr, int(self.port), handler, ipv6=self.use_ipv6, threading=threading) </span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">WSGIServer:    </span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    django/core/servers/basehttp.py</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    1)  <span style="color:#df402a;font-weight:bold;">run(self.addr, int(self.port), handler, ipv6=self.use_ipv6, threading=threading)</span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">httpd_cls</span> &#8211;&gt; 获得一个WSGIServer类型</div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)</span> &#8211;&gt; WSGIServer</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">2) <span style="color:#df402a;font-weight:bold;">httpd.serve_forever()</span> # while 循环接收Request请求</div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">select model</span></div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        获得 r, w, e &#8211;&gt; read, write, error 描述符 &#8211;&gt; [], [], []</div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        <br></div></blockquote></blockquote></blockquote><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">当WSGIServer (serve_forever) 接收到Request:</span><span style="color:#df402a;font-weight:bold;"> </span></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="color:#df402a;font-weight:bold;">r, w, e = [&lt;django.core.servers.basehttp.WSGIServer object], [], []</span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="color:#df402a;font-weight:bold;">if self in r: </span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        <span style="color:#df402a;font-weight:bold;">self._handle_request_noblock()</span></div></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="color:#df402a;font-weight:bold;">self.process_request(request, client_address)</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        1) <span style="color:#df402a;font-weight:bold;">t = threading.Thread(target = self.process_request_thread, args = (request, client_address))</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            <br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            # 新建了一个<span style="font-weight:bold;">线程</span>去处理 request.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            <span style="color:#df402a;font-weight:bold;">process_request_thread()    </span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        <br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">                <span style="color:#df402a;font-weight:bold;">self.finish_request(request, client_address)</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            <span style="color:#df402a;font-weight:bold;">线程</span>调用<span style="color:#df402a;font-weight:bold;">finish_request # call WSGIHandler:</span><span style="font-weight:bold;"> </span></div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">BaseServer</span>  &#8211;&gt;  <span style="font-weight:bold;">finish_request()</span>  &#8211;&gt;  self.RequestHandlerClass(request, client_address, self)</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;"># </span><span style="text-decoration:underline;">python2.7/SocketServer.py</span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">BaseRequestHandler  &#8211;&gt;  <span style="font-weight:bold;">self.handle()   # </span><span style="text-decoration:underline;">python2.7/SocketServer.py</span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">WSGIRequestHandler</span>  &#8211;&gt;<span style="font-weight:bold;"> handler.run(self.server.get_app()) </span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="text-decoration:underline;"># self.server: WSGIServer;</span>  handler: ServerHandler; self.server.get_app(): StaticFilesHandler</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">BaseHandler</span>  &#8211;&gt; <span style="font-weight:bold;"> self.result = application(self.environ, self.start_response)  </span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"># application: StaticFilesHandler</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">    StaticFilesHandler</span>(WSGIHandler)  &#8211;&gt;  <span style="color:#df402a;font-weight:bold;">return self.application(environ, start_response)</span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"># Explicitly shutdown.  socket.close() merely releases the socket and waits for GC to perform the actual close.</div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="color:#df402a;font-weight:bold;">self.shutdown_request(request)</span></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        <br></div></blockquote><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-size:18px;font-weight:bold;">调用 </span><span style="font-size:18px;color:#df402a;font-weight:bold;">WSGIHandler</span><span style="font-size:18px;font-weight:bold;">的整个过程: </span></div><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">调用 </span><span style="color:#df402a;font-weight:bold;">WSGIHandler(base.BaseHandler)的 __call__ 方法</span><span style="font-weight:bold;"> </span>- (django/core/wsgi.py)</div></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 1:</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        1). self.load_middleware()  -&gt; <span style="font-weight:bold;">Populate middleware lists from settings</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        2). signals.request_started.send(&#8230;)  -&gt; fires the dispatcher <span style="font-weight:bold;">signal `request_started` </span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        3). request = self.request_class(environ)  -&gt; <span style="font-weight:bold;">实例WSGIRequest(http.HttpRequest)</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        4). response = <span style="font-weight:bold;">self.get_response(request)  -&gt; Step2</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">       Returns an HttpResponse object for the given HttpRequest</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 2: Request Middleware</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    the middleware methods applied here simply do some processing and decide whether to add, remove or supplement attributes of the request.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    &#8220;`python</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    for middleware_method in self._request_middleware:</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        response = middleware_method(request)</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    &#8220;`</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 3: 用 RegexURLResolver 处理 requested URL </span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    生成了一个 URL resolver, 在指定的url.py里根据 regex 遍历找到对应的view.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            option1: 如果是include的话, 继续找</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            option2: 找到了的话返回这三个东西: </div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        1. matched item</div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        2. a list of non-named matched groups from the URL (to be used as positional arguments for the view) </div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        3. kwargs. eg. {&#8216;template_name&#8217;: &#8216;registration/login.html&#8217;}</div></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        </div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    `callback, callback_args, callback_kwargs = resolver_match`</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        这三个 <span style="font-weight:bold;">View 的参数</span>: 1. view的reference 2. args 3. kwargs </div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 4: Apply view middleware </span>(类似Request Middleware)</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    for middleware_method in self._view_middleware:</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">        response = middleware_method(request, callback, callback_args, callback_kwargs)</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    </div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">view的三个条件:</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    1) 必须可以被调用的.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    2) 输入: 第一个positional参数必须为django.http.HttpRequest.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    3) 输出: 返回必须为一个django.http.HttpResponse OR raise 一个异常.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 5: Exception Middleware</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">如果在view的执行中遇到异常, 就会执行_exception_middleware list 里的 所有 instance.</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 6: Template Response</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    如果response有render属性的话: </div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">               1. 调用template的response middleware</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">            2. Render response: 返回TemplateResponse, </div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">                content = template.render(context, self._request)</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">                    &gt;&gt;&gt; context = Context({&#8220;my_name&#8221;: &#8220;Dolores&#8221;})</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">                    &gt;&gt;&gt; template.render(context)</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">                    &#8220;My name is Dolores.&#8221;</div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 7: Apply response middleware, regardless of the response</span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">Step 8: </span></div></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">(执行完 handler 的 get_response 方法)</span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">对 Response 设header, cache, etc.</div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><span style="font-weight:bold;">生成一个HttpResponse, 它的两个参数:</span></div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">1. content: </span>一般是TemplateResponse的content (render生成的HTML代码). </div></blockquote></blockquote></blockquote></blockquote><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><blockquote style="margin:0 0 0 40px;border:none;padding:0px;"><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph">    <span style="font-weight:bold;">2. mime_type: </span>A value for the Content-Type header of the response.  &#8211;&gt; <span style="font-weight:bold;">response_headers</span></div></blockquote></blockquote></blockquote></blockquote><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div><div style="white-space: pre-wrap;line-height:1.5;text-align:left;line-height:1.5;" yne-bulb-block="paragraph"><br></div></div>


<p></article></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Class-based Views Notes (Hypers第一天)]]></title>
    <link href="http://changchen.me/blog/20170314/class-based-views-notes/"/>
    <updated>2017-03-14T00:35:25+11:00</updated>
    <id>http://changchen.me/blog/20170314/class-based-views-notes</id>
    <content type="html"><![CDATA[<blockquote><p>今天第一天到Hypers上班, 看代码才发现django有一个东西叫做<strong>CBV(Class-based views)</strong>. 晚上仔细看看官方的文档, 做一下笔记.</p></blockquote>

<!--more-->


<br>


<h2>基本的概念:</h2>

<p><strong>View</strong>: All views inherit from View Class, it handles linking the view in to the URLs, HTTP method dispatching and other simple features.  <br/>
<strong>RedirectView</strong> is for a simple HTTP redirect. <br/>
<strong>TemplateView</strong> extends the base class to make it also render a template.</p>

<h2>最简单的一个用法:</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.views.generic</span> <span class="kn">import</span> <span class="n">TemplateView</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^about/$&#39;</span><span class="p">,</span> <span class="n">TemplateView</span><span class="o">.</span><span class="n">as_view</span><span class="p">(</span><span class="n">template_name</span><span class="o">=</span><span class="s">&quot;about.html&quot;</span><span class="p">)),</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Class-based views 相对于 functions的优点:</h2>

<ul>
<li>Organization of code related to specific <strong>HTTP methods</strong> (GET, POST, etc.) can be addressed by separate methods instead of conditional branching.   <br/>
举个栗子:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># FBV</span>
</span><span class='line'><span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">&#39;GET&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># &lt;view logic&gt;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&#39;result&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># CBV</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyView</span><span class="p">(</span><span class="n">View</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># &lt;view logic&gt;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">&#39;result&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Object oriented techniques such as <strong>mixins (multiple inheritance)</strong> can be used to factor code into <strong>reusable components</strong>.</li>
</ul>


<h2>重点研究TemplateView</h2>

<p><strong>作用</strong>: <strong>Renders</strong> a given template, with the context containing parameters captured in the URL. <br/>
_ <br/>
<strong>整个流程:</strong></p>

<ul>
<li>在urls.py 调用 <code>as_view()</code> (Nothing to worry about. Just accept that the .as_view() is a pretty fine and decent solution :&ndash;))[4]</li>
<li><code>as_view()</code>最后返回的是一个方法(在url匹配的时候执行). The function creates an instance of the class and calls its <code>dispatch()</code> method.</li>
<li><code>dispatch()</code> looks at the request to determine whether it is a GET, POST, etc, and relays the request to a matching method if one is defined, <strong>or</strong> raises HttpResponseNotAllowed if not.  <br/>
_  <br/>
<strong>如何使用:</strong></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Example urls.py:</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">myapp.views</span> <span class="kn">import</span> <span class="n">HomePageView</span>
</span><span class='line'>
</span><span class='line'><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">url</span><span class="p">(</span><span class="s">r&#39;^$&#39;</span><span class="p">,</span> <span class="n">HomePageView</span><span class="o">.</span><span class="n">as_view</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="s">&#39;home&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># Example views.py:</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.views.generic.base</span> <span class="kn">import</span> <span class="n">TemplateView</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">articles.models</span> <span class="kn">import</span> <span class="n">Article</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HomePageView</span><span class="p">(</span><span class="n">TemplateView</span><span class="p">):</span>
</span><span class='line'>    <span class="n">template_name</span> <span class="o">=</span> <span class="s">&quot;home.html&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">get_context_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">context</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">HomePageView</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">get_context_data</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="n">context</span><span class="p">[</span><span class="s">&#39;latest_articles&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Article</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()[:</span><span class="mi">5</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">context</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference:</h2>

<p>[1] <a href="https://docs.djangoproject.com/en/1.10/ref/class-based-views/base/#templateview">https://docs.djangoproject.com/en/1.10/ref/class-based-views/base/#templateview</a> <br/>
[2] <a href="https://docs.djangoproject.com/en/1.10/topics/class-based-views/">https://docs.djangoproject.com/en/1.10/topics/class-based-views/</a> <br/>
[3] <a href="https://ccbv.co.uk/projects/Django/1.10/django.views.generic.base/TemplateView/">https://ccbv.co.uk/projects/Django/1.10/django.views.generic.base/TemplateView/</a> <br/>
[4] <a href="http://reinout.vanrees.org/weblog/2011/08/24/class-based-views-walkthrough.html">http://reinout.vanrees.org/weblog/2011/08/24/class-based-views-walkthrough.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试算法题 - 出栈次序问题 (Catalan Number)]]></title>
    <link href="http://changchen.me/blog/20170309/catalan-number-interview/"/>
    <updated>2017-03-09T00:38:32+11:00</updated>
    <id>http://changchen.me/blog/20170309/catalan-number-interview</id>
    <content type="html"><![CDATA[<blockquote><p>之前去方付通面试的时候的时候, 问了我<code>N个数依次入栈，出栈顺序有多少种？</code>的算法题, 其实是卡特兰数(Catalan)的应用.  <br/>
当时没有答出来(这要是之前没有接触过, 谁答的出来).  <br/>
现在用这篇日志重新整理记录一下.</p></blockquote>

<!--more-->


<br>  


<h2>问题的定义</h2>

<p>一个栈(无穷大)的进栈序列为1，2，3，…，n，有多少个不同的出栈序列?</p>

<h2>解题思路</h2>

<ol>
<li>假设进栈序列为[1, 2, 3, 4, 5, 6]</li>
<li>因为每个数字都可能是最后一个出栈的(独立的事件), 所以先单独分析<strong>当k为最后一个出栈数字</strong>的情况.</li>
<li>1) 当<code>k进栈</code>时, [1, 2]肯定已经出栈了, 所以他们([1, 2])的出栈序列总数为<code>f(k-1)</code> <br/>
2) 当<code>k出栈</code>时, 因为3为最后一个出栈, [4, 5, 6]肯定也已经出栈了, 所以他们[4, 5, 6]的出栈序列总数为<code>f(n-k)</code></li>
<li>所以当k为出栈序列的最后一个数字时, 可能序列的总和为<code>f(k-1)*f(n-k)</code></li>
<li>又因为第二条中, 每个事件为独立的, 所以最后得到了这么一个推导式:  <br/>
<code>f(0) = f(1) = 1</code> <br/>
<code>f(n) = f(0)*f(n-1)+f(1)*f(n-2) + ... + f(n-1)*f(0) (n&gt;=2)</code></li>
</ol>


<h2>Reference</h2>

<ol>
<li><a href="https://en.wikipedia.org/wiki/Catalan_number">https://en.wikipedia.org/wiki/Catalan_number</a></li>
<li><a href="http://www.acmerblog.com/catalan-5196.html">http://www.acmerblog.com/catalan-5196.html</a></li>
<li><a href="http://baike.baidu.com/item/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0#4">http://baike.baidu.com/item/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0#4</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试算法题 - 二分查找的变种题]]></title>
    <link href="http://changchen.me/blog/20170306/binary-search/"/>
    <updated>2017-03-06T15:45:09+11:00</updated>
    <id>http://changchen.me/blog/20170306/binary-search</id>
    <content type="html"><![CDATA[<blockquote><p>去再惠面试的时候, 问了我一道二分查找的变种题, 我当时答的并不是特别清楚, 用这篇日志整理记录一下.</p></blockquote>

<!--more-->


<br>  


<h2>问题的定义</h2>

<p><strong>input:</strong>  <br/>
1. 给定一个升序排列的自然数数组, eg. [1, 3, 3, 5, 7, 7, 7, 7, 8, 14, 14] <br/>
2. 任意自然数, eg. 7  <br/>
<strong>output:</strong> <br/>
数组内 值为7区域的左右边界index: [1, 3, 3, 5, <strong>7, 7, 7, 7</strong>, 8, 14, 14] <br/>
这个例子中就是<strong>(4, 7)</strong></p>

<br>


<h2>我的思路</h2>

<p>我首先想到的是生成<strong>inverted index</strong>再去查找, 或者用<strong>Galloping search</strong>. <br/>
后来才想到考官想考察的是binary search.   <br/>
于是我的思路就变成先用binary找到那个值的区域里的随机一点, 然后用两个while去找左右的边界.   <br/>
但如果这个区域太大, 时间复杂度又变成O(n)了.   <br/>
最后考官提醒我可以对二分查找做一下改动就可以啦.</p>

<br>


<h2>原版的二分查找(返回index和val)</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">A</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="n">B</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bin_search</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">left</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">right</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># 终止条件</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">l</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">val</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bin_search</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">l</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">val</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bin_search</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mid</span><span class="p">,</span> <span class="n">val</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">bin_search</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">A</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<h2>改动后的二分查找</h2>

<p>思路: <br/>
在找<strong>左边界</strong>的时候: <br/>
<code>if left &gt; right: return left</code> <br/>
<code>if ｌ(mid) &gt;= val: (left, mid-1)</code> <br/>
<code>elif l(mid) &lt;= val: (mid+1, right)</code> <br/>
找右边界思路同上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">bin_search_l</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">left</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">right</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">:</span> <span class="k">return</span> <span class="n">left</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">l</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">val</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bin_search_l</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">l</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">val</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bin_search_l</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bin_search_r</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">left</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">right</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">:</span> <span class="k">return</span> <span class="n">right</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">l</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">val</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bin_search_r</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">l</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">val</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">bin_search_r</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bin_search</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">):</span>
</span><span class='line'>    <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">bin_search_l</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">),</span> <span class="n">bin_search_r</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">l</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">A</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Input:&quot;</span><span class="p">,</span> <span class="n">A</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Output:&quot;</span><span class="p">,</span> <span class="n">bin_search</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">A</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Input: [1, 4, 4, 4, 4, 4, 6, 6]</span>
</span><span class='line'>    <span class="c"># Output: (1, 5)</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<h2>总结</h2>

<p>看起来算法好像很复杂, 但核心的思想其实就那么几句伪代码.  <br/>
还是那句永恒不变的真理: <code>先想请思路再下笔!</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面试算法题 - $1 Coke Problem]]></title>
    <link href="http://changchen.me/blog/20170224/coke-algorithm/"/>
    <updated>2017-02-24T12:30:51+11:00</updated>
    <id>http://changchen.me/blog/20170224/coke-algorithm</id>
    <content type="html"><![CDATA[<blockquote><p>今天面试问到一个算法: 一个汽水是$1, 两个汽水的<strong>空瓶</strong>换一瓶可乐, 请问给一些钱, 最多能喝几瓶呢?   <br/>
当时思路有些乱, 算法没写清楚, 面试结束去个奶茶店, 重新写了一下.</p></blockquote>

<!--more-->


<br>    


<h3>英文的描述:</h3>

<p>A bottle of Coke is $1. You can exchange two empty bottles for a bottle of Coke. You have $20 now in your pocket. So how many bottles of Coke can you drink at most?</p>

<br>


<h3>1. 模拟喝汽水的过程.</h3>

<p>当时写算法的时候, 面试官很看重的是可读性, 例如变量名的定义.   <br/>
作为一个Python程序员, 我以后也在这方面也要更加注意.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">cal_drinks</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">avail_drinks</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">sum_drunk</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">empty_drinks</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">avail_drinks</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># consume available drinks</span>
</span><span class='line'>        <span class="n">sum_drunk</span> <span class="o">+=</span> <span class="n">avail_drinks</span>
</span><span class='line'>        <span class="n">empty_drinks</span> <span class="o">+=</span> <span class="n">avail_drinks</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># replace empty bottles to drinks</span>
</span><span class='line'>        <span class="n">avail_drinks</span> <span class="o">=</span> <span class="n">empty_drinks</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class='line'>        <span class="n">empty_drinks</span> <span class="o">=</span> <span class="n">empty_drinks</span> <span class="o">%</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">sum_drunk</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<h3>2. 递归</h3>

<p>写递归最重要的就是找到那个推倒式.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># n个空瓶: f(n) = n/2 + f(n/2 + n%2)</span>
</span><span class='line'><span class="c"># n块钱:  F(n) = n + f(n)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">cal_drinks_by_empty</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sum_drunk</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">sum_drunk</span> <span class="o">=</span> <span class="n">n</span><span class="o">//</span><span class="mi">2</span> <span class="o">+</span> <span class="n">cal_drinks_by_empty</span><span class="p">(</span><span class="n">n</span><span class="o">//</span><span class="mi">2</span> <span class="o">+</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">sum_drunk</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cal_drinks</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">n</span> <span class="o">+</span> <span class="n">cal_drinks_by_empty</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<br>


<h3>3: ???</h3>

<p>就是为什么结果是n + (n-1), 是因为这个推导式有什么简化的方法吗?</p>

<br><br>


<p>最后献上一张奶茶图留念: <br/>
<img style="max-height:330px" class="lazy" data-original="/images/blog/170224_coke/milktea.JPG"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随笔 2017]]></title>
    <link href="http://changchen.me/blog/20170224/diary-2017/"/>
    <updated>2017-02-24T02:57:18+11:00</updated>
    <id>http://changchen.me/blog/20170224/diary-2017</id>
    <content type="html"><![CDATA[<blockquote><p>试着去写写日记吧。 或许可以让你看到一个不一样的我吧 :&ldquo;)</p></blockquote>

<!--more-->


<br>   


<blockquote><h3>2017/01/18</h3>

<hr />

<p>转眼都2017年了, 离回国还有一个月吧.  <br/>
新的一年还是要努力变得强大吧, 人生总会有很多的无奈, 好像整个轨迹在出生时就别决定了.   <br/>
但自己真的很幸运, 所以要更加努力, 让支持自己的人过得更好一些.</p></blockquote>

<br>


<blockquote><h3>2017/01/28</h3>

<hr />

<p>一年就这么过去了, 真的好快, 写一下年终总结好了, 和新年的期盼.  <br/>
总结一下这一年留学的得与失吧: <br/>
1. <strong>英语</strong>: 有时候觉得英语这种东西和乒乓球还挺像的, 绝大部分乒乓球打的很好的人小时候都是打专业的, 英语也是一样的道理.  <br/>
但这不是不努力的理由, 这一年虽然还是没有把英语说的很native, 但至少有很大的提高了. 我鼓起勇气去参加志愿者, 去变得主动和别人交流, etc.    <br/>
虽然要是再来一遍我肯定可以做的更好, 但努力过至少比什么也没做来的强.  <br/>
一个在国外学英语的建议吧: 要按照自己兴趣来. 例如喜欢打乒乓, 就能打球的时候认识很多朋友聊聊天练练口语, 乒乓球社交? 哈哈.  <br/>
2. <strong>学习</strong>: 学习也算努力, 成绩却都不太好, 一是因为真的不太擅长考试, 二是可能能力真的不够吧.  <br/>
第二个学期比第一个学期明显适应提高了很多, 假装是自己经受了磨炼, 能力变强了吧.   <br/>
说实话在这边也真的学到了很多东西, 我们的专业其实一点也不水, 只是中国学生实在是..    <br/>
这一年学到最珍贵的东西还是先进的教育方法, 遇见很多优秀的老师和同学, 感受颇深.  <br/>
3. <strong>独立</strong>: 一个人生活也没有想象中的艰难, 也挺享受一个人烧饭的悠闲日子. 只是希望自己再独立勇敢一些. <br/>
总的来说, 这一年有遗憾也有收货, 希望未来的日子还能一直做个无忧无虑的追风少年.</p></blockquote>

<br>


<blockquote><h3>2017/01/30</h3>

<hr />

<p>如果说对一个人的厌恶来自他的无知和低能, 可这两个东西很大部分是先天决定的, 例如自己也是无知和低能的.  <br/>
所以真正令人讨厌的是<strong>自以为是</strong>和<strong>不知进取</strong>. 人类一直都是无知和渺小的, 永远记得要保持一颗谦虚低调和上进的心.  <br/>
可惜话说回来谦虚上进这种东西也不是天生的, 很大程度由家庭基因决定, 所以还是永远不要轻易去讨厌一个人, 人人平等, 珍惜生命中的每一点幸运.      <br/>
&ldquo;When you judge someone, you don&rsquo;t define them, you define yourself.&rdquo;</p></blockquote>

<br>


<blockquote><h3>2017/02/24</h3>

<hr />

<p>终于结束了一个星期的面试, 都面的有些麻木了. 晚上决定去酒店附近的乒乓球俱乐部打了会球放松放松. 然而晚上其中发生的一些事情让人感受颇深, 睡前记录一下.  <br/>
最大的感受就是城市人套路真深:  <br/>
_ <br/>
我刚到乒乓球场的时候, 有个人落单着, 我看他可怜就和他打了一会.    <br/>
说实话他打的不太好, 但我也随便玩玩, 还很nice地教了他很多东西.    <br/>
后来我在休息的时候, 他过来意思是想让我指导一下反手, 想再和我打打.  <br/>
我当时有些累就婉拒了, 然后..他好像就再也没正眼看我了, 走的时候也只没有和我打招呼.   <br/>
(当然还有另外一些让人不太舒服的细节就不详细说了) <br/>
_   <br/>
有些迷惘的是觉得他有些太&#8221;自私&#8221;了, 利用别人的时候热情如火, 要是没有利用价值了就丢掉不要了. 人与人之间的关系为什么不能单纯真诚一些.     <br/>
例如在国外时, 和我打过球的老外, 不管厉不厉害, 至少不管什么时候都会对我很热情, 真心的当做朋友. 在知道我要离开澳洲时, 一个个都会来和我道别, 祝我all best. <br/>
这种反差真的让人有些忧伤.</p></blockquote>

<br>


<blockquote><h3>2017/03/02</h3>

<hr />

<p>回国后感冒难受了一个星期, 先是喉咙痛了三四天一直没好, 然后就是像发烧一样难受, <br/>
最后无奈吃了点感冒灵才好一些, 现在变成咳嗽了, 希望早日能康复.  <br/>
一年多没生病了, 回国必先生场大病的传说竟然是真的..悲哀~~~</p></blockquote>

<br>


<blockquote><h3>2017/03/03</h3>

<hr />

<p>这两天在家就忙着帮老爸老妈弄手机弄电脑, 真的是感慨万分.   <br/>
虽然他们都是大学生, 但对手机电脑还是一窍不通, 以后还是要多教教他们.  <br/>
未来的一年, 先定一个小目标:  希望能给妈妈换个电脑, 然后给父母各买个iPad.     <br/>
加油~~</p></blockquote>

<br>


<blockquote><h3>2017/03/08</h3>

<hr />

<p>昨天去打球看到墙上挂的一副图, 那时候还是二王一马的时代.  <br/>
依稀记得初中打球的时候, 大家还讨论, 日本出了一个水谷隼打球挺不错的. 现在他小孩都要打酱油了.  <br/>
真的是时光飞逝呀~~~  <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170223_diary/tt_mem.JPG"></p></blockquote>

<br>


<blockquote><h3>2017/03/12</h3>

<hr />

<p>明天就是人生第一次正式入职咯~ 有点小紧张, 加油~</p></blockquote>

<br>


<blockquote><h3>2017/03/20</h3>

<hr />

<p>昨天点了外婆家的外卖, 到了预计送达时间还没有送到, 就打电话到店里催了一下.  <br/>
过了二三十分钟, 终于送到了. 打开门, 外卖员是一个四五十岁的男人, 黝黑的脸就像干枯的泥土, 浑身都被雨水打湿.   <br/>
看到我之后连说了三四个不好意思, 当时不知道为什么有点心疼他, 心里五味杂陈很不是滋味.   <br/>
这个世界上有很多人挣扎着活下去, 珍惜&amp;尊重</p></blockquote>

<br>


<blockquote><h3>2017/04/01</h3>

<hr />

<p>背景： 这周上了六天班， 周六下班后去吃呷哺呷哺犒劳一下自己。  <br/>
记录一下一路上我观察到的一些有趣的事情。  <br/>
1. 我在呷哺呷哺吃了一半的时候， 右边来了个男的， 应该是第一次来吧。  <br/>
观察了一下， 我的直觉告诉我， 他90%是个刚回国的的人或者外国人（eg. Singapore）。 <br/>
因为有这么几个特征： 1. 一直对服务员说谢谢。 2. 中文好像不太好， 显得很拘束， 让我回想起我在国外点餐的经历。。 3. 服务员问他用支付宝还是微信付款的时候， 他尽然说可以用visa卡吗， 最后付的现金。 4. 他用手机的时候, 我偷瞄了一眼， 用的语言都是英文。 5. 尽然用的是最新的galaxy 8而不是苹果。  <br/>
本来想找他搭个讪， 但最后还是算了。  <br/>
2. 后来左边又来了一个女的， 感觉好呆萌。 估计也是第一次来吃呷哺呷哺吧， 服务员问她麻酱要什么口味， 他竟然说不要。。  <br/>
印象最深的是感觉她有一颗满满的少女心，那种压抑不住地开心和期待却又有一丝丝的紧张和不知所措。果不其然，一会她的男票就来了。  <br/>
3. 吃完呷哺呷哺当然是要来杯奶茶爽一爽咯，付完钱的时候， 看到旁边有个饿了吗的快递员也靠在墙上， 一动不动的玩着手机在等奶茶外卖。  <br/>
巧的是奶茶店里的屏幕上刚好放着饿了吗科比的广告（说实话这个广告还真有点俗）。  <br/>
仔细想想这个画面还是挺心酸的，这个外卖员就算送一辈子的外卖也抵不上那个广告一秒钟的费用吧。  <br/>
_  <br/>
其实挺喜欢暗中观察这个世界的一些细节。 你会体会到这个五彩世界那些迷惘， 幸福， 心酸， etc.  <br/>
也是挺奇妙的。</p></blockquote>

<br>


<blockquote><h3>2017/04/03</h3>

<hr />

<p>背景: 昨天去打球的时候, 碰到了一个教练. 和他打了两局, 然后让他指导我一下拉球的时候, 他说的就是太慢了, 拉的点实在是太慢了.   <br/>
虽然很伤人, 但他说的其实是非常非常正确的, 以他的标准我的拉球真的和shi一样.  <br/>
因为我拉球的时候一是没有合理的重心转换, 二是手臂有些僵硬没有甩出来, 所以拉的球不冲也没有弧线.  <br/>
但是我真正想说的是当两个人(A和B)实力相差的实在太悬殊的话, 强者对弱者的缺点一清二楚, 但弱者是真的无法看清强者到底有多强.  <br/>
感想: 每个人在大部分的subjects, 或者说是对自己的认知, 其实都是一个非常无知的弱者, 例如小时候的我对着电视机还觉得能和王浩张继科一战.  <br/>
所以人还是要谦虚低调, 不然很容易就变成一个naive的小丑.  <br/>
ps. 原来天真蓝的英文名叫做naive blue, 这个英文名还真的是贴切呀, 哈哈哈.</p></blockquote>

<br>


<blockquote><h3>2017/04/09</h3>

<hr />

<p>(想了一分钟, 无话可说)</p></blockquote>

<br>


<blockquote><h3>2017/05/14</h3>

<hr />

<p>这周末第一天在家宅了一天, 结果一天的步数只有十步, 自己被自己戳中了莫名笑点. 但是笑完之后还是挺迷茫的, 时间就在我不经意中一点一点的溜走, 我却无能为力, 过着单一无趣的生活.  <br/>
前两天漫无目的的刷着微博的时候, 看到一个视频:   <br/>
视频中主持人先建了一面小墙, 上边写着&#8221;请写下你这一生中最遗憾的事情&#8221;, 路人纷纷驻足留言. <br/>
最后视频总结说这些所有的遗憾都有一个共同的特点: 都是以没有开头的, eg. 没有跳出自己的comfortable zone. <br/>
有时候也会想自己存在的意义到底是什么, 还是要努力去跳出自己的舒适区, 去体验不同的生活, 而不是做一只井底之蛙~~  <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170223_diary/guo.JPG"></p></blockquote>

<br>


<blockquote><h3>2017/05/21</h3>

<hr />

<p>哎, 今天真的是我人生中最郁闷的一个晚上之一. <br/>
先是眼镜被手不小心砸了一下, 镜脚就断了, 然后好不容易去jins换了和原来一样的镜框(感觉自己傻傻的, 质量这么差还去买一样的, 其实只是嫌麻烦).  <br/>
然后快九点了, 终于把眼镜的事情弄好了准备去吃饭, 本来想喝一点点的, 可是只找到了coco就去买奶茶了.  <br/>
结果前边有个女的在换零钱换了半天, 终于轮到我了, 比我晚来的女的竟然就直接上前点了, 我无奈的对她说&#8221;不好意思, 是我先来的.&ldquo; 也不知道是她故意没听到还是怎么的, 直接把我忽略了.  <br/>
我想想女士优先把, 也就算了. 结果点奶茶的时候, 我发现价格好像不对, 就和那个小哥说我要的是西米露轻奶茶, 不是西米露奶茶, 结果他给我找钱的时候, 奶茶都做好了..他就直接把钱还给我了, 我也是&hellip;.   <br/>
反正之后又发生了一系列不开心的事情&hellip;.</p>

<hr />

<p>反思了一下, 一切都是从没有阻止那个女的插队开始的, 心态就一点一点的崩掉了.    <br/>
所以以后遇到的不开心的事, 还是要更酷一些, <strong>勇敢</strong> 的去反抗, 而不是忍气吞声.</p></blockquote>

<br>


<blockquote><h3>2017/07/16</h3>

<hr />

<p>昨天晚上做了个很长的梦, 梦到*$#%^&amp;$@^#$&amp;, 最后还是中枪gg了.  <br/>
醒过来之后, 突然有些迷惘, 心想一个问题: 如果今天真的是生命中的最后几天, 我会去做什么呢? 我做选择的时候会有什么不同吗? <br/>
昨天看&lt;硅谷>的时候, 看到一句话叫做: <code>do what u want to do rather than should do</code>.   <br/>
可悲的是仔细一想, 好像也没有什么想要做的事情, 233333 <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170223_diary/child.jpg"></p></blockquote>

<br>


<blockquote><h3>2017/07/18</h3>

<hr />

<p>还有一分钟就到十二点了, 却没有一丝睡意, 盯着电脑, 可怕的是竟完全不知道做什么.. <br/>
还是写点流水账, 记录一下时间的流逝把.  <br/>
昨天公司搬新家了, 对着窗户就能看到我家, 感觉还是挺不错的<code>😆</code>  <br/>
<img style="max-height:300px" class="lazy" data-original="/images/blog/170223_diary/hypers_new.JPG"></p></blockquote>

<br>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017 上海后端(python)面试经历分享]]></title>
    <link href="http://changchen.me/blog/20170223/python-backend-inteview-summery/"/>
    <updated>2017-02-23T11:04:32+11:00</updated>
    <id>http://changchen.me/blog/20170223/python-backend-inteview-summery</id>
    <content type="html"><![CDATA[<blockquote><p>这篇文章主要有两个目的:  <br/>
1) 总结自己回国一周, 在上海找工作的经历. <br/>
2) 为准备在上海寻找Python工作的小伙伴的一些参考和建议.   <br/>
ps. 本人渣渣, 文中也都是主观的观点, 看看开心就好, 不喜勿喷.</p></blockquote>

<!--more-->


<p></p>

<br>  


<h3>Introduction</h3>

<p>在尴尬的二月份毕业了, 虽然遗憾错过了校招, 但投了投简历, 回国的一周也面了七八个公司.  <br/>
<img style="max-height:250px" class="lazy" data-original="/images/blog/170220_inteview_summary/calendar.png"></p>

<p>有趣的地方是, 面试过的公司各有特色, 例如有</p>

<ul>
<li>刚建立的初创公司</li>
<li>发展良好进入正轨的创业公司</li>
<li>知名度很高的互联网公司</li>
<li>国企性质的非互联网公司</li>
<li>etc.</li>
</ul>


<p>先简单说说自己想去的公司吧: <strong>成熟的创业团队</strong>.</p>

<ol>
<li>一是因为一些大公司的规章制度和官僚文化我是真的受不了, 里边的人浮躁滑头, 已经没有那颗做技术的单纯和真诚.</li>
<li>二是小公司很多也都不靠谱, 例如那些hr一打电话过来就告知是996, 问能不能接受的创业团队. 努力是没错, 但盲目的燃烧生命只不过是自我麻痹罢了.</li>
</ol>


<br><br>


<h3>目录:</h3>

<ol>
<li><strong>如何获得面试机会</strong></li>
<li><strong>面试过的公司</strong> <br/>
1) <a href="https://www.lagou.com/jobs/2723314.html">巨鲸网络科技</a>   <br/>
2) <a href="https://www.lagou.com/jobs/250624.html?source=pl&amp;i=pl-6">Hypers宏路数据</a>   <br/>
3) <a href="https://www.lagou.com/jobs/1501623.html">药明康德</a>   <br/>
4) <a href="https://www.lagou.com/jobs/2727067.html">再惠技术研发部门</a>   <br/>
5) <a href="https://jobs.ele.me/job/#id=57147d0e02844f812e506e11">饿了么 </a>   <br/>
6) <a href="https://www.lagou.com/center/job_2346695.html">方付通</a>   <br/>
7) <a href="https://www.codechef.com/IOIPRAC/problems/INOI1402">SideChef</a>   <br/>
8) <a href="https://www.lagou.com/jobs/2200722.html">DAOCloud</a></li>
<li><strong>如何成为好的面试官的感想</strong></li>
<li><strong>总结</strong></li>
</ol>


<br>


<br>


<h3>如何获得面试机会</h3>

<ol>
<li><p>拉勾 <br/>
1) 支持上传自定义的pdf简历. <br/>
2) 一键投递, 并且简历投出去之后有全程的跟踪和状态更新, 给人很靠谱的感觉. <br/>
3) hr能在app内直接发消息与我沟通, 很方便.  <br/>
4) 最重要的<strong>核心竞争力</strong>: 丰富并真实的职位.</p></li>
<li><p>在程序员的论坛(eg. V2EX)上搜索或google<code>上海有哪些好的用Python的公司</code> &mdash;> 给这些公司的hr直接发邮件.</p></li>
<li><p>在github上搜想要去的公司的开源项目, 找到参与的人员的博客上的邮箱地址, 然后给他们发邮件(传授一个小tricky: 如果邮箱地址简单加密的话, 用这个命令解下密就OK了: <code>echo ZGF5YTA1NzZAZ21haWwuY29tCg== | base64 -d</code>).</p></li>
<li><p>给一些Python的大佬(Google PyCon)发邮件, 求内推. 比如之前听过直播课的Shell就很热心的帮助了我, 很感动.</p></li>
</ol>


<br>


<br>


<h3>面试过的公司</h3>

<p>首先说下大部分公司的招聘流程吧: <strong>第一步</strong>是hr沟通, 随便聊两句, 然后安排电话面试. <strong>第二步</strong>是电话面试, 大概半个小时到一个小时. <strong>第三步</strong>是去公司面试, 一般会有好几轮, 要是没有面到CTO或者大boss那步, 但hr让你回去等消息的话, 基本上是GG了. <strong>最后</strong>要是顺利的话就是hr和你谈薪资和入职的细节了.</p>

<p>我接下来会写几个实例 (按公司的规模从小到大排序), 不同公司面试的风格也有很大差别.</p>

<ol>
<li><p><strong>巨鲸网络 (初创十人左右的公司):</strong> <br/>
面试官是创始人之一, 他介绍他和另一个创始人都来自惠普. 简单介绍了简历然后问了一些问题.   <br/>
印象比较深的是他很看中<strong>测试</strong>(TDD)和<strong>代码风格</strong>(可读性), 看的出他对他们做的gululu水杯还是很自豪的, 但他一直强调只要程序的可读性够强, 所有注释都是没有必要的, 这点实在不敢苟同.  <br/>
后来他问了我一个<a href="http://changchen.me/blog/20170224/coke-algorithm/">一块钱买汽水的算法问题</a>. 由于我思路不清晰, 手写的代码可读性也不是很好, 感觉他有些不太满意.  <br/>
最后他问我有加入小的创业公司的意愿吗, 有的话就让CTO过来和我面一下, 如果没有的话就算了, 毕竟大家的时间都很宝贵. 当时感觉有些尴尬, 就说那算了吧, 不打扰了.</p></li>
<li><p><strong>再惠 (很有潜力的创业公司):</strong> <br/>
虽然电话面试我有一些问题没答出来, 但还是给了现场面的机会.  <br/>
<strong>一面</strong>的话问了两个算法题, <a href="http://changchen.me/blog/20170306/binary-search/">二分查找的变种</a>和<a href="http://changchen.me/blog/20160915/dynamic-programming/">斐波那契</a>非递归实现, 虽然答的磕磕盼盼, 但还是很喜欢那种面试中交流思考的感觉. 印象比较深的是面试官很年轻, 也是93年的. 很平易近人, 口头禅就是<strong>很科学</strong>, 不断的给你鼓励.  <br/>
<strong>二面</strong>的话问了后台工程师的基础知识, 例如 What happens when u type in google.com in browser. https的实现, 和一些状态码. Restful. 缓存. 队列消息. cdn实现的原理. 数据库事务. 所有Join的含义. 都是一些常规的问题, 可惜自己没准备好. 之后hr过来寒暄一下就让我等消息(婉拒的意思).   <br/>
说实话自己是很喜欢这家公司的, 从面试接触下来, 就能很强烈地感觉到他们的工程师都是非常聪明也很优秀的人, 这个世界上真的是越优秀的人越低调和平易近人.   <br/>
虽然问的问题不难也很常规, 但真的是自己没怎么准备. 但真正觉得可惜的是错过了一家对同事标准很苛刻的公司.</p></li>
<li><p><strong>HyperS (创立八年发展良好的创业公司):</strong> <br/>
一面先让我做了一份试卷, 考的都是Python的特性, 我大部分都答出来了. 然后问了一些问题, 例如完全二叉树的定义, hash是如何实现去重的, Django的middleware, session. Django如何直接操作数据库. Django中template变量的默认值. range(1, 101)[::2] 迭代最后剩下的两个数. len=10的数组分成两半, 得到和的差最小 (<a href="http://changchen.me/blog/20170525/partition-problem/">数组分隔-编程之美</a>)  <br/>
二面感觉挺随意的, 但我也答的不是很好, 幸运还是过了.   <br/>
最后就是CTO的面试, 他会根据面试者的简历进行提问, 看到我学过<a href="http://changchen.me/blog/20160228/comp9315-16s1/">DBMS Implementation</a>, 就问了我数据库索引的实现方法, 我答上了三四种, 感觉他还是挺意外的. 还问了<a href="http://changchen.me/blog/20170611/python-sorting-algorithms/">排序算法</a>，分析一下时间复杂度，总的来说，问的都不太难。    <br/>
感觉CTO思路逻辑也十分的清晰, 想要考察的几个点都提前想好了. 最后决定去这家公司, 对这个CTO的好印象也是加了很多分的.       <br/>
但第一次去他家面试的时候, 其实印象是不太好的, 感觉<strong>有些压抑</strong>: 例如整个办公环境有些乱, 一些咖啡机, 桌上足球娱乐设施都堆积着杂物, 完全沦为装饰了. 去网上搜的时候, 信息也少的可怜. 例如微博主页, 微信公共号都没有持续经营. 但听说今年六月会搬公司, 期待~~</p></li>
<li><p><strong>DAOCloud</strong>  <br/>
应该是个很不错的公司, 但电话面试就gg了. 当最后面试官说我给你一些建议吧, 我还试图挣扎一下, 让他问我一些Python的问题, 结果他问了asyncio和import future的实现原理, GG~</p></li>
<li><p><strong>方付通</strong>  <br/>
面试官一进来就一副高冷的样子, 全程面无表情. 虽然我菜, 既然都来了, 人与人之间最基本的尊重还是要有的.  <br/>
问了很多基础知识和<a href="http://changchen.me/blog/20170308/catalan-number-interview/">一个算法题: N个数依次入栈，出栈顺序有多少种？</a></p></li>
<li><p><strong>饿了吗</strong>  <br/>
饿了吗还是高大上, 门口还有帅气的保安在迎接, 取了号等了一会面, 试官就来了.<br/>
感觉面试官有些莫名的高傲, 面的也很随意, 不太喜欢.  <br/>
一开始问了个数据库的问题，<a href="http://changchen.me/blog/20170515/ele-interview-solution/">查找所有用户最近的一天登录记录</a>.      <br/>
问的也都是一些很常规的面试题, 例如写一个装饰器的单例模式, GIL, metaclass. 最后让我徒手写个flask的app O.O  <br/>
但还是自己能力不够+没有好好准备吧 XD.</p></li>
<li><p><strong>药明康德 &ndash; 明码生物科技</strong> <br/>
五六个人一起面我,感觉氛围还是很轻松的.    <br/>
公司很大, 楼都数不过来. 但自身还是不太喜欢这样国企性质的公司吧, 而且感觉技术氛围也不是特别强.  <br/>
虽然福利有保障, 人手一部mbp, 开的工资也比hypers还高。 但位置太偏了, 女朋友要是来找我, 不是要多做一个小时地铁. 最后毫不犹豫的放弃它了.    <br/>
影响最深的一点就是去找面试的那幢楼的时候, 看到一幢楼竟然有个保安在门口嘘嘘&hellip;</p></li>
</ol>


<br><br>


<h3>如何成为好的面试官的感想</h3>

<p>虽然只面试了一周, 但对一些好的面试官也是印象深刻. 有一天自己也可能会变成面试官, 记录一下优秀面试官的特质:</p>

<ol>
<li>无论面试者的水平高低, 给予最基本的<strong>尊重</strong>. 例如真诚的沟通和正面的鼓励.</li>
<li>提前准备, 思路清晰, 想好自己要考察的点. 例如是否真的热爱写程序, 基础知识是否扎实, 表达能力是否清晰等等</li>
<li>根据面试者的简历问问题, 讨论他感兴趣擅长的领域, 而不是问全部是那些常规无趣的问题.</li>
<li>不断地去挖掘面试者的潜力, 并帮助面试者更有<strong>展示自己的欲望</strong>.</li>
</ol>


<br><br>


<h3>总结</h3>

<p>感觉自己这个人还是没什么上进心, 面试的题库也懒得背, 工资也随便公司开, 一个星期就把自己的命运决定了.  <br/>
但最后去hypers主要还是这么几个原因:</p>

<ol>
<li><strong>不加班:</strong> 周六不上班, 入职之后每天也基本没有超过七点的加班, 作息大概是 十点前到, 七点前下班.</li>
<li><strong>盲目的自信:</strong> 工资虽然并不高, 但自己总有些盲目的自信, 觉得以后能通过工作的表现证明自己的能力, 拿到应有的薪资.</li>
<li><strong>CTO:</strong> 对CTO的思路清晰的好印象, 觉得这家公司的研发也应该差不到哪里去.</li>
</ol>


<br><br>


<h3>真心的两点建议:</h3>

<ol>
<li>提早<strong>用面试去准备面试</strong>. 国内后台开发面试题其实都挺死板的, 例如http协议, 数据库的事务和那几个简单算法题. 提早参加几个面试了解自己不足的地方, 然后去准备面试才是最正确的姿势.</li>
<li><strong>平时的积累</strong>才是最重要的, 基础知识(数据结构, 算法, 网络, 操作系统..)是你通过面试的保障, 但对于我们普通人来说, 打动面试官的是你对写代码的那份热情和平时学习积累的细节.</li>
<li>还在读书的时候, 放假时要尽可能<strong>去大公司找找实习</strong>, 不管对自己能力的证明和提高, 对人生规划的眼界, 都是最快的捷径.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python - Note of Variable Scope]]></title>
    <link href="http://changchen.me/blog/20170220/python-scope/"/>
    <updated>2017-02-20T12:34:57+11:00</updated>
    <id>http://changchen.me/blog/20170220/python-scope</id>
    <content type="html"><![CDATA[<blockquote><p>Watched an awesome video about python scope: <br>
<a href="https://www.youtube.com/watch?v=QVdf0LgmICw">https://www.youtube.com/watch?v=QVdf0LgmICw</a></p></blockquote>

<!--more-->


<br>   


<p>My clear summery of the video:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&#39;&#39;&#39; LEGB:</span>
</span><span class='line'><span class="sd">Local, Enclosing, Global, Built-in</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&#39;&#39;&#39; Build-in variables &#39;&#39;&#39;</span>
</span><span class='line'><span class="c"># import builtins</span>
</span><span class='line'><span class="c"># print(dir(builtins))</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="s">&#39;global x&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">outer</span><span class="p">():</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="s">&#39;outer x&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
</span><span class='line'>        <span class="n">x</span> <span class="o">=</span> <span class="s">&#39;inner x&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
